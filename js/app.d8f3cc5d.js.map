{"version":3,"file":"js/app.d8f3cc5d.js","mappings":"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","sources":["webpack://long-term-care-web/./src/App.vue","webpack://long-term-care-web/./src/App.vue?7ccd","webpack://long-term-care-web/./src/views/HomeView.vue","webpack://long-term-care-web/./src/utils/dataProcessor.js","webpack://long-term-care-web/./src/stores/dataStore.js","webpack://long-term-care-web/./src/components/LoadingOverlay.vue","webpack://long-term-care-web/./src/components/LoadingOverlay.vue?68e9","webpack://long-term-care-web/./src/views/LeftView.vue","webpack://long-term-care-web/./src/tabs/LayersTab.vue","webpack://long-term-care-web/./src/utils/utils.js","webpack://long-term-care-web/./src/tabs/LayersTab.vue?5c59","webpack://long-term-care-web/./src/views/LeftView.vue?577f","webpack://long-term-care-web/./src/views/RightView.vue","webpack://long-term-care-web/./src/tabs/PropertiesTab.vue","webpack://long-term-care-web/./src/components/DetailItem.vue","webpack://long-term-care-web/./src/components/DetailItem.vue?6bde","webpack://long-term-care-web/./src/tabs/PropertiesTab.vue?57c5","webpack://long-term-care-web/./src/views/RightView.vue?c29a","webpack://long-term-care-web/./src/views/UpperView.vue","webpack://long-term-care-web/./src/tabs/MapTab.vue","webpack://long-term-care-web/./src/stores/defineStore.js","webpack://long-term-care-web/./src/tabs/MapTab.vue?15ab","webpack://long-term-care-web/./src/tabs/DashboardTab.vue","webpack://long-term-care-web/./src/tabs/DashboardTab.vue?3301","webpack://long-term-care-web/./src/views/UpperView.vue?e2e7","webpack://long-term-care-web/./src/views/BottomView.vue","webpack://long-term-care-web/./src/tabs/DataTableTab.vue","webpack://long-term-care-web/./src/tabs/DataTableTab.vue?e5ab","webpack://long-term-care-web/./src/views/BottomView.vue?8dbb","webpack://long-term-care-web/./src/views/MiddleView.vue","webpack://long-term-care-web/./src/views/MiddleView.vue?3897","webpack://long-term-care-web/./src/views/ResponsiveLowerView.vue","webpack://long-term-care-web/./src/views/ResponsiveLowerView.vue?21f9","webpack://long-term-care-web/./src/views/HomeView.vue?1da1","webpack://long-term-care-web/./src/router/index.js","webpack://long-term-care-web/./src/main.js","webpack://long-term-care-web/webpack/bootstrap","webpack://long-term-care-web/webpack/runtime/chunk loaded","webpack://long-term-care-web/webpack/runtime/compat get default export","webpack://long-term-care-web/webpack/runtime/define property getters","webpack://long-term-care-web/webpack/runtime/global","webpack://long-term-care-web/webpack/runtime/hasOwnProperty shorthand","webpack://long-term-care-web/webpack/runtime/jsonp chunk loading","webpack://long-term-care-web/webpack/startup"],"sourcesContent":["<script>\n  /**\n   * 🏠 App.vue - 應用程式主組件\n   *\n   * 功能說明：\n   * 1. 🏗️ 提供應用程式整體框架和佈局結構\n   * 2. ⏳ 管理全域載入狀態和進度顯示\n   * 3. 🦶 提供應用程式頁腳，包含版權和技術資訊\n   * 4. 🚀 管理 Vue Router 的路由導航系統\n   * 5. 📱 實現響應式滿版佈局，無邊距和空隙\n   *\n   * 架構說明：\n   * - 內容層：路由視圖容器，動態顯示不同頁面組件\n   *\n   * 設計理念：\n   * - 滿版無邊距佈局設計\n   * - 模組化組件架構\n   */\n\n  // 🔧 Vue Composition API 引入\n  import { ref } from 'vue';\n\n  export default {\n    name: 'App',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊應用程式層級使用的組件\n     */\n    components: {},\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定應用程式層級的狀態管理\n     */\n    setup() {\n      // ⏳ 全域載入狀態管理 (Global Loading State Management)\n      /** ⏳ 是否顯示載入覆蓋層 */\n      const isLoading = ref(false);\n      /** 📝 載入文字提示 */\n      const loadingText = ref('載入中...');\n      /** 📊 載入進度百分比 (0-100) */\n      const loadingProgress = ref(0);\n      /** 📊 是否顯示進度條 */\n      const showLoadingProgress = ref(false);\n      /** 📝 載入子文字說明 */\n      const loadingSubText = ref('');\n\n      // 📤 返回響應式數據和函數給模板使用 (Return Reactive Data and Functions)\n      return {\n        // ⏳ 載入狀態\n        isLoading, // 載入狀態開關\n        loadingText, // 載入主要文字\n        loadingProgress, // 載入進度\n        showLoadingProgress, // 是否顯示進度條\n        loadingSubText, // 載入輔助文字\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 🏠 App.vue - 主應用程式組件 (Main Application Component) -->\n  <!-- 提供應用程式整體框架，使用 Bootstrap 實現滿版無空隙佈局 -->\n  <div id=\"app\" class=\"d-flex flex-column vh-100\">\n    <!-- 📱 主要內容區域 (Main Content Area) -->\n    <div class=\"d-flex flex-column overflow-hidden\">\n      <router-view />\n    </div>\n  </div>\n</template>\n\n<style>\n  /**\n * 🎨 應用程式全域樣式 (Application Global Styles)\n *\n * 引入共用 CSS 並定義應用程式層級的樣式\n * 注意：大部分樣式已移至 common.css 中統一管理\n */\n\n  /* 📦 引入共用樣式表 (Import Common Stylesheets) */\n  @import './assets/css/common.css';\n\n  /* 📱 應用程式特定樣式 (App-Specific Styles) */\n  /* 其他樣式已整合至 common.css 中，避免重複定義 */\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=591c7e93\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=591c7e93&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\n  import { ref, onMounted, onUnmounted, computed, nextTick, watch } from 'vue';\n  import { useDataStore } from '@/stores/dataStore';\n\n  // 🧩 組件引入\n  import LoadingOverlay from '../components/LoadingOverlay.vue';\n  import LeftView from './LeftView.vue';\n  import RightView from './RightView.vue';\n  import MiddleView from './MiddleView.vue';\n  import UpperView from './UpperView.vue';\n  import ResponsiveLowerView from './ResponsiveLowerView.vue';\n\n  export default {\n    name: 'HomeView',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊首頁使用的所有子組件\n     */\n    components: {\n      LoadingOverlay, // 載入覆蓋層組件\n      LeftView, // 左側控制面板組件\n      RightView, // 右側面板組件\n      MiddleView, // 中間主要內容面板組件\n      UpperView, // 上半部區域組件\n      ResponsiveLowerView, // 下半部區域組件\n    },\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯和狀態管理\n     */\n    setup() {\n      // 📦 取得 Pinia 數據存儲實例\n      const dataStore = useDataStore();\n\n      // 📊 本地資料狀態 (Local Data State)\n      /** 📋 表格資料暫存 */\n      const tableData = ref([]);\n\n      // 📚 組件引用 (Component References)\n      /** 🌟 中間面板組件引用 */\n      const middlePanelRef = ref(null);\n      /** 📱 響應式上半部面板組件引用 */\n      const mobileUpperViewRef = ref(null);\n      /** 🦶 頁腳元素引用 */\n      const appFooterRef = ref(null);\n\n      // 📑 分頁狀態 (Tab States)\n      /** 🗺️ 主要分頁狀態（地圖/儀表板） */\n      const activeUpperTab = ref('map');\n      /** 📋 底部分頁狀態（表格/樣式） */\n      const activeBottomTab = ref('table');\n      /** 📊 右側分頁狀態（屬性/分析） */\n      const activeRightTab = ref('properties');\n      /** 📱 響應式下半部分頁狀態（行動版/平板版） */\n      const activeLowerTab = ref('layers');\n\n      // 📏 面板大小狀態 (Panel Size States)\n      // 使用百分比系統實現響應式佈局\n      const MIN_LEFT_PANEL_WIDTH_PERCENT = 5; // 左側面板最小寬度百分比\n      /** 📏 左側面板寬度百分比 (0-100%) */\n      const leftViewWidth = ref(20);\n      /** 📏 右側面板寬度百分比 (0-100%) */\n      const rightViewWidth = ref(20);\n      /** 📏 瀏覽器視窗寬度 */\n      const windowWidth = ref(window.innerWidth);\n      /** 📏 瀏覽器視窗高度 */\n      const windowHeight = ref(window.innerHeight);\n      /** 📏 頁腳高度 */\n      const footerHeight = ref(0);\n\n      // 🧮 計算屬性 - 面板尺寸 (Computed Properties - Panel Dimensions)\n      /** 📏 左側面板像素寬度 */\n      const leftViewWidthPx = computed(() => `${leftViewWidth.value}%`);\n      /** 📏 右側面板像素寬度 */\n      const rightViewWidthPx = computed(() => `${rightViewWidth.value}%`);\n      /** 📏 中間面板寬度百分比 */\n      const mainPanelWidth = computed(() => 100 - leftViewWidth.value - rightViewWidth.value);\n      /** 📏 中間面板像素寬度 */\n      const mainPanelWidthPx = computed(() => `${mainPanelWidth.value}%`);\n\n      /** 📏 中間面板計算高度 */\n      const calculatedMiddleViewHeight = computed(() => {\n        return windowHeight.value - footerHeight.value;\n      });\n\n      // ⏳ 載入狀態 (Loading States)\n      // 由 Pinia store 驅動的載入狀態管理\n      /** 📝 載入文字提示 */\n      const loadingText = ref('載入中...');\n      /** 📊 載入進度百分比 */\n      const loadingProgress = ref(0);\n      /** 📊 是否顯示進度條 */\n      const showLoadingProgress = ref(false);\n      /** 📝 載入子文字說明 */\n      const loadingSubText = ref('');\n\n      /** ⏳ 是否有任何圖層正在載入 */\n      const isAnyLayerLoading = computed(() =>\n        dataStore.getAllLayers().some((layer) => layer.isLoading)\n      );\n\n      /**\n       * 👀 監聽載入狀態變化 (Watch Loading State Changes)\n       * 根據 Pinia store 中的圖層載入狀態更新 UI 提示\n       */\n      watch(\n        isAnyLayerLoading,\n        (loading) => {\n          if (loading) {\n            const loadingLayer = dataStore.getAllLayers().find((l) => l.isLoading);\n            loadingText.value = `載入 ${loadingLayer.layerName} 數據中...`;\n            loadingSubText.value = '正在處理地理資訊...';\n          } else {\n            loadingText.value = '載入完成';\n            loadingSubText.value = `數據已更新`;\n          }\n        },\n        { deep: true }\n      );\n\n      // 🗺️ 地圖和圖層狀態 (Map and Layer States)\n      // 大部分狀態由 Pinia store 管理，此處保留 UI 控制相關狀態\n      /** 🗺️ 台南圖層顯示狀態（從 store 計算） */\n      const showTainanLayer = computed(() => dataStore.findLayerById('tainan')?.visible || false);\n      /** 🔍 選定的資料篩選器 */\n      const selectedFilter = ref(null);\n      /** 🔍 地圖縮放等級 */\n      const zoomLevel = ref(11);\n      /** 📍 當前地圖座標 */\n      const currentCoords = ref({ lat: 25.033, lng: 121.5654 });\n      /** 📍 作用中的地圖標記數量 */\n      const activeMarkers = ref(0);\n\n      // 🔧 拖曳狀態 (Dragging States)\n      /** 🖱️ 側邊面板拖曳進行中狀態 */\n      const isSidePanelDragging = ref(false);\n\n      // 📊 距離輸入 Modal 相關變數 (Distance Input Modal Related Variables)\n      const showDistanceModal = ref(false); // 是否顯示距離輸入 modal\n      const distanceModalPosition = ref({ lat: 0, lng: 0 }); // 點擊位置的座標\n      const distanceInput = ref(''); // 距離輸入值\n\n      // 📊 等時分析 Modal 相關變數 (Isochrone Analysis Modal Related Variables)\n      const showIsochroneModal = ref(false); // 是否顯示等時分析 modal\n      const isochroneModalPosition = ref({ lat: 0, lng: 0 }); // 點擊位置的座標\n      const isochroneInput = ref(''); // 車程時間輸入值\n\n      // 🗺️ 地圖互動函數 (Map Interaction Functions)\n\n      /**\n       * 🔄 重設地圖視圖 (Reset Map View)\n       * 將地圖恢復到初始狀態\n       */\n      const resetView = () => {\n        if (middlePanelRef.value) {\n          middlePanelRef.value.resetMapTab();\n        }\n      };\n\n      // 🔧 拖拽調整功能 (Drag Resize Functions)\n\n      /**\n       * 🔧 開始調整面板大小 (Start Panel Resize)\n       * 改進版本的拖曳系統，提供更流暢的體驗\n       *\n       * @param {string} direction - 拖曳方向（'left' 或 'right'）\n       * @param {MouseEvent} event - 滑鼠事件對象\n       */\n      const startResize = (direction, event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // 設定拖曳狀態和防止文字選取\n        isSidePanelDragging.value = true;\n        document.body.classList.add('my-no-select');\n\n        // 記錄初始位置和面板尺寸\n        const startX = event.clientX;\n        const startLeftWidth = leftViewWidth.value;\n        const startRightWidth = rightViewWidth.value;\n\n        // 獲取窗口尺寸以計算百分比\n        const currentWindowWidth = windowWidth.value;\n\n        console.log(`🔧 開始調整 ${direction} 方向，初始值:`, {\n          leftWidth: startLeftWidth,\n          rightWidth: startRightWidth,\n        });\n\n        /**\n         * 🖱️ 處理滑鼠移動事件 (Handle Mouse Move)\n         */\n        const handleMouseMove = (moveEvent) => {\n          moveEvent.preventDefault();\n\n          const deltaX = moveEvent.clientX - startX;\n          const deltaXPercent = (deltaX / currentWindowWidth) * 100;\n\n          if (direction === 'left') {\n            // 調整左側面板寬度\n            let newWidth = startLeftWidth + deltaXPercent;\n            // 限制寬度：最小值為 MIN_LEFT_PANEL_WIDTH_PERCENT，最大值確保主面板不為負\n            newWidth = Math.max(\n              MIN_LEFT_PANEL_WIDTH_PERCENT,\n              Math.min(100 - rightViewWidth.value, newWidth)\n            );\n            leftViewWidth.value = newWidth;\n          } else if (direction === 'right') {\n            // 調整右側面板寬度\n            let newWidth = startRightWidth - deltaXPercent;\n            // 限制寬度：最小值為 0，最大值確保主面板不為負\n            newWidth = Math.max(0, Math.min(100 - leftViewWidth.value, newWidth));\n            rightViewWidth.value = newWidth;\n          }\n        };\n\n        /**\n         * 🖱️ 處理滑鼠放開事件 (Handle Mouse Up)\n         */\n        const handleMouseUp = () => {\n          // 清除拖曳狀態\n          isSidePanelDragging.value = false;\n          document.body.classList.remove('my-no-select');\n          document.removeEventListener('mousemove', handleMouseMove);\n          document.removeEventListener('mouseup', handleMouseUp);\n\n          // 驗證最終尺寸\n          validatePanelSizes();\n\n          console.log('✅ 拖曳調整完成，最終值:', {\n            leftWidth: leftViewWidth.value,\n            rightWidth: rightViewWidth.value,\n            mainWidth: mainPanelWidth.value,\n          });\n        };\n\n        // 註冊事件監聽器\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n      };\n\n      /**\n       * ✅ 驗證面板尺寸 (Validate Panel Sizes)\n       * 確保面板尺寸在合理範圍內 (0-100%)\n       */\n      const validatePanelSizes = () => {\n        // 確保各面板在合理範圍內\n        leftViewWidth.value = Math.max(\n          MIN_LEFT_PANEL_WIDTH_PERCENT,\n          Math.min(100, leftViewWidth.value)\n        );\n        rightViewWidth.value = Math.max(0, Math.min(100, rightViewWidth.value));\n\n        // 四捨五入到一位小數\n        leftViewWidth.value = Math.round(leftViewWidth.value * 10) / 10;\n        rightViewWidth.value = Math.round(rightViewWidth.value * 10) / 10;\n      };\n\n      // 📊 距離輸入 Modal 處理函數 (Distance Input Modal Handler Functions)\n      /**\n       * 📊 顯示距離輸入 Modal\n       * @param {number} lat - 緯度\n       * @param {number} lng - 經度\n       */\n      const openDistanceModal = (lat, lng) => {\n        console.log('🔍 openDistanceModal 被調用:', { lat, lng });\n        distanceModalPosition.value = { lat, lng };\n        distanceInput.value = '2'; // 預設為 2 公里\n        showDistanceModal.value = true;\n        console.log('🔍 Modal 狀態已設定:', {\n          showDistanceModal: showDistanceModal.value,\n          distanceInput: distanceInput.value,\n          distanceModalPosition: distanceModalPosition.value,\n        });\n      };\n\n      /**\n       * 📊 處理距離輸入確認\n       */\n      const handleDistanceConfirm = () => {\n        console.log('🔍 handleDistanceConfirm 被調用');\n        const distance = parseFloat(distanceInput.value);\n        console.log('🔍 解析的距離:', distance);\n        console.log('🔍 當前座標:', distanceModalPosition.value);\n\n        if (distance && distance > 0) {\n          // 將公里轉換為米，然後使用輸入的距離添加分析點\n          const radiusInMeters = distance * 1000;\n          console.log('🔍 轉換為米:', radiusInMeters);\n\n          try {\n            const result = dataStore.addAnalysisPoint(\n              distanceModalPosition.value.lat,\n              distanceModalPosition.value.lng,\n              radiusInMeters\n            );\n            console.log('🔍 addAnalysisPoint 結果:', result);\n          } catch (error) {\n            console.error('❌ addAnalysisPoint 錯誤:', error);\n          }\n\n          // 關閉 modal\n          showDistanceModal.value = false;\n          // 通知地圖組件停止點擊模式\n          if (middlePanelRef.value && middlePanelRef.value.stopClickMode) {\n            console.log('🔍 調用 middlePanelRef.stopClickMode');\n            middlePanelRef.value.stopClickMode();\n          } else if (mobileUpperViewRef.value && mobileUpperViewRef.value.stopClickMode) {\n            console.log('🔍 調用 mobileUpperViewRef.stopClickMode');\n            mobileUpperViewRef.value.stopClickMode();\n          } else {\n            console.warn('⚠️ 無法找到 stopClickMode 方法');\n          }\n        } else {\n          console.warn('⚠️ 距離無效:', distance);\n        }\n      };\n\n      /**\n       * 📊 處理距離輸入取消\n       */\n      const handleDistanceCancel = () => {\n        showDistanceModal.value = false;\n      };\n\n      // 📊 等時分析 Modal 處理函數 (Isochrone Analysis Modal Handler Functions)\n      /**\n       * 📊 顯示等時分析 Modal\n       * @param {number} lat - 緯度\n       * @param {number} lng - 經度\n       */\n      const openIsochroneModal = (lat, lng) => {\n        console.log('🔍 openIsochroneModal 被調用:', { lat, lng });\n        isochroneModalPosition.value = { lat, lng };\n        isochroneInput.value = '15'; // 預設為 15 分鐘\n        showIsochroneModal.value = true;\n        console.log('🔍 等時分析 Modal 狀態已設定:', {\n          showIsochroneModal: showIsochroneModal.value,\n          isochroneInput: isochroneInput.value,\n          isochroneModalPosition: isochroneModalPosition.value,\n        });\n      };\n\n      /**\n       * 📊 處理等時分析輸入確認\n       */\n      const handleIsochroneConfirm = () => {\n        console.log('🔍 handleIsochroneConfirm 被調用');\n        const timeMinutes = parseFloat(isochroneInput.value);\n        console.log('🔍 解析的車程時間:', timeMinutes);\n        console.log('🔍 當前座標:', isochroneModalPosition.value);\n\n        if (timeMinutes && timeMinutes > 0) {\n          try {\n            const result = dataStore.addIsochroneAnalysisPoint(\n              isochroneModalPosition.value.lat,\n              isochroneModalPosition.value.lng,\n              timeMinutes\n            );\n            console.log('🔍 addIsochroneAnalysisPoint 結果:', result);\n          } catch (error) {\n            console.error('❌ addIsochroneAnalysisPoint 錯誤:', error);\n          }\n\n          // 關閉 modal\n          showIsochroneModal.value = false;\n          // 通知地圖組件停止點擊模式\n          if (middlePanelRef.value && middlePanelRef.value.stopIsochroneClickMode) {\n            console.log('🔍 調用 middlePanelRef.stopIsochroneClickMode');\n            middlePanelRef.value.stopIsochroneClickMode();\n          } else if (mobileUpperViewRef.value && mobileUpperViewRef.value.stopIsochroneClickMode) {\n            console.log('🔍 調用 mobileUpperViewRef.stopIsochroneClickMode');\n            mobileUpperViewRef.value.stopIsochroneClickMode();\n          } else {\n            console.warn('⚠️ 無法找到 stopIsochroneClickMode 方法');\n          }\n        } else {\n          console.warn('⚠️ 車程時間無效:', timeMinutes);\n        }\n      };\n\n      /**\n       * 📊 處理等時分析輸入取消\n       */\n      const handleIsochroneCancel = () => {\n        showIsochroneModal.value = false;\n      };\n\n      // 📏 視窗大小變化處理 (Window Resize Handler)\n      /**\n       * 📏 處理瀏覽器視窗大小變化 (Handle Browser Window Resize)\n       */\n      const handleResize = () => {\n        const prevWidth = windowWidth.value;\n        const prevIsDesktop = prevWidth >= 1200;\n\n        windowWidth.value = window.innerWidth;\n        windowHeight.value = window.innerHeight;\n\n        const currentIsDesktop = window.innerWidth >= 1200;\n\n        // 檢查是否跨越了響應式斷點\n        if (prevIsDesktop !== currentIsDesktop) {\n          console.log(\n            `🔄 HomeView: 響應式斷點切換 ${prevIsDesktop ? '桌面版→響應式' : '響應式→桌面版'}`\n          );\n          handleScreenSizeChange();\n        } else {\n          // 同樣佈局模式下的大小變化，通知地圖重新計算尺寸\n          nextTick(() => {\n            setTimeout(() => {\n              if (currentIsDesktop && middlePanelRef.value) {\n                // 桌面版地圖尺寸調整\n                if (middlePanelRef.value.invalidateMapSize) {\n                  middlePanelRef.value.invalidateMapSize();\n                }\n              } else if (!currentIsDesktop && mobileUpperViewRef.value) {\n                // 響應式版本地圖尺寸調整\n                if (mobileUpperViewRef.value.invalidateMapSize) {\n                  mobileUpperViewRef.value.invalidateMapSize();\n                }\n              }\n            }, 100);\n          });\n        }\n\n        nextTick(() => {\n          // 只在 xl breakpoint 以上才計算 footer 高度\n          if (appFooterRef.value && window.innerWidth >= 1200) {\n            footerHeight.value = appFooterRef.value.offsetHeight;\n          } else {\n            footerHeight.value = 0;\n          }\n\n          // 檢查響應式底部面板高度是否仍然符合最小要求\n          if (!currentIsDesktop) {\n            const minHeight = calculateMinBottomHeight();\n            if (mobileBottomViewHeight.value < minHeight) {\n              mobileBottomViewHeight.value = Math.round(minHeight);\n              console.log(\n                `🔧 HomeView: 視窗大小變化，調整底部面板最小高度至 ${mobileBottomViewHeight.value}vh`\n              );\n            }\n          }\n        });\n      };\n\n      /**\n       * 🚀 組件掛載事件 (Component Mounted Event)\n       * 初始化組件和事件監聽器\n       */\n      onMounted(() => {\n        console.log('🚀 空間分析平台已初始化');\n\n        // 添加視窗調整事件監聽\n        window.addEventListener('resize', handleResize);\n\n        // 初始化計算頁腳高度\n        nextTick(() => {\n          // 只在 xl breakpoint 以上才計算 footer 高度\n          if (appFooterRef.value && window.innerWidth >= 1200) {\n            footerHeight.value = appFooterRef.value.offsetHeight;\n          } else {\n            footerHeight.value = 0;\n          }\n        });\n\n        // 設置螢幕尺寸觀察器\n        if (window.ResizeObserver) {\n          screenSizeObserver = new ResizeObserver((entries) => {\n            for (let entry of entries) {\n              const { width } = entry.contentRect;\n              // 檢測是否跨越 xl breakpoint (1200px)\n              const isXlAndAbove = width >= 1200;\n              const wasXlAndAbove = entry.target.classList.contains('xl-and-above');\n\n              if (isXlAndAbove !== wasXlAndAbove) {\n                // 螢幕尺寸跨越了 xl breakpoint\n                entry.target.classList.toggle('xl-and-above', isXlAndAbove);\n                handleScreenSizeChange();\n              }\n            }\n          });\n\n          screenSizeObserver.observe(document.body);\n        }\n      });\n\n      // 📍 座標和標記更新函數 (Coordinate and Marker Update Functions)\n\n      /**\n       * 📍 更新作用中標記數量 (Update Active Markers Count)\n       * @param {number} count - 標記數量\n       */\n      const updateActiveMarkers = (count) => {\n        activeMarkers.value = count;\n      };\n\n      /**\n       * 🎯 處理特徵選中事件 (Handle Feature Selected Event)\n       * 當用戶在地圖上選中某個特徵時觸發\n       * @param {Object} feature - 選中的地理特徵對象\n       */\n      const handleFeatureSelected = (feature) => {\n        console.log('HomeView - handleFeatureSelected called with:', {\n          feature: feature,\n          properties: feature.properties,\n          store: dataStore,\n        });\n        // 將選中的特徵設定到 Pinia store\n        dataStore.setSelectedFeature(feature);\n        console.log('HomeView - After setting selectedFeature:', {\n          storeSelectedFeature: dataStore.selectedFeature,\n        });\n\n        // 檢查當前是桌面版還是響應式版本\n        const isDesktop = window.innerWidth >= 1200; // xl breakpoint\n\n        if (isDesktop) {\n          // 桌面版：切換到右側屬性分頁\n          activeRightTab.value = 'properties';\n        } else {\n          // 響應式版本：切換到底部屬性分頁\n          activeLowerTab.value = 'properties';\n\n          // 如果底部面板高度太小，自動調整到合適的高度\n          if (mobileBottomViewHeight.value < 30) {\n            mobileBottomViewHeight.value = 40; // 設定為 40vh，提供足夠空間顯示屬性\n          }\n        }\n      };\n\n      /**\n       * 🎯 處理高亮顯示事件 (Handle Highlight Event)\n       * 在地圖上高亮顯示指定的特徵\n       * @param {Object} highlightData - 包含 layerId 和 id 的物件\n       */\n      const handleHighlight = (highlightData) => {\n        console.log('🎯 HomeView 處理高亮顯示:', highlightData);\n\n        // 如果當前不在地圖視圖，先切換到地圖\n        if (activeUpperTab.value !== 'map') {\n          activeUpperTab.value = 'map';\n        }\n\n        // 使用 nextTick 確保地圖組件已渲染完成\n        nextTick(() => {\n          // 檢查當前是桌面版還是響應式版本\n          const isDesktop = window.innerWidth >= 1200; // xl breakpoint\n\n          if (isDesktop) {\n            // 桌面版：使用 MiddleView\n            if (middlePanelRef.value) {\n              middlePanelRef.value.highlightFeature(highlightData);\n            } else {\n              console.error('❌ 無法高亮顯示: middlePanelRef 不可用');\n            }\n          } else {\n            // 響應式版本：使用 UpperView\n            if (mobileUpperViewRef.value) {\n              mobileUpperViewRef.value.highlightFeature(highlightData);\n            } else {\n              console.error('❌ 無法高亮顯示: mobileUpperViewRef 不可用');\n            }\n          }\n        });\n      };\n\n      // 📏 響應式垂直調整狀態\n      /**\n       * 📏 計算底部面板最小高度百分比 (Calculate Minimum Bottom Panel Height Percentage)\n       * 確保底部導航按鈕始終可見\n       */\n      const calculateMinBottomHeight = () => {\n        const minNavigationHeight = 100; // px (基本高度 80px + 安全區域 20px)\n        const currentWindowHeight = window.innerHeight;\n        return Math.max(10, (minNavigationHeight / currentWindowHeight) * 100); // 最小 10vh，確保基本可用性\n      };\n\n      const mobileBottomViewHeight = ref(Math.max(40, calculateMinBottomHeight())); // vh 單位，確保不小於最小高度\n      const isVerticalDragging = ref(false);\n      const mobileMapKey = ref(0); // 強制重新渲染地圖的 key\n\n      /**\n       * 🔧 開始垂直調整大小 (Start Vertical Resize)\n       * 響應式布局中的垂直拖曳調整功能，支援滑鼠和觸控操作\n       * @param {MouseEvent|TouchEvent} event - 滑鼠或觸控事件對象\n       */\n      const startVerticalResize = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // 設定拖曳狀態\n        isVerticalDragging.value = true;\n        document.body.classList.add('my-no-select');\n\n        // 判斷是觸控還是滑鼠事件\n        const isTouch = event.type.startsWith('touch');\n        const clientY = isTouch ? event.touches[0].clientY : event.clientY;\n\n        // 記錄初始位置和狀態\n        const startY = clientY;\n        const startBottomHeight = mobileBottomViewHeight.value;\n        const windowHeight = window.innerHeight;\n\n        console.log('🔧 HomeView - 開始垂直調整', {\n          startY,\n          startBottomHeight,\n          windowHeight,\n          isTouch,\n        });\n\n        /**\n         * 🖱️ 處理移動事件（滑鼠或觸控）\n         */\n        const handleMove = (moveEvent) => {\n          moveEvent.preventDefault();\n\n          const currentY = moveEvent.type.startsWith('touch')\n            ? moveEvent.touches[0].clientY\n            : moveEvent.clientY;\n\n          const deltaY = currentY - startY;\n\n          // 計算新的底部高度百分比\n          const deltaPercent = (deltaY / windowHeight) * 100;\n          let newHeight = startBottomHeight - deltaPercent;\n\n          // 使用動態計算的最小高度，確保底部按鈕始終可見\n          const minHeightPercent = calculateMinBottomHeight();\n\n          // 限制在最小高度到100vh範圍內，確保底部按鈕始終可見\n          newHeight = Math.max(minHeightPercent, Math.min(100, newHeight));\n\n          mobileBottomViewHeight.value = Math.round(newHeight);\n        };\n\n        /**\n         * 🖱️ 處理結束事件（滑鼠放開或觸控結束）\n         */\n        const handleEnd = () => {\n          isVerticalDragging.value = false;\n          document.body.classList.remove('my-no-select');\n\n          // 移除滑鼠事件監聽器\n          document.removeEventListener('mousemove', handleMove);\n          document.removeEventListener('mouseup', handleEnd);\n\n          // 移除觸控事件監聽器\n          document.removeEventListener('touchmove', handleMove);\n          document.removeEventListener('touchend', handleEnd);\n          document.removeEventListener('touchcancel', handleEnd);\n\n          console.log('🔧 HomeView - 垂直調整結束', {\n            finalHeight: mobileBottomViewHeight.value,\n          });\n        };\n\n        // 註冊事件監聽器（同時支援滑鼠和觸控）\n        if (isTouch) {\n          document.addEventListener('touchmove', handleMove, { passive: false });\n          document.addEventListener('touchend', handleEnd);\n          document.addEventListener('touchcancel', handleEnd);\n        } else {\n          document.addEventListener('mousemove', handleMove);\n          document.addEventListener('mouseup', handleEnd);\n        }\n      };\n\n      // 🔄 監聽窗口大小變化並強制重新渲染響應式地圖\n      watch(windowHeight, () => {\n        // 延遲一點更新 key 來強制重新渲染地圖\n        setTimeout(() => {\n          mobileMapKey.value += 1;\n        }, 100);\n      });\n\n      // 🔄 監聽螢幕大小變化，在桌面版和響應式版本切換時重新渲染地圖\n      const handleScreenSizeChange = () => {\n        console.log('🔄 HomeView: 螢幕尺寸跨越斷點，重新初始化地圖');\n\n        // 強制重新渲染響應式地圖\n        mobileMapKey.value += 1;\n\n        // 延遲處理地圖尺寸重新計算，確保DOM完全更新\n        nextTick(() => {\n          setTimeout(() => {\n            const isDesktop = window.innerWidth >= 1200;\n\n            if (isDesktop) {\n              // 桌面版：處理 MiddleView 中的地圖\n              if (middlePanelRef.value) {\n                console.log('🖥️ HomeView: 切換到桌面版，處理 MiddleView 地圖');\n                // 通過 MiddleView 調用 UpperView 的地圖尺寸重新計算\n                if (middlePanelRef.value.invalidateMapSize) {\n                  middlePanelRef.value.invalidateMapSize();\n                }\n                // 觸發全域 resize 事件作為備用方案\n                setTimeout(() => {\n                  const event = new Event('resize');\n                  window.dispatchEvent(event);\n                }, 100);\n              }\n            } else {\n              // 響應式版本：處理 mobileUpperViewRef 中的地圖\n              if (mobileUpperViewRef.value) {\n                console.log('📱 HomeView: 切換到響應式版本，處理 UpperView 地圖');\n                // 直接調用 UpperView 的地圖尺寸重新計算\n                if (mobileUpperViewRef.value.invalidateMapSize) {\n                  mobileUpperViewRef.value.invalidateMapSize();\n                }\n              }\n            }\n          }, 300); // 增加延遲時間，確保佈局切換完成\n        });\n      };\n\n      // 🔄 使用 ResizeObserver 監聽螢幕尺寸變化\n      let screenSizeObserver = null;\n\n      onUnmounted(() => {\n        // 清理事件監聽器\n        window.removeEventListener('resize', handleResize);\n\n        // 清理螢幕尺寸觀察器\n        if (screenSizeObserver) {\n          screenSizeObserver.disconnect();\n        }\n      });\n\n      // 📤 返回響應式數據和函數給模板使用 (Return Reactive Data and Functions)\n      return {\n        // 📚 組件引用\n        middlePanelRef, // 中間面板引用\n\n        // 📑 分頁狀態\n        activeUpperTab, // 主要分頁狀態\n        activeBottomTab, // 底部分頁狀態\n        activeRightTab, // 右側分頁狀態\n        activeLowerTab, // 響應式下半部分頁狀態\n\n        // ⏳ 載入狀態\n        isAnyLayerLoading, // 是否有圖層正在載入\n        loadingText, // 載入文字\n        loadingProgress, // 載入進度\n        showLoadingProgress, // 是否顯示進度條\n        loadingSubText, // 載入子文字\n\n        // 🗺️ 圖層狀態\n        showTainanLayer, // 台南圖層顯示狀態\n        selectedFilter, // 選定篩選器\n\n        // 🗺️ 地圖狀態\n        zoomLevel, // 地圖縮放等級\n        currentCoords, // 當前地圖座標\n\n        // 📊 統計數據\n        activeMarkers, // 作用中標記數量\n\n        // 📏 面板尺寸（百分比系統）\n        leftViewWidth, // 左側面板寬度百分比\n        rightViewWidth, // 右側面板寬度百分比\n        leftViewWidthPx, // 左側面板像素寬度\n        rightViewWidthPx, // 右側面板像素寬度\n        mainPanelWidth, // 中間面板寬度百分比\n        mainPanelWidthPx, // 中間面板像素寬度\n\n        tableData, // 表格資料\n\n        // 📥 數據管理功能\n        resetView, // 重設視圖\n\n        // 🔧 拖拽調整功能\n        startResize, // 開始調整大小\n        startVerticalResize, // 開始垂直調整大小\n        isSidePanelDragging, // 側邊面板拖曳狀態\n        isVerticalDragging, // 垂直拖曳狀態\n        mobileBottomViewHeight, // 響應式底部面板高度\n        mobileMapKey, // 響應式地圖重新渲染 key\n        validatePanelSizes, // 驗證面板尺寸\n\n        // 🛠️ 工具函數\n        appFooterRef, // 頁腳引用\n        mobileUpperViewRef, // 響應式上半部面板引用\n        calculatedMiddleViewHeight, // 計算的中間面板高度\n        handleHighlight, // 處理高亮顯示\n\n        // 🎯 互動函數\n        updateActiveMarkers, // 更新作用中標記\n        handleFeatureSelected, // 處理特徵選中\n\n        // 📊 距離輸入 Modal 相關\n        showDistanceModal, // 是否顯示距離輸入 modal\n        distanceModalPosition, // 點擊位置的座標\n        distanceInput, // 距離輸入值\n        openDistanceModal, // 顯示距離輸入 modal\n        handleDistanceConfirm, // 處理距離輸入確認\n        handleDistanceCancel, // 處理距離輸入取消\n\n        // 📊 等時分析 Modal 相關\n        showIsochroneModal, // 是否顯示等時分析 modal\n        isochroneModalPosition, // 點擊位置的座標\n        isochroneInput, // 車程時間輸入值\n        openIsochroneModal, // 顯示等時分析 modal\n        handleIsochroneConfirm, // 處理等時分析輸入確認\n        handleIsochroneCancel, // 處理等時分析輸入取消\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 🏠 HomeView.vue - 首頁視圖組件 (Home View Component) -->\n  <!-- 提供長照資訊系統的主要用戶界面，包含響應式三面板佈局系統 -->\n  <div id=\"app\" class=\"d-flex flex-column vh-100\">\n    <!-- 📥 載入覆蓋層 (Loading Overlay) -->\n    <!-- 在資料載入時顯示，提供視覺化的載入進度回饋 -->\n    <LoadingOverlay\n      :isVisible=\"isAnyLayerLoading\"\n      :loadingText=\"loadingText\"\n      :progress=\"loadingProgress\"\n      :showProgress=\"showLoadingProgress\"\n      :subText=\"loadingSubText\"\n    />\n\n    <!-- 📊 距離輸入 Modal -->\n    <div\n      v-if=\"showDistanceModal\"\n      class=\"position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center\"\n      style=\"background-color: rgba(0, 0, 0, 0.7); z-index: 9999\"\n    >\n      <!-- 📄 距離輸入內容卡片 -->\n      <div class=\"text-center my-bgcolor-white p-4 rounded shadow\">\n        <!-- 📊 標題區域 -->\n        <div class=\"d-flex justify-content-between align-items-center mb-3\">\n          <h5 class=\"my-title-md-black mb-0\">分析範圍</h5>\n          <button\n            type=\"button\"\n            class=\"btn-close\"\n            @click=\"handleDistanceCancel\"\n            aria-label=\"Close\"\n          ></button>\n        </div>\n\n        <!-- 📝 輸入區域 -->\n        <div class=\"d-flex align-items-center gap-2 my-4\">\n          <span class=\"my-title-sm-gray text-nowrap\">半徑</span>\n          <input\n            type=\"number\"\n            class=\"form-control text-center my-font-size-md\"\n            id=\"distanceInput\"\n            v-model=\"distanceInput\"\n            placeholder=\"例如：2.5\"\n            min=\"0.1\"\n            step=\"0.1\"\n            @keyup.enter=\"handleDistanceConfirm\"\n          />\n          <span class=\"my-title-sm-gray text-nowrap\">公里</span>\n          <!-- 點擊位置 -->\n          <!--\n          <div class=\"form-text text-start mt-2\">\n            點擊位置：{{\n              distanceModalPosition.lat ? distanceModalPosition.lat.toFixed(6) : '0.000000'\n            }}, {{ distanceModalPosition.lng ? distanceModalPosition.lng.toFixed(6) : '0.000000' }}\n          </div>\n          -->\n        </div>\n\n        <!-- 📝 按鈕區域 -->\n        <div class=\"d-flex gap-2 justify-content-end\">\n          <button\n            type=\"button\"\n            class=\"btn my-font-size-sm my-btn-white\"\n            @click=\"handleDistanceCancel\"\n          >\n            <i class=\"fas fa-times me-2\"></i>\n            取消\n          </button>\n          <button\n            type=\"button\"\n            class=\"btn my-font-size-sm my-btn-blue\"\n            @click=\"handleDistanceConfirm\"\n            :disabled=\"!distanceInput || distanceInput === ''\"\n            :title=\"\n              '距離輸入: ' +\n              distanceInput +\n              ', 長度: ' +\n              distanceInput.length +\n              ', 數值: ' +\n              parseFloat(distanceInput)\n            \"\n          >\n            <i class=\"fas fa-check me-2\"></i>\n            確認\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- 📊 等時分析 Modal -->\n    <div\n      v-if=\"showIsochroneModal\"\n      class=\"position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center\"\n      style=\"background-color: rgba(0, 0, 0, 0.7); z-index: 9999\"\n    >\n      <!-- 📄 等時分析內容卡片 -->\n      <div class=\"text-center my-bgcolor-white p-4 rounded shadow\">\n        <!-- 📊 標題區域 -->\n        <div class=\"d-flex justify-content-between align-items-center mb-3\">\n          <h5 class=\"my-title-md-black mb-0\">車程時間</h5>\n          <button\n            type=\"button\"\n            class=\"btn-close\"\n            @click=\"handleIsochroneCancel\"\n            aria-label=\"Close\"\n          ></button>\n        </div>\n\n        <!-- 📝 輸入區域 -->\n        <div class=\"d-flex align-items-center gap-2 my-4\">\n          <span class=\"my-title-sm-gray text-nowrap\">時間</span>\n          <input\n            type=\"number\"\n            class=\"form-control text-center my-font-size-md\"\n            id=\"isochroneInput\"\n            v-model=\"isochroneInput\"\n            placeholder=\"例如：15\"\n            min=\"1\"\n            step=\"1\"\n            @keyup.enter=\"handleIsochroneConfirm\"\n          />\n          <span class=\"my-title-sm-gray text-nowrap\">分鐘</span>\n        </div>\n\n        <!-- 📝 按鈕區域 -->\n        <div class=\"d-flex gap-2 justify-content-end\">\n          <button\n            type=\"button\"\n            class=\"btn my-font-size-sm my-btn-white\"\n            @click=\"handleIsochroneCancel\"\n          >\n            <i class=\"fas fa-times me-2\"></i>\n            取消\n          </button>\n          <button\n            type=\"button\"\n            class=\"btn my-font-size-sm my-btn-blue\"\n            @click=\"handleIsochroneConfirm\"\n            :disabled=\"!isochroneInput || isochroneInput === ''\"\n          >\n            <i class=\"fas fa-check me-2\"></i>\n            確認\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- 📱 主要內容區域 (Main Content Area) -->\n    <!-- 使用計算高度為 footer 留出空間，避免擋住滾動條 -->\n    <div class=\"d-flex flex-column overflow-hidden\">\n      <!-- 🚀 路由視圖區域 (Router View Area) -->\n      <!-- 顯示非首頁的路由組件內容 -->\n      <div v-if=\"$route.path !== '/'\" class=\"h-100\">\n        <router-view />\n      </div>\n\n      <!-- 🏠 首頁內容區域 (Home Page Content Area) -->\n      <!-- 空間分析平台的主要功能界面，使用響應式三面板佈局 -->\n      <div v-if=\"$route.path === '/'\" class=\"h-100 d-flex flex-column overflow-hidden\">\n        <!-- 🖥️ 桌面版佈局 (Desktop Layout - xl and above) -->\n        <div class=\"d-none d-xl-flex flex-row overflow-hidden h-100\">\n          <!-- 🎛️ 左側控制面板容器 (Left Control Panel Container) -->\n          <!-- 包含圖層控制、資料載入等功能，支援動態寬度調整 -->\n          <div\n            class=\"h-100 overflow-y-auto overflow-x-hidden my-left-panel\"\n            :style=\"{ width: leftViewWidthPx }\"\n            v-if=\"leftViewWidth > 0\"\n          >\n            <LeftView />\n          </div>\n\n          <!-- 🔧 左側拖曳調整器 (Left Panel Resizer) -->\n          <!-- 提供滑鼠拖曳功能，動態調整左側面板寬度 -->\n          <div\n            class=\"my-resizer my-resizer-vertical my-resizer-left\"\n            :class=\"{ 'my-dragging': isSidePanelDragging }\"\n            @mousedown=\"startResize('left', $event)\"\n            title=\"拖曳調整左側面板寬度\"\n          ></div>\n\n          <!-- 🌟 中間主要顯示區域 (Main Display Area) -->\n          <!-- 包含地圖、儀表板、資料表格等核心功能組件 -->\n          <MiddleView\n            ref=\"middlePanelRef\"\n            class=\"d-flex flex-column overflow-hidden h-100 my-middle-panel\"\n            style=\"z-index: 1\"\n            :style=\"{ width: mainPanelWidthPx, 'min-width': '0px' }\"\n            :dynamicMainAreaHeight=\"calculatedMiddleViewHeight\"\n            :activeUpperTab=\"activeUpperTab\"\n            :activeBottomTab=\"activeBottomTab\"\n            :mainPanelWidth=\"mainPanelWidth\"\n            :showTainanLayer=\"showTainanLayer\"\n            :selectedFilter=\"selectedFilter\"\n            :zoomLevel=\"zoomLevel\"\n            :currentCoords=\"currentCoords\"\n            :activeMarkers=\"activeMarkers\"\n            :isLoadingData=\"isAnyLayerLoading\"\n            :isSidePanelDragging=\"isSidePanelDragging\"\n            @update:activeUpperTab=\"activeUpperTab = $event\"\n            @update:activeBottomTab=\"activeBottomTab = $event\"\n            @update:zoomLevel=\"zoomLevel = $event\"\n            @update:currentCoords=\"currentCoords = $event\"\n            @update:activeMarkers=\"activeMarkers = $event\"\n            @reset-view=\"resetView\"\n            @highlight-on-map=\"handleHighlight\"\n            @highlight-feature=\"handleHighlight\"\n            @feature-selected=\"handleFeatureSelected\"\n            @open-distance-modal=\"openDistanceModal\"\n            @open-isochrone-modal=\"openIsochroneModal\"\n          />\n\n          <!-- 🔧 右側拖曳調整器 (Right Panel Resizer) -->\n          <!-- 提供滑鼠拖曳功能，動態調整右側面板寬度 -->\n          <div\n            class=\"my-resizer my-resizer-vertical my-resizer-right\"\n            :class=\"{ 'my-dragging': isSidePanelDragging }\"\n            @mousedown=\"startResize('right', $event)\"\n            title=\"拖曳調整右側面板寬度\"\n          ></div>\n\n          <!-- 📈 右側控制面板容器 (Right Control Panel Container) -->\n          <!-- 包含物件屬性、分析清單等輔助功能，支援動態寬度調整 -->\n          <div\n            class=\"h-100 overflow-auto\"\n            :style=\"{ width: rightViewWidthPx }\"\n            v-if=\"rightViewWidth > 0\"\n          >\n            <RightView\n              :activeRightTab=\"activeRightTab\"\n              :activeMarkers=\"activeMarkers\"\n              :rightViewWidth=\"rightViewWidth\"\n              @update:activeRightTab=\"activeRightTab = $event\"\n              @highlight-feature=\"handleHighlight\"\n              :current-coords=\"currentCoords\"\n            />\n          </div>\n        </div>\n\n        <!-- 📱 行動版/平板版佈局 (Mobile/Tablet Layout - below xl) -->\n        <div class=\"d-flex d-xl-none flex-column overflow-hidden h-100\">\n          <!-- 🌟 上半部區域 (Upper Area) - 只包含地圖和儀表板 -->\n          <div\n            class=\"flex-shrink-0 overflow-hidden d-flex flex-column\"\n            :style=\"{ height: 100 - mobileBottomViewHeight + 'vh' }\"\n            v-if=\"mobileBottomViewHeight < 100\"\n          >\n            <UpperView\n              ref=\"mobileUpperViewRef\"\n              :key=\"mobileMapKey\"\n              :activeUpperTab=\"activeUpperTab\"\n              :mainPanelWidth=\"100\"\n              :contentHeight=\"(100 - mobileBottomViewHeight) * windowHeight * 0.01\"\n              :showTainanLayer=\"showTainanLayer\"\n              :selectedFilter=\"selectedFilter\"\n              :zoomLevel=\"zoomLevel\"\n              :isPanelDragging=\"isVerticalDragging\"\n              :activeMarkers=\"activeMarkers\"\n              @update:activeUpperTab=\"activeUpperTab = $event\"\n              @update:zoomLevel=\"zoomLevel = $event\"\n              @update:currentCoords=\"currentCoords = $event\"\n              @update:activeMarkers=\"activeMarkers = $event\"\n              @feature-selected=\"handleFeatureSelected\"\n              @open-distance-modal=\"openDistanceModal\"\n              @open-isochrone-modal=\"openIsochroneModal\"\n            />\n          </div>\n\n          <!-- 🔧 水平拖曳調整器 (Horizontal Resizer) -->\n          <div\n            class=\"my-resizer my-resizer-horizontal my-resizer-middle\"\n            :class=\"{ 'my-dragging': isVerticalDragging }\"\n            @mousedown=\"startVerticalResize\"\n            @touchstart=\"startVerticalResize\"\n            title=\"拖曳調整底部面板高度\"\n            v-if=\"mobileBottomViewHeight > 0 && mobileBottomViewHeight < 100\"\n          ></div>\n\n          <!-- 📋 下半部區域 (Lower Area) - 包含所有其他 tabs -->\n          <div\n            class=\"flex-shrink-0 overflow-hidden\"\n            :style=\"{ height: mobileBottomViewHeight + 'vh' }\"\n            v-if=\"mobileBottomViewHeight > 0\"\n          >\n            <ResponsiveLowerView\n              :activeTab=\"activeLowerTab\"\n              :activeRightTab=\"activeRightTab\"\n              :activeBottomTab=\"activeBottomTab\"\n              @update:activeTab=\"activeLowerTab = $event\"\n              @update:activeRightTab=\"activeRightTab = $event\"\n              @update:activeBottomTab=\"activeBottomTab = $event\"\n              @highlight-on-map=\"handleHighlight\"\n              @highlight-feature=\"handleHighlight\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 🦶 頁腳區域 (Footer Area) -->\n    <!-- 固定高度 footer，提供版權資訊和技術鳴謝 -->\n    <!-- 只在 xl breakpoint 以上顯示 -->\n    <footer\n      class=\"d-none d-xl-flex justify-content-between my-app-footer my-title-sm-white my-bgcolor-gray-800 p-2\"\n      ref=\"appFooterRef\"\n    >\n      <small>臺灣大學地理環境資源學系</small>\n      <small>2025</small>\n    </footer>\n  </div>\n</template>\n\n<style>\n  /**\n * 🎨 應用程式全域樣式 (Application Global Styles)\n *\n * 引入共用 CSS 並定義全域樣式，主要使用 Bootstrap 佈局系統\n */\n  @import '../assets/css/common.css';\n\n  /* 📱 HomeView 專用樣式 (HomeView Specific Styles) */\n  /* 其他通用樣式已移至 common.css 中統一管理 */\n</style>\n","import * as d3 from 'd3';\n\n// 土地利用顏色分類函數\nfunction getColorForZone(zone) {\n  const zoneLower = zone.toLowerCase();\n\n  // 住宅區系列 - 橙色系\n  if (zoneLower.includes('住') || zoneLower.includes('宅')) {\n    if (zoneLower.includes('住1') || zoneLower.includes('第一類')) return 'rgba(255, 178, 102, 0.8)';\n    if (zoneLower.includes('住2')) return 'rgba(255, 152, 51, 0.8)';\n    if (zoneLower.includes('住3')) return 'rgba(255, 128, 25, 0.8)';\n    if (zoneLower.includes('住4')) return 'rgba(230, 108, 15, 0.8)';\n    if (zoneLower.includes('住6')) return 'rgba(204, 85, 0, 0.8)';\n    if (zoneLower.includes('住商')) return 'rgba(255, 204, 153, 0.8)';\n    if (zoneLower.includes('第二類')) return 'rgba(255, 152, 51, 0.8)';\n    if (zoneLower.includes('第三類')) return 'rgba(255, 128, 25, 0.8)';\n    return 'rgba(255, 178, 102, 0.8)'; // 預設住宅區顏色\n  }\n\n  // 商業區系列 - 藍色系\n  if (zoneLower.includes('商')) {\n    if (zoneLower.includes('商1')) return 'rgba(102, 178, 255, 0.8)';\n    if (zoneLower.includes('商2')) return 'rgba(51, 152, 255, 0.8)';\n    if (zoneLower.includes('商3')) return 'rgba(25, 128, 255, 0.8)';\n    if (zoneLower.includes('商4')) return 'rgba(15, 108, 230, 0.8)';\n    if (zoneLower.includes('商特')) return 'rgba(153, 204, 255, 0.8)';\n    return 'rgba(102, 178, 255, 0.8)'; // 預設商業區顏色\n  }\n\n  // 工業區系列 - 灰色系\n  if (zoneLower.includes('工')) {\n    if (zoneLower.includes('工2')) return 'rgba(150, 150, 150, 0.8)';\n    if (zoneLower.includes('工3')) return 'rgba(120, 120, 120, 0.8)';\n    return 'rgba(180, 180, 180, 0.8)'; // 預設工業區顏色\n  }\n\n  // 綠地/公園系列 - 綠色系\n  if (zoneLower.includes('公園') || zoneLower.includes('綠地') || zoneLower.includes('風景') ||\n      zoneLower.includes('保護') || zoneLower.includes('國家公園')) {\n    if (zoneLower.includes('公園綠地')) return 'rgba(102, 204, 102, 0.8)';\n    if (zoneLower.includes('風景')) return 'rgba(76, 175, 76, 0.8)';\n    if (zoneLower.includes('保護')) return 'rgba(51, 153, 51, 0.8)';\n    if (zoneLower.includes('國家公園')) return 'rgba(25, 128, 25, 0.8)';\n    return 'rgba(102, 204, 102, 0.8)';\n  }\n\n  // 交通系列 - 深藍/紫色系\n  if (zoneLower.includes('交通') || zoneLower.includes('停車') || zoneLower.includes('鐵路') ||\n      zoneLower.includes('機場') || zoneLower.includes('高速公路')) {\n    if (zoneLower.includes('停車')) return 'rgba(153, 102, 204, 0.8)';\n    if (zoneLower.includes('交通')) return 'rgba(128, 77, 179, 0.8)';\n    if (zoneLower.includes('鐵路')) return 'rgba(102, 51, 153, 0.8)';\n    if (zoneLower.includes('機場')) return 'rgba(77, 26, 128, 0.8)';\n    if (zoneLower.includes('高速公路')) return 'rgba(51, 0, 102, 0.8)';\n    return 'rgba(128, 77, 179, 0.8)';\n  }\n\n  // 公共設施系列 - 黃色系\n  if (zoneLower.includes('學校') || zoneLower.includes('機關') || zoneLower.includes('醫院') ||\n      zoneLower.includes('市場') || zoneLower.includes('廣場')) {\n    if (zoneLower.includes('學校')) return 'rgba(255, 204, 102, 0.8)';\n    if (zoneLower.includes('機關')) return 'rgba(255, 187, 51, 0.8)';\n    if (zoneLower.includes('醫院')) return 'rgba(255, 170, 0, 0.8)';\n    if (zoneLower.includes('市場')) return 'rgba(230, 153, 0, 0.8)';\n    if (zoneLower.includes('廣場')) return 'rgba(204, 136, 0, 0.8)';\n    return 'rgba(255, 204, 102, 0.8)';\n  }\n\n  // 特殊用地系列 - 紅色系\n  if (zoneLower.includes('墓地') || zoneLower.includes('古蹟') || zoneLower.includes('娛樂')) {\n    if (zoneLower.includes('墓地')) return 'rgba(179, 77, 77, 0.8)';\n    if (zoneLower.includes('古蹟')) return 'rgba(153, 51, 51, 0.8)';\n    if (zoneLower.includes('娛樂')) return 'rgba(204, 102, 102, 0.8)';\n    return 'rgba(179, 77, 77, 0.8)';\n  }\n\n  // 水利/環保系列 - 青色系\n  if (zoneLower.includes('行水') || zoneLower.includes('堤防') || zoneLower.includes('污水') ||\n      zoneLower.includes('垃圾') || zoneLower.includes('自來水')) {\n    return 'rgba(102, 204, 204, 0.8)';\n  }\n\n  // 能源系列 - 紫紅色系\n  if (zoneLower.includes('加油') || zoneLower.includes('儲油') || zoneLower.includes('變電') || zoneLower.includes('煤氣')) {\n    return 'rgba(204, 102, 153, 0.8)';\n  }\n\n  // 農業區 - 淺綠色\n  if (zoneLower.includes('農業')) {\n    return 'rgba(153, 255, 153, 0.8)';\n  }\n\n  // 其他/未分類 - 淺灰色\n  return 'rgba(200, 200, 200, 0.8)';\n}\n\n// 社區照顧關懷據點\nexport async function loadCommunityCareCenterData(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      序號: headers.indexOf('序號'),\n      行政區: headers.indexOf('行政區'),\n      里別: headers.indexOf('里別'),\n      據點名稱: headers.indexOf('據點名稱'),\n      據點類型: headers.indexOf('據點類型'),\n      據點地址: headers.indexOf('據點地址'),\n      聯絡電話: headers.indexOf('聯絡電話'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            序號: row[headerIndices.序號],\n            行政區: row[headerIndices.行政區],\n            里別: row[headerIndices.里別],\n            據點名稱: row[headerIndices.據點名稱],\n            據點類型: row[headerIndices.據點類型],\n            據點地址: row[headerIndices.據點地址],\n            聯絡電話: row[headerIndices.聯絡電話],\n          };\n\n          const popupData = {\n            name: row[headerIndices.機構名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            據點名稱: row[headerIndices.據點名稱],\n            據點地址: row[headerIndices.據點地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.據點名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.據點地址;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 社區整體照顧服務體系C級單位\nexport async function loadCLevelUnitData(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      編號: headers.indexOf('編號'),\n      據點名稱: headers.indexOf('據點名稱'),\n      行政區: headers.indexOf('行政區'),\n      里別: headers.indexOf('里別'),\n      據點地址: headers.indexOf('據點地址'),\n      電話: headers.indexOf('電話'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            編號: row[headerIndices.編號],\n            據點名稱: row[headerIndices.據點名稱],\n            行政區: row[headerIndices.行政區],\n            里別: row[headerIndices.里別],\n            據點地址: row[headerIndices.據點地址],\n            電話: row[headerIndices.電話],\n          };\n\n          const popupData = {\n            name: row[headerIndices.據點名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            據點名稱: row[headerIndices.據點名稱],\n            據點地址: row[headerIndices.據點地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.據點名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.據點地址;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 社區照顧關懷據點辦理社區喘息服務(C+單位)\nexport async function loadRespiteCareCPlusUnitData(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      編號: headers.indexOf('編號'),\n      據點名稱: headers.indexOf('據點名稱'),\n      行政區: headers.indexOf('行政區'),\n      里別: headers.indexOf('里別'),\n      據點地址: headers.indexOf('據點地址'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            編號: row[headerIndices.編號],\n            據點名稱: row[headerIndices.據點名稱],\n            行政區: row[headerIndices.行政區],\n            里別: row[headerIndices.里別],\n            據點地址: row[headerIndices.據點地址],\n          };\n\n          const popupData = {\n            name: row[headerIndices.據點名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            據點名稱: row[headerIndices.據點名稱],\n            據點地址: row[headerIndices.據點地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.據點名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.據點地址;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 公辦民營老人福利機構\nexport async function loadPublicElderlyWelfareInstitutionData(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split('\\t'));\n\n    console.log('rows', rows);\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      機構名稱: headers.indexOf('機構名稱'),\n      受託單位: headers.indexOf('受託單位'),\n      地址: headers.indexOf('地址'),\n      聯絡電話: headers.indexOf('聯絡電話'),\n      連結網址: headers.indexOf('連結網址'),\n      收住床數: headers.indexOf('收住床數'),\n      服務對象: headers.indexOf('服務對象'),\n      收費標準: headers.indexOf('收費標準'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            機構名稱: row[headerIndices.機構名稱],\n            受託單位: row[headerIndices.受託單位],\n            地址: row[headerIndices.地址],\n            聯絡電話: row[headerIndices.聯絡電話],\n            連結網址: row[headerIndices.連結網址],\n            收住床數: row[headerIndices.收住床數],\n            服務對象: row[headerIndices.服務對象],\n            收費標準: row[headerIndices.收費標準],\n          };\n\n          const popupData = {\n            name: row[headerIndices.機構名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            機構名稱: row[headerIndices.機構名稱],\n            地址: row[headerIndices.地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.機構名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.地址;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 老人福利機構\nexport async function loadElderlyWelfareInstitutionData(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      編號: headers.indexOf('編號'),\n      屬性: headers.indexOf('屬性'),\n      機構名稱: headers.indexOf('機構名稱'),\n      區域別: headers.indexOf('區域別'),\n      地址: headers.indexOf('地址'),\n      電話: headers.indexOf('電話'),\n      收容對象: headers.indexOf('收容對象'),\n      核定床數_核定總床位數: headers.indexOf('核定床數-核定總床位數'),\n      核定床數_長照床數: headers.indexOf('核定床數-長照床數'),\n      核定床數_養護床數: headers.indexOf('核定床數-養護床數'),\n      核定床數_失智床數: headers.indexOf('核定床數-失智床數'),\n      核定床數_安養床數: headers.indexOf('核定床數-安養床數'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            編號: row[headerIndices.編號],\n            屬性: row[headerIndices.屬性],\n            機構名稱: row[headerIndices.機構名稱],\n            區域別: row[headerIndices.區域別],\n            地址: row[headerIndices.地址],\n            電話: row[headerIndices.電話],\n            收容對象: row[headerIndices.收容對象],\n            核定床數_核定總床位數: row[headerIndices.核定床數_核定總床位數],\n            核定床數_長照床數: row[headerIndices.核定床數_長照床數],\n            核定床數_養護床數: row[headerIndices.核定床數_養護床數],\n            核定床數_失智床數: row[headerIndices.核定床數_失智床數],\n            核定床數_安養床數: row[headerIndices.核定床數_安養床數],\n          };\n\n          const popupData = {\n            name: row[headerIndices.機構名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            機構名稱: row[headerIndices.機構名稱],\n            地址: row[headerIndices.地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.機構名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.地址;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 社區整合型服務中心(A單位)\nexport async function loadCommunityIntegrationServiceCenterData(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      序號: headers.indexOf('序號'),\n      單位名稱: headers.indexOf('單位名稱'),\n      行政區: headers.indexOf('行政區'),\n      服務區域: headers.indexOf('服務區域'),\n      服務地址_聯絡電話: headers.indexOf('服務地址/聯絡電話'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            序號: row[headerIndices.序號],\n            單位名稱: row[headerIndices.單位名稱],\n            行政區: row[headerIndices.行政區],\n            服務區域: row[headerIndices.服務區域],\n            服務地址_聯絡電話: row[headerIndices.服務地址_聯絡電話],\n          };\n\n          const popupData = {\n            name: row[headerIndices.單位名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            單位名稱: row[headerIndices.單位名稱],\n            服務地址_聯絡電話: row[headerIndices.服務地址_聯絡電話],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.單位名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.服務地址_聯絡電話;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 一般護理之家\nexport async function loadGeneralNursingHomeData(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      序號: headers.indexOf('序號'),\n      機構名稱: headers.indexOf('機構名稱'),\n      開放床數: headers.indexOf('開放床數'),\n      地址: headers.indexOf('地址'),\n      電話: headers.indexOf('電話'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            序號: row[headerIndices.序號],\n            機構名稱: row[headerIndices.機構名稱],\n            開放床數: row[headerIndices.開放床數],\n            地址: row[headerIndices.地址],\n            電話: row[headerIndices.電話],\n          };\n\n          const popupData = {\n            name: row[headerIndices.機構名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            機構名稱: row[headerIndices.機構名稱],\n            地址: row[headerIndices.地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.機構名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.地址;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 住宿式長照機構\nexport async function loadResidentialLongTermCareData(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      序號: headers.indexOf('序號'),\n      機構名稱: headers.indexOf('機構名稱'),\n      立案日期: headers.indexOf('立案日期'),\n      評鑑資訊: headers.indexOf('評鑑資訊'),\n      地址: headers.indexOf('地址'),\n      電話: headers.indexOf('電話'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            序號: row[headerIndices.序號],\n            機構名稱: row[headerIndices.機構名稱],\n            開放床數: row[headerIndices.開放床數],\n            立案日期: row[headerIndices.立案日期],\n            評鑑資訊: row[headerIndices.評鑑資訊],\n            地址: row[headerIndices.地址],\n            電話: row[headerIndices.電話],\n          };\n\n          const popupData = {\n            name: row[headerIndices.機構名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            機構名稱: row[headerIndices.機構名稱],\n            地址: row[headerIndices.地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.機構名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.地址;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 住宿式喘息(GA05)及住宿式短照(SC05)服務單位\nexport async function load66Data(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      序號: headers.indexOf('序號'),\n      機構名稱: headers.indexOf('機構名稱'),\n      服務區別: headers.indexOf('服務區別'),\n      郵遞區號: headers.indexOf('郵遞區號'),\n      機構服務地址: headers.indexOf('機構(服務)地址'),\n      聯絡電話: headers.indexOf('聯絡電話'),\n      聯絡窗口: headers.indexOf('聯絡窗口'),\n      住宿式短照服務: headers.indexOf('住宿式短照服務(SC05)'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            序號: row[headerIndices.序號],\n            機構名稱: row[headerIndices.機構名稱],\n            服務區別: row[headerIndices.服務區別],\n            郵遞區號: row[headerIndices.郵遞區號],\n            機構服務地址: row[headerIndices.機構服務地址],\n            聯絡電話: row[headerIndices.聯絡電話],\n            聯絡窗口: row[headerIndices.聯絡窗口],\n            住宿式短照服務: row[headerIndices.住宿式短照服務],\n          };\n\n          const popupData = {\n            name: row[headerIndices.機構名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            機構名稱: row[headerIndices.機構名稱],\n            機構服務地址: row[headerIndices.機構服務地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.機構名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.機構服務地址;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 居家式喘息(GA09)及居家式短照(SC09)服務單位\nexport async function load142Data(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      序號: headers.indexOf('序號'),\n      機構名稱: headers.indexOf('機構名稱'),\n      服務區別: headers.indexOf('服務區別'),\n      郵遞區號: headers.indexOf('郵遞區號'),\n      機構服務地址: headers.indexOf('機構(服務)地址'),\n      聯絡電話: headers.indexOf('聯絡電話'),\n      聯絡窗口: headers.indexOf('聯絡窗口'),\n      住宿式短照服務: headers.indexOf('住宿式短照服務(SC05)'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            序號: row[headerIndices.序號],\n            機構名稱: row[headerIndices.機構名稱],\n            服務區別: row[headerIndices.服務區別],\n            郵遞區號: row[headerIndices.郵遞區號],\n            機構服務地址: row[headerIndices.機構服務地址],\n            聯絡電話: row[headerIndices.聯絡電話],\n            聯絡窗口: row[headerIndices.聯絡窗口],\n            住宿式短照服務: row[headerIndices.住宿式短照服務],\n          };\n\n          const popupData = {\n            name: row[headerIndices.機構名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            機構名稱: row[headerIndices.機構名稱],\n            機構服務地址: row[headerIndices.機構服務地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.機構名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.機構服務地址;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 巷弄長照站喘息(C+)(GA07)及巷弄長照站短照(SC07)服務單位\nexport async function load25Data(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      序號: headers.indexOf('序號'),\n      機構名稱: headers.indexOf('機構名稱'),\n      服務區別: headers.indexOf('服務區別'),\n      郵遞區號: headers.indexOf('郵遞區號'),\n      機構服務地址: headers.indexOf('機構(服務)地址'),\n      聯絡電話: headers.indexOf('聯絡電話'),\n      聯絡窗口: headers.indexOf('聯絡窗口'),\n      巷弄長照站短照服務: headers.indexOf('巷弄長照站短照服務(SC07)'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            序號: row[headerIndices.序號],\n            機構名稱: row[headerIndices.機構名稱],\n            服務區別: row[headerIndices.服務區別],\n            郵遞區號: row[headerIndices.郵遞區號],\n            機構服務地址: row[headerIndices.機構服務地址],\n            聯絡電話: row[headerIndices.聯絡電話],\n            聯絡窗口: row[headerIndices.聯絡窗口],\n            巷弄長照站短照服務: row[headerIndices.巷弄長照站短照服務],\n          };\n\n          const popupData = {\n            name: row[headerIndices.機構名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            機構名稱: row[headerIndices.機構名稱],\n            機構服務地址: row[headerIndices.機構服務地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.機構名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.機構服務地址;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 社區式喘息(GA03/GA04/GA06)及社區式短照(SC03/SC04/SC06) 服務單位\nexport async function load41Data(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      序號: headers.indexOf('序號'),\n      機構名稱: headers.indexOf('機構名稱'),\n      服務區別: headers.indexOf('服務區別'),\n      郵遞區號: headers.indexOf('郵遞區號'),\n      機構服務地址: headers.indexOf('機構(服務)地址'),\n      聯絡電話: headers.indexOf('聯絡電話'),\n      聯絡窗口: headers.indexOf('聯絡窗口'),\n      GA03: headers.indexOf('GA03'),\n      GA04: headers.indexOf('GA04'),\n      GA06: headers.indexOf('GA06'),\n      SC03: headers.indexOf('SC03'),\n      SC04: headers.indexOf('SC04'),\n      SC06: headers.indexOf('SC06'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            序號: row[headerIndices.序號],\n            機構名稱: row[headerIndices.機構名稱],\n            服務區別: row[headerIndices.服務區別],\n            郵遞區號: row[headerIndices.郵遞區號],\n            機構服務地址: row[headerIndices.機構服務地址],\n            聯絡電話: row[headerIndices.聯絡電話],\n            聯絡窗口: row[headerIndices.聯絡窗口],\n            GA03: row[headerIndices.GA03],\n            GA04: row[headerIndices.GA04],\n            GA06: row[headerIndices.GA06],\n            SC03: row[headerIndices.SC03],\n            SC04: row[headerIndices.SC04],\n            SC06: row[headerIndices.SC06],\n          };\n\n          const popupData = {\n            name: row[headerIndices.機構名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            機構名稱: row[headerIndices.機構名稱],\n            機構服務地址: row[headerIndices.機構服務地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.機構名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.機構服務地址;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 醫院/診所\nexport async function loadHospitalClinicData(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      醫療院所: headers.indexOf('醫療院所'),\n      縣市: headers.indexOf('縣市'),\n      鄉鎮市區: headers.indexOf('鄉鎮市區'),\n      地址: headers.indexOf('地址'),\n      電話: headers.indexOf('電話'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            醫療院所: row[headerIndices.醫療院所],\n            縣市: row[headerIndices.縣市],\n            鄉鎮市區: row[headerIndices.鄉鎮市區],\n            地址: row[headerIndices.地址],\n            電話: row[headerIndices.電話],\n          };\n\n          const popupData = {\n            name: row[headerIndices.醫療院所],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            醫療院所: row[headerIndices.醫療院所],\n            地址: row[headerIndices.地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.醫療院所],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const district = feature.properties.propertyData.鄉鎮市區;\n      if (district) {\n        districtCounts[district] = (districtCounts[district] || 0) + 1;\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 健保特約藥局\nexport async function loadHealthcareFacilityPharmacyData(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      醫事機構代碼: headers.indexOf('醫事機構代碼'),\n      醫事機構名稱: headers.indexOf('醫事機構名稱'),\n      醫事機構種類: headers.indexOf('醫事機構種類'),\n      電話: headers.indexOf('電話'),\n      地址: headers.indexOf('地址'),\n      分區業務組: headers.indexOf('分區業務組'),\n      特約類別: headers.indexOf('特約類別'),\n      服務項目: headers.indexOf('服務項目'),\n      診療科別: headers.indexOf('診療科別'),\n      終止合約或歇業日期: headers.indexOf('終止合約或歇業日期'),\n      固定看診時段: headers.indexOf('固定看診時段'),\n      備註: headers.indexOf('備註'),\n      縣市別代碼: headers.indexOf('縣市別代碼'),\n      合約起日: headers.indexOf('合約起日'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            醫事機構代碼: row[headerIndices.醫事機構代碼],\n            醫事機構名稱: row[headerIndices.醫事機構名稱],\n            醫事機構種類: row[headerIndices.醫事機構種類],\n            電話: row[headerIndices.電話],\n            地址: row[headerIndices.地址],\n            分區業務組: row[headerIndices.分區業務組],\n            特約類別: row[headerIndices.特約類別],\n            服務項目: row[headerIndices.服務項目],\n            診療科別: row[headerIndices.診療科別],\n            終止合約或歇業日期: row[headerIndices.終止合約或歇業日期],\n            固定看診時段: row[headerIndices.固定看診時段],\n            備註: row[headerIndices.備註],\n            縣市別代碼: row[headerIndices.縣市別代碼],\n            合約起日: row[headerIndices.合約起日],\n          };\n\n          const popupData = {\n            name: row[headerIndices.醫事機構名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            醫事機構名稱: row[headerIndices.醫事機構名稱],\n            地址: row[headerIndices.地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.醫事機構名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.地址;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 三段年齡組性別人口統計\nexport async function loadPopulation3LevelsGeoJson(layer) {\n  try {\n    const layerId = layer.layerId;\n    const fieldName = layer.fieldName; // fieldName 現在代表「人口數」\n\n    const filePath = `/long-term-care-web/data/geojson/${layer.fileName}`;\n\n    // 省略 console.log(a)\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const geoJsonData = await response.json();\n\n    // ▼▼▼▼▼ 步驟 1: 預先處理數據，計算面積與人口密度 ▼▼▼▼▼\n    // 我們先遍歷一次所有 features，把面積和人口密度（作為新的 value）加上去\n    geoJsonData.features.forEach(feature => {\n      const properties = feature.properties;\n\n      // 計算面積 (km²)\n      const earthRadiusKm = 6371;\n      const areaInSqKm = d3.geoArea(feature) * Math.pow(earthRadiusKm, 2);\n      properties.area = areaInSqKm;\n\n      // 取得人口數\n      const population = parseFloat(properties[fieldName]);\n\n      // 計算人口密度 (人/km²)\n      // 避免除以 0 或無效數字\n      let density = 0;\n      if (areaInSqKm > 0 && !isNaN(population) && population > 0) {\n        density = population / areaInSqKm;\n      }\n\n      // 將 feature 的核心 value 設為人口密度\n      properties.value = density;\n    });\n    // ▲▲▲▲▲ 步驟 1: 結束 ▲▲▲▲▲\n\n\n    // ▼▼▼▼▼ 步驟 2: 根據「人口密度」計算顏色範圍 ▼▼▼▼▼\n    let minValue = 0;\n    let maxValue = 0;\n\n    // 從剛剛算好的人口密度 (feature.properties.value) 中取得最大最小值\n    const densityValues = geoJsonData.features\n      .map((f) => f.properties.value)\n      .filter((v) => !isNaN(v) && isFinite(v)); // isFinite 可以過濾掉 Infinity\n\n    if (densityValues.length > 0) {\n        minValue = d3.min(densityValues);\n        maxValue = d3.max(densityValues);\n    }\n    // ▲▲▲▲▲ 步驟 2: 結束 ▲▲▲▲▲\n\n\n    // ----------------------------\n    // 建立顏色比例尺 (這部分邏輯不變，但 domain 的依據已變為密度)\n    const numColors = 5;\n    const colors = d3.range(numColors).map(i => d3.interpolateBlues(i / (numColors - 1)));\n\n    const step = (maxValue - minValue) / numColors;\n    const thresholds = d3.range(1, numColors).map((i) => {\n      return Math.round(minValue + i * step);\n    });\n\n    const colorScale = d3\n      .scaleThreshold()\n      .domain(thresholds)\n      .range(colors);\n\n    // ----------------------------\n\n    // ▼▼▼▼▼ 步驟 3: 賦予顏色並整理最終輸出資料 ▼▼▼▼▼\n    geoJsonData.features.forEach((feature, index) => {\n      const properties = feature.properties;\n\n      properties.id = index + 1;\n      properties.layerId = layerId;\n      properties.layerName = layer.layerName;\n      properties.name = `${properties.COUNTY}${properties.TOWN}${properties.VILLAGE}`;\n\n      // 注意：properties.value 已經是人口密度了，這裡不需要再計算\n\n      properties.color = 'var(--my-color-white)';\n      properties.fillColor = colorScale(properties.value);\n\n      const propertyData = {\n        里名: properties.name,\n        人口密度: `${properties.value.toFixed(1)} 人/km²`,\n        [fieldName]: properties[fieldName], // 原始人口數\n        '面積(km²)': properties.area.toFixed(3),\n        ...properties, // 包含所有原始屬性\n      };\n\n      const popupData = {\n        里名: properties.name,\n        人口密度: `${properties.value.toFixed(1)} 人/km²`,\n      };\n\n      const tableData = {\n        '#': properties.id,\n        color: colorScale(properties.value),\n        里名: properties.name,\n        [fieldName]: properties[fieldName], // 顯示原始人口數\n        '人口密度 (人/km²)': properties.value.toFixed(1), // 新增密度欄位\n      };\n\n      properties.propertyData = propertyData;\n      properties.popupData = popupData;\n      properties.tableData = tableData;\n    });\n    // ▲▲▲▲▲ 步驟 3: 結束 ▲▲▲▲▲\n\n    // ----------------------------\n\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n    };\n\n    // ▼▼▼▼▼ 步驟 4: 更新圖例以反映人口密度 ▼▼▼▼▼\n    const legendData = colors.map((color, index) => {\n      let label = '';\n      let extent = [];\n      const format = (d) => Math.round(d).toLocaleString(); // 讓數字加上千分位，更易讀\n\n      if (index === 0) {\n        const upperBound = thresholds[0];\n        label = `< ${format(upperBound)}`;\n        extent = [null, upperBound];\n      } else if (index === colors.length - 1) {\n        const lowerBound = thresholds[thresholds.length - 1];\n        label = `> ${format(lowerBound)}`;\n        extent = [lowerBound, null];\n      } else {\n        const lowerBound = thresholds[index - 1];\n        const upperBound = thresholds[index];\n        label = `${format(lowerBound)} - ${format(upperBound)}`;\n        extent = [lowerBound, upperBound];\n      }\n\n      return {\n        color: color,\n        // 在圖例標籤後方加上單位\n        label: `${label} (人/km²)`,\n        extent: extent,\n      };\n    });\n    // ▲▲▲▲▲ 步驟 4: 結束 ▲▲▲▲▲\n\n    return {\n      geoJsonData,\n      tableData,\n      summaryData,\n      legendData,\n    };\n  } catch (error) {\n    console.error('❌ GeoJSON 數據載入或處理失敗:', error);\n    throw error;\n  }\n}\n\n// 綜稅綜合所得總額\nexport async function loadIncomeGeoJson(layer) {\n  try {\n    const layerId = layer.layerId;\n    const fieldName = layer.fieldName;\n\n    const filePath = `/long-term-care-web/data/geojson/${layer.fileName}`;\n    const a = fieldName || null;\n    console.log(a);\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const geoJsonData = await response.json();\n\n    // ----------------------------\n\n    let minValue = 0;\n    let maxValue = 0;\n\n    const values = geoJsonData.features\n      .map((f) => parseFloat(f.properties[fieldName]))\n      .filter((v) => !isNaN(v));\n\n    minValue = d3.min(values);\n    maxValue = d3.max(values);\n\n    // ----------------------------\n\n    // 建立一個使用內建「紅白藍」色帶的發散型比例尺\n    // const colorScale = d3\n    //   .scaleSequential()\n    //   .domain([minValue, maxValue]) // 輸入範圍：[最小值, 最大值]\n    //   .interpolator(d3.interpolateYlGnBu); // [關鍵] 直接使用 D3 內建的顏色產生器\n\n    const colorScale = d3\n      .scaleSequential()\n      .domain([minValue, maxValue]) // 輸入範圍：[最小值, 最大值]\n      // [關鍵] 使用 D3 內建的藍色插值函數\n      .interpolator(d3.interpolateBlues);\n\n    // ----------------------------\n\n    geoJsonData.features.forEach((feature, index) => {\n      feature.properties.id = index + 1;\n      feature.properties.layerId = layerId;\n      feature.properties.layerName = layer.layerName;\n      feature.properties.name = feature.properties.FULL;\n      feature.properties.value = parseFloat(feature.properties[fieldName]);\n      feature.properties.color = 'var(--my-color-white)';\n      feature.properties.fillColor = colorScale(feature.properties.value);\n\n      const propertyData = {\n        里名: feature.properties.name,\n        ...feature.properties,\n      };\n\n      const popupData = {\n        里名: feature.properties.name,\n      };\n\n      const tableData = {\n        '#': feature.properties.id,\n        color: colorScale(feature.properties.value),\n        里名: feature.properties.name,\n        [fieldName]: feature.properties[fieldName],\n      };\n\n      feature.properties.propertyData = propertyData;\n      feature.properties.popupData = popupData;\n      feature.properties.tableData = tableData;\n    });\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n    };\n\n    // 為 scaleSequential 生成圖例\n    const numLegendSteps = 5;\n    const legendData = d3.range(numLegendSteps).map((i) => {\n      const t = i / (numLegendSteps - 1); // 0 到 1 的比例\n      const value = minValue + t * (maxValue - minValue); // 對應的數值\n      const color = colorScale(value); // 對應的顏色\n\n      let label = '';\n      if (i === 0) {\n        label = `${Math.round(minValue)}`;\n      } else if (i === numLegendSteps - 1) {\n        label = `${Math.round(maxValue)}`;\n      } else {\n        label = `${Math.round(value)}`;\n      }\n\n      return {\n        color: color,\n        label: label,\n        extent: [value, value], // 對於連續比例尺，每個點代表一個值\n      };\n    });\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n      legendData, // 包含圖例資訊\n    };\n  } catch (error) {\n    console.error('❌ GeoJSON 數據載入或處理失敗:', error);\n    throw error;\n  }\n}\n\n// 4大超商\nexport async function loadConvenienceStoreData(layer) {\n  try {\n    const layerId = layer.layerId;\n    const colorName = layer.colorName;\n\n    const filePath = `/long-term-care-web/data/csv/${layer.fileName}`;\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const csvText = await response.text();\n\n    // 將完整的 CSV 文字內容，首先按換行符號('\\n')分割成陣列的每一行\n    // 然後對每一行再用逗號(',')分割成欄位，最終形成一個二維陣列\n    const rows = csvText.split('\\n').map((row) => row.split(','));\n\n    // 取得二維陣列的第一行(rows[0])作為標頭，並對每個標頭使用 trim() 去除前後可能存在的空白字元\n    const headers = rows[0].map((h) => h.trim());\n\n    const headerIndices = {\n      公司統一編號: headers.indexOf('公司統一編號'),\n      公司名稱: headers.indexOf('公司名稱'),\n      分公司統一編號: headers.indexOf('分公司統一編號'),\n      分公司名稱: headers.indexOf('分公司名稱'),\n      分公司地址: headers.indexOf('分公司地址'),\n      分公司狀態: headers.indexOf('分公司狀態'),\n      分公司核准設立日期: headers.indexOf('分公司核准設立日期'),\n      分公司最後核准變更日期: headers.indexOf('分公司最後核准變更日期'),\n      lat: headers.indexOf('lat'),\n      lon: headers.indexOf('lon'),\n    };\n\n    const geoJsonData = {\n      type: 'FeatureCollection',\n      features: rows\n        .slice(1) // 使用 .slice(1) 方法，從索引 1 開始提取所有元素，即跳過第一行(標頭)\n        .map((row, index) => {\n          const lat = parseFloat(row[headerIndices.lat]);\n          const lon = parseFloat(row[headerIndices.lon]);\n\n          const id = index + 1;\n\n          if (isNaN(lat) || isNaN(lon)) {\n            console.warn(`第 ${id} 行 ${row[headerIndices.address]} 的座標無效:`, {\n              lat: row[headerIndices.lat],\n              lon: row[headerIndices.lon],\n            });\n            return null;\n          }\n\n          const propertyData = {\n            公司統一編號: row[headerIndices.公司統一編號],\n            公司名稱: row[headerIndices.公司名稱],\n            分公司統一編號: row[headerIndices.分公司統一編號],\n            分公司名稱: row[headerIndices.分公司名稱],\n            分公司地址: row[headerIndices.分公司地址],\n            分公司狀態: row[headerIndices.分公司狀態],\n            分公司核准設立日期: row[headerIndices.分公司核准設立日期],\n          };\n\n          const popupData = {\n            name: row[headerIndices.分公司名稱],\n          };\n\n          const tableData = {\n            '#': id,\n            color: getComputedStyle(document.documentElement)\n              .getPropertyValue(`--my-color-${colorName}`)\n              .trim(),\n            公司名稱: row[headerIndices.公司名稱],\n            分公司名稱: row[headerIndices.分公司名稱],\n            分公司地址: row[headerIndices.分公司地址],\n          };\n\n          return {\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [lon, lat],\n            },\n            properties: {\n              id: id,\n              layerId: layerId,\n              layerName: layer.layerName,\n              name: row[headerIndices.公司名稱],\n              fillColor: getComputedStyle(document.documentElement)\n                .getPropertyValue(`--my-color-${colorName}`)\n                .trim(),\n              propertyData: propertyData,\n              popupData: popupData,\n              tableData: tableData,\n            },\n          };\n        })\n        .filter((feature) => feature !== null), // 使用 .filter() 方法過濾掉陣列中所有為 null 的項目 (即那些因座標無效而返回 null 的資料)\n    };\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 統計各行政區的數量 - 從地址中提取行政區\n    const districtCounts = {};\n    geoJsonData.features.forEach(feature => {\n      const address = feature.properties.propertyData.分公司地址;\n      if (address) {\n        // 從地址中提取行政區（假設地址格式為：臺北市XX區...）\n        const districtMatch = address.match(/臺北市([^市]*?區)/);\n        if (districtMatch) {\n          const district = districtMatch[1];\n          districtCounts[district] = (districtCounts[district] || 0) + 1;\n        }\n      }\n    });\n\n    // 轉換為陣列格式並排序\n    const districtCount = Object.entries(districtCounts)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count); // 按數量降序排列\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n      districtCount: districtCount,\n    };\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n    };\n  } catch (error) {\n    console.error('❌ 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n// 捷運站點\nexport async function loadMRTStationGeoJson(layer) {\n  try {\n    const layerId = layer.layerId;\n    const fieldName = layer.fieldName;\n\n    const filePath = `/long-term-care-web/data/geojson/${layer.fileName}`;\n    const a = fieldName || null;\n    console.log(a);\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const geoJsonData = await response.json();\n\n    // ----------------------------\n\n    geoJsonData.features.forEach((feature, index) => {\n      feature.properties.id = index + 1;\n      feature.properties.layerId = layerId;\n      feature.properties.layerName = layer.layerName;\n      feature.properties.name = feature.properties.NAME;\n      feature.properties.color = 'var(--my-color-white)';\n      feature.properties.fillColor = null;\n\n      const propertyData = {\n        站名: feature.properties.name,\n        ...feature.properties,\n      };\n\n      const popupData = {\n        站名: feature.properties.name,\n      };\n\n      const tableData = {\n        '#': feature.properties.id,\n        color: layer.color,\n        站名: feature.properties.name,\n      };\n\n      feature.properties.propertyData = propertyData;\n      feature.properties.popupData = popupData;\n      feature.properties.tableData = tableData;\n    });\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n    };\n\n    const legendData = null;\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n      legendData, // 包含圖例資訊\n    };\n  } catch (error) {\n    console.error('❌ GeoJSON 數據載入或處理失敗:', error);\n    throw error;\n  }\n}\n\n// 公車站點\nexport async function loadBusStopGeoJson(layer) {\n  try {\n    const layerId = layer.layerId;\n    const fieldName = layer.fieldName;\n\n    const filePath = `/long-term-care-web/data/geojson/${layer.fileName}`;\n    const a = fieldName || null;\n    console.log(a);\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const geoJsonData = await response.json();\n\n    // ----------------------------\n\n    geoJsonData.features.forEach((feature, index) => {\n      feature.properties.id = index + 1;\n      feature.properties.layerId = layerId;\n      feature.properties.layerName = layer.layerName;\n      feature.properties.name = feature.properties.BSM_CHINES;\n      feature.properties.color = 'var(--my-color-white)';\n      feature.properties.fillColor = null;\n\n      const propertyData = {\n        站名: feature.properties.name,\n        ...feature.properties,\n      };\n\n      const popupData = {\n        站名: feature.properties.name,\n      };\n\n      const tableData = {\n        '#': feature.properties.id,\n        color: layer.color,\n        站名: feature.properties.name,\n      };\n\n      feature.properties.propertyData = propertyData;\n      feature.properties.popupData = popupData;\n      feature.properties.tableData = tableData;\n    });\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n    };\n\n    const legendData = null;\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n      legendData, // 包含圖例資訊\n    };\n  } catch (error) {\n    console.error('❌ GeoJSON 數據載入或處理失敗:', error);\n    throw error;\n  }\n}\n\n// 土地利用\nexport async function loadLanduseGeoJson(layer) {\n  try {\n    const layerId = layer.layerId;\n    const fieldName = layer.fieldName;\n\n    const filePath = `/long-term-care-web/data/geojson/${layer.fileName}`;\n    const a = fieldName || null;\n    console.log(a);\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const geoJsonData = await response.json();\n\n        // ----------------------------\n\n    // 取得所有不重複且排序後的 NEWLAYER 值\n    const sortedUniqueValues = Array.from(\n      new Set(geoJsonData.features.map(f => f.properties.NEWLAYER))\n    ).sort((a, b) => Number(a) - Number(b));\n\n    // ----------------------------\n\n\n    geoJsonData.features.forEach((feature, index) => {\n      feature.properties.id = index + 1;\n      feature.properties.layerId = layerId;\n      feature.properties.layerName = layer.layerName;\n      feature.properties.name = feature.properties.ZONE;\n\n      // 根據土地利用類型分配顏色\n      const color = getColorForZone(feature.properties.ZONE);\n      feature.properties.color = color;\n      feature.properties.fillColor = color;\n\n      const propertyData = {\n        NEWLAYER: feature.properties.NEWLAYER,\n        ...feature.properties,\n      };\n\n      const popupData = {\n        NEWLAYER: feature.properties.NEWLAYER,\n      };\n\n      const tableData = {\n        '#': feature.properties.id,\n        color: color,\n        name: feature.properties.name,\n        ZONE: feature.properties.ZONE,\n        NEWLAYER: feature.properties.NEWLAYER,\n      };\n\n      feature.properties.propertyData = propertyData;\n      feature.properties.popupData = popupData;\n      feature.properties.tableData = tableData;\n    });\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n    };\n\n    // 創建 NEWLAYER 到 ZONE 名稱的映射\n    const layerToZoneMap = {};\n    geoJsonData.features.forEach(feature => {\n      const layer = feature.properties.NEWLAYER;\n      const zone = feature.properties.ZONE;\n      if (!layerToZoneMap[layer]) {\n        layerToZoneMap[layer] = zone;\n      }\n    });\n\n        // 創建圖例數據\n    const legendData = sortedUniqueValues.map((value) => {\n      const zoneName = layerToZoneMap[value] || value; // 如果找不到對應的 ZONE，就使用 NEWLAYER 值\n      const color = getColorForZone(zoneName);\n\n      return {\n        color: color,\n        label: `${zoneName} (${value})`,\n        extent: [value, value], // 對於分類數據，每個值對應一個範圍\n      };\n    });\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n      legendData, // 包含圖例資訊\n    };\n  } catch (error) {\n    console.error('❌ GeoJSON 數據載入或處理失敗:', error);\n    throw error;\n  }\n}\n\n// 臺北市區界圖\nexport async function loadTaipeiDistrictGeoJson(layer) {\n  try {\n    const layerId = layer.layerId;\n    const fieldName = layer.fieldName;\n\n    const filePath = `/long-term-care-web/data/geojson/${layer.fileName}`;\n    const a = fieldName || null;\n    console.log(a);\n\n    const response = await fetch(filePath);\n\n    if (!response.ok) {\n      console.error('HTTP 錯誤:', {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      });\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const geoJsonData = await response.json();\n\n    // ----------------------------\n\n    geoJsonData.features.forEach((feature, index) => {\n      feature.properties.id = index + 1;\n      feature.properties.layerId = layerId;\n      feature.properties.layerName = layer.layerName;\n      feature.properties.name = feature.properties.PTNAME;\n      feature.properties.color = 'var(--my-color-red)';\n      feature.properties.fillColor = null;\n\n      const propertyData = {\n        區名: feature.properties.name,\n        ...feature.properties,\n      };\n\n      const popupData = {\n        區名: feature.properties.name,\n      };\n\n      const tableData = {\n        '#': feature.properties.id,\n        color: layer.color,\n        區名: feature.properties.name,\n      };\n\n      feature.properties.propertyData = propertyData;\n      feature.properties.popupData = popupData;\n      feature.properties.tableData = tableData;\n    });\n\n    // 包含為表格量身打造的數據陣列\n    const tableData = geoJsonData.features.map((feature) => ({\n      ...feature.properties.tableData,\n    }));\n\n    // 包含摘要資訊\n    const summaryData = {\n      totalCount: geoJsonData.features.length,\n    };\n\n    const legendData = null;\n\n    return {\n      geoJsonData, // 包含原始且完整的 GeoJSON 數據\n      tableData, // 包含為表格量身打造的數據陣列\n      summaryData, // 包含摘要資訊\n      legendData, // 包含圖例資訊\n    };\n  } catch (error) {\n    console.error('❌ GeoJSON 數據載入或處理失敗:', error);\n    throw error;\n  }\n}\n","import { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\n\nimport {\n  loadCommunityCareCenterData,\n  loadCLevelUnitData,\n  loadRespiteCareCPlusUnitData,\n  //loadPublicElderlyWelfareInstitutionData,\n  loadElderlyWelfareInstitutionData,\n  loadCommunityIntegrationServiceCenterData,\n  loadGeneralNursingHomeData,\n  loadResidentialLongTermCareData,\n  load66Data,\n  load142Data,\n  load25Data,\n  load41Data,\n  loadHospitalClinicData,\n  loadHealthcareFacilityPharmacyData,\n  loadPopulation3LevelsGeoJson,\n  loadIncomeGeoJson,\n  loadConvenienceStoreData,\n  loadMRTStationGeoJson,\n  loadBusStopGeoJson,\n  loadLanduseGeoJson,\n  loadTaipeiDistrictGeoJson,\n} from '../utils/dataProcessor.js';\n\n// 主要數據存儲定義 (Main Data Store Definition)\nexport const useDataStore = defineStore(\n  'data',\n  () => {\n    const layers = ref([\n      {\n        groupName: '居家式長照機構',\n        groupLayers: [\n          {\n            layerId: '居家服務機構',\n            layerName: '居家服務機構',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '居家護理所',\n            layerName: '居家護理所',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '居家物理治療所',\n            layerName: '居家物理治療所',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '居家職能治療所',\n            layerName: '居家職能治療所',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '居家呼吸照護所',\n            layerName: '居家呼吸照護所',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '居家語言治療所',\n            layerName: '居家語言治療所',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '心理諮商所',\n            layerName: '心理諮商所',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '居家式喘息(GA09)及居家式短照(SC09)服務單位',\n            layerName: '居家式喘息(GA09)及居家式短照(SC09)服務單位',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'red',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: load142Data,\n            fileName:\n              '台北市政府衛生局/臺北市政府衛生局長照2.0居家式喘息(GA09)及居家式短照(SC09)服務單位一覽表_142_coord.csv',\n            fieldName: null,\n          },\n        ],\n      },\n      {\n        groupName: '社區式長照機構 - 日間照顧',\n        groupLayers: [\n          {\n            layerId: '小規模多機能服務',\n            layerName: '小規模多機能服務',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '團體家屋',\n            layerName: '團體家屋',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '家庭托顧',\n            layerName: '家庭托顧',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '交通接送',\n            layerName: '交通接送',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n        ],\n      },\n      {\n        groupName: '社區式長照機構 - 社區據點',\n        groupLayers: [\n          {\n            layerId: '社區照顧關懷據點',\n            layerName: '社區照顧關懷據點',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'green',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadCommunityCareCenterData,\n            fileName: '台北市政府社會局/114年度臺北市社區照顧關懷據點㇐覽表_coord.csv',\n            fieldName: null,\n          },\n          {\n            layerId: '社區照顧關懷據點辦理社區喘息服務(C+單位)',\n            layerName: '社區照顧關懷據點辦理社區喘息服務(C+單位)',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'red',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadRespiteCareCPlusUnitData,\n            fileName:\n              '臺北市政府社會局114年度社區照顧關懷據點辦理社區喘息服務(C+單位)一覽表_coord.csv',\n            fieldName: null,\n          },\n          {\n            layerId: '失智社區服務據點',\n            layerName: '失智社區服務據點',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '家庭照顧者支持服務據點',\n            layerName: '家庭照顧者支持服務據點',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '社區照顧關懷據點暨C級巷弄長照站',\n            layerName: '社區照顧關懷據點暨C級巷弄長照站',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: null,\n            fieldName: null,\n          },\n          {\n            layerId: '醫事C級巷弄長照站',\n            layerName: '醫事C級巷弄長照站',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '社區整體照顧服務體系C級單位',\n            layerName: '社區整體照顧服務體系C級單位',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'red',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadCLevelUnitData,\n            fileName: '台北市政府社會局/114年臺北市社區整體照顧服務體系C級單位一覽表_coord.csv',\n            fieldName: null,\n          },\n          {\n            layerId: '巷弄長照站喘息(C+)(GA07)及巷弄長照站短照(SC07)服務單位',\n            layerName: '巷弄長照站喘息(C+)(GA07)及巷弄長照站短照(SC07)服務單位',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'red',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: load25Data,\n            fileName:\n              '台北市政府衛生局/臺北市政府衛生局長照2.0巷弄長照站喘息(C+)(GA07)及巷弄長照站短照(SC07)服務 單位一覽表_25_coord.csv',\n            fieldName: null,\n          },\n          {\n            layerId: '社區式喘息(GA03/GA04/GA06)及社區式短照(SC03/SC04/SC06)服務單位',\n            layerName: '社區式喘息(GA03/GA04/GA06)及社區式短照(SC03/SC04/SC06)服務單位',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'red',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: load41Data,\n            fileName:\n              '台北市政府衛生局/臺北市政府衛生局長照2.0社區式喘息(GA03_GA04_GA06)及社區式短照(SC03_SC04_SC06)服務單位一覽表_41_coord.csv',\n            fieldName: null,\n          },\n          {\n            layerId: '原住民族文化健康站',\n            layerName: '原住民族文化健康站',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '社區整合型服務中心(A單位)',\n            layerName: '社區整合型服務中心(A單位)',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'red',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadCommunityIntegrationServiceCenterData,\n            fileName: '台北市政府衛生局/臺北市社區整合型服務中心(A單位)一覽表_coord.csv',\n            fieldName: null,\n          },\n        ],\n      },\n      {\n        groupName: '機構式長照機構 - 老人福利機構',\n        groupLayers: [\n          {\n            layerId: '安養機構',\n            layerName: '安養機構',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'green',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadElderlyWelfareInstitutionData,\n            fileName: '台北市政府社會局/臺北市老人福利機構名冊1140201_coord_安養.csv',\n            fieldName: null,\n          },\n          {\n            layerId: '養護機構',\n            layerName: '養護機構',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'green',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadElderlyWelfareInstitutionData,\n            fileName: '台北市政府社會局/臺北市老人福利機構名冊1140201_coord_養護.csv',\n            fieldName: null,\n          },\n          {\n            layerId: '長期照顧機構',\n            layerName: '長期照顧機構',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'green',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadElderlyWelfareInstitutionData,\n            fileName: '台北市政府社會局/臺北市老人福利機構名冊1140201_coord_長照.csv',\n            fieldName: null,\n          },\n          {\n            layerId: '失智照顧機構',\n            layerName: '失智照顧機構',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          /*\n          {\n            layerId: '公辦民營老人福利機構',\n            layerName: '公辦民營老人福利機構',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'red',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadPublicElderlyWelfareInstitutionData,\n            fileName: '臺北市公辦民營老人福利機構一覽表_coord.csv',\n            fieldName: null,\n          },\n          */\n        ],\n      },\n      {\n        groupName: '機構式長照機構 - 護理之家',\n        groupLayers: [\n          {\n            layerId: '一般護理之家',\n            layerName: '一般護理之家',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'green',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadGeneralNursingHomeData,\n            fileName: '台北市政府衛生局/臺北市立案一般護理之家一覽表_coord.csv',\n            fieldName: null,\n          },\n        ],\n      },\n      {\n        groupName: '機構式長照機構 - 法人長照機構',\n        groupLayers: [\n          {\n            layerId: '社團法人長照機構',\n            layerName: '社團法人長照機構',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '財團法人長照機構',\n            layerName: '財團法人長照機構',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'gray-400',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: null,\n            fileName: '',\n            fieldName: null,\n          },\n          {\n            layerId: '住宿式長照機構',\n            layerName: '住宿式長照機構',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'red',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadResidentialLongTermCareData,\n            fileName: '台北市政府衛生局/臺北市立案住宿式長照機構一覽表_coord.csv',\n            fieldName: null,\n          },\n          {\n            layerId: '住宿式喘息(GA05)及住宿式短照(SC05)服務單位',\n            layerName: '住宿式喘息(GA05)及住宿式短照(SC05)服務單位',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'red',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: load66Data,\n            fileName:\n              '台北市政府衛生局/臺北市政府衛生局長照2.0住宿式喘息(GA05)及住宿式短照(SC05)服務單位一覽表_66_coord.csv',\n            fieldName: null,\n          },\n        ],\n      },\n      {\n        groupName: '基礎設施',\n        groupLayers: [\n          {\n            layerId: '醫院',\n            layerName: '醫院',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'lime',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadHospitalClinicData,\n            fileName: '112年12月醫療院所分布圖_全國_醫院_coord.csv',\n            fieldName: null,\n          },\n          {\n            layerId: '診所',\n            layerName: '診所',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'lime',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadHospitalClinicData,\n            fileName: '112年12月醫療院所分布圖_全國_診所_coord.csv',\n            fieldName: null,\n          },\n          {\n            layerId: '健保特約藥局',\n            layerName: '健保特約藥局',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: 'circle',\n            colorName: 'green',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadHealthcareFacilityPharmacyData,\n            fileName: '健保特約醫事機構-藥局_coord.csv',\n            fieldName: null,\n          },\n          {\n            layerId: '四大超商',\n            layerName: '四大超商',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: null,\n            colorName: 'cyan',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadConvenienceStoreData,\n            fileName: '全國5大超商資料集_coord.csv',\n            fieldName: null,\n          },\n          {\n            layerId: '捷運站點',\n            layerName: '捷運站點',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: null,\n            colorName: 'blue',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadMRTStationGeoJson,\n            fileName: 'TpeMrtStations_TWD97_FIDCODE.geojson',\n            fieldName: null,\n          },\n          {\n            layerId: '公車站點',\n            layerName: '公車站點',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: null,\n            colorName: 'blue',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadBusStopGeoJson,\n            fileName: 'busstop.geojson',\n            fieldName: null,\n          },\n        ],\n      },\n      {\n        groupName: '地理統計資料',\n        groupLayers: [\n          {\n            layerId: '人口統計-14歲以下',\n            layerName: '人口統計-14歲以下',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'polygon',\n            shape: null,\n            colorName: 'deeppurple',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadPopulation3LevelsGeoJson,\n            fileName: '113年12月行政區三段年齡組性別人口統計_村里_WGS84_臺北市.geojson',\n            fieldName: 'A0A14_CNT',\n          },\n          {\n            layerId: '人口統計-15~64歲',\n            layerName: '人口統計-15~64歲',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'polygon',\n            shape: null,\n            colorName: 'deeppurple',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadPopulation3LevelsGeoJson,\n            fileName: '113年12月行政區三段年齡組性別人口統計_村里_WGS84_臺北市.geojson',\n            fieldName: 'A15A64_CNT',\n          },\n          {\n            layerId: '人口統計-65歲以上',\n            layerName: '人口統計-65歲以上',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'polygon',\n            shape: null,\n            colorName: 'deeppurple',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadPopulation3LevelsGeoJson,\n            fileName: '113年12月行政區三段年齡組性別人口統計_村里_WGS84_臺北市.geojson',\n            fieldName: 'A65UP_CNT',\n          },\n          {\n            layerId: '綜稅綜合所得總額-中位數',\n            layerName: '綜稅綜合所得總額-中位數',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'polygon',\n            shape: null,\n            colorName: 'purple',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadIncomeGeoJson,\n            fileName: '臺北市_村里_綜稅綜合所得總額.geojson',\n            fieldName: '中位數',\n          },\n          {\n            layerId: '綜稅綜合所得總額-平均數',\n            layerName: '綜稅綜合所得總額-平均數',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'polygon',\n            shape: null,\n            colorName: 'purple',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadIncomeGeoJson,\n            fileName: '臺北市_村里_綜稅綜合所得總額.geojson',\n            fieldName: '平均數',\n          },\n        ],\n      },\n      {\n        groupName: '基礎地理資料',\n        groupLayers: [\n          {\n            layerId: '土地利用',\n            layerName: '土地利用',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'polygon',\n            shape: null,\n            colorName: 'brown',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadLanduseGeoJson,\n            fileName: 'Landuse2.geojson',\n            fieldName: 'A0A14_CNT',\n          },\n          {\n            layerId: '行政區界',\n            layerName: '行政區界',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'polygon',\n            shape: null,\n            colorName: 'brown',\n            geoJsonData: null,\n            summaryData: null,\n            tableData: null,\n            legendData: null,\n            loader: loadTaipeiDistrictGeoJson,\n            fileName: '臺北市區界圖_20220915.geojson',\n            fieldName: 'A0A14_CNT',\n          },\n        ],\n      },\n      {\n        groupName: '數據分析',\n        groupLayers: [\n          {\n            layerId: 'analysis-layer',\n            layerName: '數據分析圖層',\n            visible: true, // 預設開啟\n            isLoading: false,\n            isLoaded: true, // 始終載入\n            type: 'analysis',\n            shape: 'mixed',\n            colorName: 'green',\n            geoJsonData: {\n              type: 'FeatureCollection',\n              features: [],\n            },\n            summaryData: {\n              totalCount: 0,\n              type: '分析點',\n              description: '共 0 個分析點，每個點包含 2 公里分析範圍',\n              lastUpdated: new Date().toISOString(),\n              coverage: '0 平方公里',\n            },\n            tableData: [],\n            legendData: null,\n            loader: null, // 不需要載入器\n            fileName: null,\n            fieldName: null,\n            isAnalysisLayer: true, // 標記為分析圖層\n          },\n          // 🚗 等時圈分析圖層 - 基於真實交通網路的可達性分析\n          {\n            /**\n             * 等時圈分析圖層配置\n             *\n             * @description 此圖層提供基於真實交通網路的等時圈分析功能，\n             * 使用 OpenRouteService API 計算從指定起點在指定時間內可到達的所有區域，\n             * 並分析範圍內的長照設施和相關統計數據。\n             *\n             * 功能特色：\n             * - 🌐 調用 ORS API 獲取真實的等時圈多邊形\n             * - 🎯 精確計算等時圈範圍內的設施數量\n             * - 🔄 API 失敗時提供圓圈分析回退方案\n             * - 📊 生成詳細的統計報告和表格數據\n             * - 🎨 支援多邊形和圓圈兩種視覺表示方式\n             */\n            layerId: 'isochrone-analysis-layer',\n            layerName: '等時圈分析圖層',\n            visible: true, // 預設開啟，讓使用者可以立即使用\n            isLoading: false, // 初始無加載狀態\n            isLoaded: true, // 標記為已載入（分析圖層總是可用的）\n            type: 'isochrone-analysis', // 特殊圖層類型\n            shape: 'mixed', // 混合形狀：包含點標記和多邊形/圓圈\n            colorName: 'blue', // 藍色主題，與數據分析圖層的紅色區分\n\n            // GeoJSON 數據容器，存儲所有等時圈分析結果\n            geoJsonData: {\n              type: 'FeatureCollection',\n              features: [], // 初始為空，分析點會動態添加到此陣列\n            },\n\n            // 摘要統計數據（顯示在圖層面板中）\n            summaryData: {\n              totalCount: 0, // 總等時圈分析數量\n              type: '等時分析點', // 分析類型描述\n              description: '共 0 個等時分析點，每個點包含等時圈分析範圍', // 詳細描述\n              lastUpdated: new Date().toISOString(), // 最後更新時間\n              coverage: '0 平方公里', // 覆蓋範圍（暫未實現）\n            },\n\n            tableData: [], // 表格數據（用於 DataTableTab 顯示）\n            legendData: null, // 圖例數據（等時圈分析不需要圖例）\n            loader: null, // 不需要數據載入器（分析是即時生成的）\n            fileName: null, // 不對應實體檔案\n            fieldName: null, // 不需要欄位映射\n\n            // 🔍 特殊標記：標識此圖層為等時圈分析圖層\n            // 此標記用於：\n            // 1. 在圖層過濾時排除此圖層\n            // 2. 在事件處理中識別分析圖層\n            // 3. 在視覺渲染中應用特殊樣式\n            isIsochroneAnalysisLayer: true,\n          },\n          // 🗺️ 路徑規劃圖層 - 多點路徑規劃功能\n          {\n            /**\n             * 路徑規劃圖層配置\n             *\n             * @description 此圖層提供多點路徑規劃功能，\n             * 使用者可以在地圖上點選多個路徑規劃點，\n             * 系統將記錄這些點位並提供路徑規劃相關功能。\n             *\n             * 功能特色：\n             * - 🎯 支援多點路徑規劃點選\n             * - 📍 無數量限制的路徑點添加\n             * - 🎨 清晰的路徑點視覺化\n             * - 🔄 靈活的路徑點管理\n             * - 📊 路徑點統計和列表顯示\n             */\n            layerId: 'route-planning-layer',\n            layerName: '路徑規劃圖層',\n            visible: true, // 預設開啟\n            isLoading: false, // 初始無加載狀態\n            isLoaded: true, // 標記為已載入（路徑規劃圖層總是可用的）\n            type: 'route-planning', // 特殊圖層類型\n            shape: 'point', // 點狀圖層：路徑規劃點\n            colorName: 'orange', // 橘色主題，與其他分析圖層區分\n\n            // GeoJSON 數據容器，存儲所有路徑規劃點\n            geoJsonData: {\n              type: 'FeatureCollection',\n              features: [], // 初始為空，路徑點會動態添加到此陣列\n            },\n\n            // 摘要統計數據（顯示在圖層面板中）\n            summaryData: {\n              totalCount: 0, // 總路徑規劃點數量\n              type: '路徑規劃點', // 類型描述\n              description: '共 0 個路徑規劃點，點選完成後可進行路徑規劃', // 詳細描述\n              lastUpdated: new Date().toISOString(), // 最後更新時間\n              coverage: '0 個路徑點', // 覆蓋範圍描述\n            },\n\n            tableData: [], // 表格數據（用於 DataTableTab 顯示）\n            legendData: null, // 圖例數據（路徑規劃不需要圖例）\n            loader: null, // 不需要數據載入器（路徑點是即時生成的）\n            fileName: null, // 不對應實體檔案\n            fieldName: null, // 不需要欄位映射\n\n            // 🔍 特殊標記：標識此圖層為路徑規劃圖層\n            // 此標記用於：\n            // 1. 在圖層過濾時排除此圖層\n            // 2. 在事件處理中識別路徑規劃圖層\n            // 3. 在視覺渲染中應用特殊樣式\n            // 4. 在點擊模式中識別路徑規劃模式\n            isRoutePlanningLayer: true,\n          },\n          {\n            /**\n             * 🗺️ 路徑優化圖層 (Route Optimization Layer)\n             *\n             * @description 用於存儲和管理路徑優化相關的數據，包括：\n             * - 🎯 支援多點路徑優化點選\n             * - 📍 無數量限制的優化點添加\n             * - 🎨 清晰的優化點視覺化\n             * - 🔄 靈活的優化點管理\n             * - 📊 優化點統計和列表顯示\n             */\n            layerId: 'route-optimization-layer',\n            layerName: '路徑優化圖層',\n            visible: true, // 預設開啟\n            isLoading: false, // 初始無加載狀態\n            isLoaded: true, // 標記為已載入（路徑優化圖層總是可用的）\n            type: 'route-optimization', // 特殊圖層類型\n            shape: 'point', // 點狀圖層：路徑優化點\n            colorName: 'purple', // 紫色主題，與路徑規劃區分\n\n            // GeoJSON 數據容器，存儲所有路徑優化點\n            geoJsonData: {\n              type: 'FeatureCollection',\n              features: [], // 初始為空，優化點會動態添加到此陣列\n            },\n\n            // 摘要統計數據（顯示在圖層面板中）\n            summaryData: {\n              totalCount: 0, // 總路徑優化點數量\n              type: '路徑優化點', // 類型描述\n              description: '共 0 個路徑優化點，點選完成後可進行路徑優化', // 詳細描述\n              lastUpdated: new Date().toISOString(), // 最後更新時間\n              coverage: '0 個優化點', // 覆蓋範圍描述\n            },\n\n            tableData: [], // 表格數據（用於 DataTableTab 顯示）\n            legendData: null, // 圖例數據（路徑優化不需要圖例）\n            loader: null, // 不需要數據載入器（優化點是即時生成的）\n            fileName: null, // 不對應實體檔案\n            fieldName: null, // 不需要欄位映射\n\n            // 🔍 特殊標記：標識此圖層為路徑優化圖層\n            // 此標記用於：\n            // 1. 在圖層過濾時排除此圖層\n            // 2. 在事件處理中識別路徑優化圖層\n            // 3. 在視覺渲染中應用特殊樣式\n            // 4. 在點擊模式中識別路徑優化模式\n            isRouteOptimizationLayer: true,\n          },\n        ],\n      },\n    ]);\n\n    // 在新的分組結構中搜尋指定 ID 的圖層\n    const findLayerById = (layerId) => {\n      for (const group of layers.value) {\n        for (const layer of group.groupLayers) {\n          if (layer.layerId === layerId) {\n            return layer;\n          }\n        }\n      }\n      return null;\n    };\n\n    // 從分組結構中提取所有圖層的扁平陣列\n    const getAllLayers = () => {\n      const allLayers = [];\n      for (const group of layers.value) {\n        allLayers.push(...group.groupLayers);\n      }\n      return allLayers;\n    };\n\n    // 控制圖層的顯示/隱藏，並在需要時自動載入資料\n    const toggleLayerVisibility = async (layerId) => {\n      console.log('🔧 DataStore: toggleLayerVisibility 被調用', layerId);\n      const layer = findLayerById(layerId);\n      if (!layer) {\n        console.error(`Layer with id \"${layerId}\" not found.`);\n        return;\n      }\n\n      console.log('🔧 DataStore: 找到圖層', layer.layerName, '當前狀態:', layer.visible);\n      // 切換可見性狀態\n      layer.visible = !layer.visible;\n      console.log('🔧 DataStore: 新狀態:', layer.visible);\n\n      // 如果圖層被開啟且尚未載入，則載入資料（分析圖層除外）\n      if (\n        layer.visible &&\n        !layer.isLoaded &&\n        !layer.isLoading &&\n        !layer.isAnalysisLayer &&\n        !layer.isIsochroneAnalysisLayer\n      ) {\n        try {\n          layer.isLoading = true;\n          const result = await layer.loader(layer);\n\n          // 將載入的資料直接存儲在圖層物件中\n          layer.geoJsonData = result.geoJsonData;\n          layer.tableData = result.tableData;\n          layer.summaryData = result.summaryData;\n          layer.legendData = result.legendData || null;\n          layer.isLoaded = true;\n\n          // 🔄 強制觸發響應式更新\n          console.log(\n            `✅ 圖層 \"${layer.layerName}\" 載入完成 (${result.geoJsonData?.features?.length || 0} 筆資料)`\n          );\n          console.log(`📊 圖層摘要資料:`, layer.summaryData);\n        } catch (error) {\n          console.error(`Failed to load data for layer \"${layer.layerName}\":`, error);\n          layer.visible = false; // 載入失敗時恢復可見性狀態\n        } finally {\n          layer.isLoading = false;\n        }\n      }\n    };\n\n    // ------------------------------------------------------------\n    // 選中的地圖物件\n    const selectedFeature = ref(null);\n\n    const setSelectedFeature = (feature) => {\n      selectedFeature.value = feature;\n    };\n\n    const clearSelectedFeature = () => {\n      selectedFeature.value = null;\n    };\n\n    // 🧮 計算兩點間距離 (Calculate Distance Between Two Points)\n    // 使用 Haversine 公式計算地球表面兩點間的距離（公尺）\n    const calculateDistance = (lat1, lng1, lat2, lng2) => {\n      const R = 6371000; // 地球半徑（公尺）\n      const dLat = ((lat2 - lat1) * Math.PI) / 180;\n      const dLng = ((lng2 - lng1) * Math.PI) / 180;\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos((lat1 * Math.PI) / 180) *\n          Math.cos((lat2 * Math.PI) / 180) *\n          Math.sin(dLng / 2) *\n          Math.sin(dLng / 2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      return R * c; // 距離（公尺）\n    };\n\n    // 🔍 計算範圍內的點物件 (Calculate Points Within Range)\n    const calculatePointsInRange = (centerLat, centerLng, radiusMeters = 2000) => {\n      const pointsInRange = [];\n\n      // 獲取所有可見且已載入的點類型圖層\n      const visiblePointLayers = getAllLayers().filter(\n        (layer) =>\n          layer.visible &&\n          layer.isLoaded &&\n          layer.type === 'point' &&\n          !layer.isAnalysisLayer &&\n          !layer.isIsochroneAnalysisLayer &&\n          layer.geoJsonData\n      );\n\n      console.log(\n        '🔍 檢查可見的點圖層:',\n        visiblePointLayers.map((l) => l.layerName)\n      );\n\n      visiblePointLayers.forEach((layer) => {\n        if (layer.geoJsonData && layer.geoJsonData.features) {\n          layer.geoJsonData.features.forEach((feature) => {\n            if (feature.geometry.type === 'Point') {\n              const [lng, lat] = feature.geometry.coordinates;\n              const distance = calculateDistance(centerLat, centerLng, lat, lng);\n\n              if (distance <= radiusMeters) {\n                // 創建增強的 feature 物件，包含距離和圖層資訊\n                const enhancedFeature = {\n                  ...feature, // 保留原始 feature 的所有屬性\n                  layerId: layer.layerId,\n                  layerName: layer.layerName,\n                  distance: Math.round(distance), // 添加距離資訊\n                };\n                pointsInRange.push(enhancedFeature);\n              }\n            }\n          });\n        }\n      });\n\n      // 按距離排序\n      pointsInRange.sort((a, b) => a.distance - b.distance);\n\n      console.log(`🎯 在 ${radiusMeters / 1000}公里範圍內找到 ${pointsInRange.length} 個點物件`);\n      return pointsInRange;\n    };\n\n    const calculatePolygonInRange = (centerLat, centerLng, radiusMeters = 2000) => {\n      const polygonInRange = [];\n\n      // 獲取所有可見且已載入的區域類型圖層\n      const visiblePolygonLayers = getAllLayers().filter(\n        (layer) =>\n          layer.visible &&\n          layer.isLoaded &&\n          layer.type === 'polygon' &&\n          !layer.isAnalysisLayer &&\n          !layer.isIsochroneAnalysisLayer &&\n          layer.geoJsonData\n      );\n\n      console.log(\n        '🔍 檢查可見的多邊形圖層:',\n        visiblePolygonLayers.map((l) => l.layerName)\n      );\n\n      visiblePolygonLayers.forEach((layer) => {\n        if (layer.geoJsonData && layer.geoJsonData.features) {\n          layer.geoJsonData.features.forEach((feature) => {\n            if (feature.geometry.type === 'Polygon' || feature.geometry.type === 'MultiPolygon') {\n              // 檢查多邊形是否與圓圈有重疊\n              const hasOverlap = checkPolygonCircleOverlap(\n                feature.geometry,\n                centerLat,\n                centerLng,\n                radiusMeters\n              );\n\n              if (hasOverlap) {\n                // 創建增強的 feature 物件，包含圖層資訊\n                const enhancedFeature = {\n                  ...feature, // 保留原始 feature 的所有屬性\n                  layerId: layer.layerId,\n                  layerName: layer.layerName,\n                  overlapType: 'intersects', // 標記為相交\n                };\n                polygonInRange.push(enhancedFeature);\n              }\n            }\n          });\n        }\n      });\n\n      console.log(\n        `🎯 在 ${radiusMeters / 1000}公里範圍內找到 ${polygonInRange.length} 個重疊多邊形`\n      );\n      return polygonInRange;\n    };\n\n    // 檢查多邊形與圓圈是否重疊的函數\n    const checkPolygonCircleOverlap = (geometry, centerLat, centerLng, radiusMeters) => {\n      const coordinates =\n        geometry.type === 'Polygon' ? [geometry.coordinates] : geometry.coordinates;\n\n      for (const polygon of coordinates) {\n        for (const ring of polygon) {\n          for (const [lng, lat] of ring) {\n            const distance = calculateDistance(centerLat, centerLng, lat, lng);\n            if (distance <= radiusMeters) {\n              return true; // 如果任何一個頂點在圓內，就認為有重疊\n            }\n          }\n        }\n      }\n\n      // 也可以檢查圓心是否在多邊形內，但這裡簡化處理\n      return false;\n    };\n\n    // 分析圖層管理方法\n    const updateAnalysisLayerData = (analysisLayer) => {\n      // 獲取所有分析圓圈\n      const analysisCircles = analysisLayer.geoJsonData.features.filter(\n        (f) => f.properties.type === 'circle-analysis'\n      );\n\n      // 更新 summaryData\n      analysisLayer.summaryData = {\n        totalCount: analysisCircles.length,\n      };\n\n      // 更新 tableData\n      analysisLayer.tableData = analysisCircles.map((feature) => ({\n        '#': feature.properties.id,\n        名稱: feature.properties.name,\n        範圍內點位數: feature.properties.pointsInRange.length,\n        範圍內面域數: feature.properties.polygonInRange.length,\n      }));\n    };\n\n    // 等時圈分析圖層管理方法\n    /**\n     * 更新等時圈分析圖層的統計數據和表格數據\n     *\n     * @description 此函數負責更新等時圈分析圖層的所有統計資訊，\n     * 包括摘要數據（summaryData）和表格數據（tableData）。\n     * 支援兩種類型的等時圈要素：真實的多邊形和回退的圓圈。\n     *\n     * @param {Object} isochroneLayer - 等時圈分析圖層物件\n     *\n     * @note 此函數會在以下情況被調用：\n     * 1. 新增等時圈分析點後\n     * 2. 刪除等時圈分析點後\n     * 3. 清空等時圈分析圖層後\n     *\n     * @example\n     * const isochroneLayer = findLayerById('isochrone-analysis-layer');\n     * updateIsochroneAnalysisLayerData(isochroneLayer);\n     */\n    const updateIsochroneAnalysisLayerData = (isochroneLayer) => {\n      // 獲取所有等時圈分析要素（包括多邊形和圓圈兩種類型）\n      const isochroneFeatures = isochroneLayer.geoJsonData.features.filter(\n        (f) =>\n          f.properties.type === 'isochrone-circle-analysis' || // 回退模式的圓圈\n          f.properties.type === 'isochrone-polygon-analysis' // API 模式的多邊形\n      );\n\n      // 更新摘要統計數據\n      isochroneLayer.summaryData = {\n        totalCount: isochroneFeatures.length, // 總等時圈分析數量\n      };\n\n      // 更新表格顯示數據（用於 DataTableTab）\n      isochroneLayer.tableData = isochroneFeatures.map((feature) => ({\n        '#': feature.properties.id, // 分析編號\n        名稱: feature.properties.name, // 分析名稱\n        // 根據要素類型顯示不同的標籤\n        類型:\n          feature.properties.type === 'isochrone-polygon-analysis'\n            ? '等時圈多邊形' // 來自 ORS API 的真實等時圈\n            : '預估圓圈', // 回退模式的圓圈分析\n        // 顯示車程時間或預估標籤\n        車程時間: feature.properties.travelTime ? `${feature.properties.travelTime}分鐘` : '預估',\n        // 範圍內的點設施數量\n        範圍內點位數: feature.properties.pointsInRange\n          ? feature.properties.pointsInRange.length\n          : 0,\n        // 範圍內的多邊形區域數量\n        範圍內面域數: feature.properties.polygonInRange\n          ? feature.properties.polygonInRange.length\n          : 0,\n      }));\n    };\n\n    const addAnalysisPoint = (lat, lng, radius = 2000) => {\n      const analysisLayer = findLayerById('analysis-layer');\n      if (!analysisLayer) return;\n\n      const pointId =\n        analysisLayer.geoJsonData.features.filter((f) => f.properties.type === 'point-analysis')\n          .length + 1;\n\n      // 🎯 計算範圍內的點物件\n      const pointsInRange = calculatePointsInRange(lat, lng, radius);\n\n      // 🎯 計算範圍內的多邊形物件\n      const polygonInRange = calculatePolygonInRange(lat, lng, radius);\n\n      // 📊 統計各圖層的點數\n      const layerStats = {};\n      pointsInRange.forEach((feature) => {\n        if (!layerStats[feature.layerName]) {\n          layerStats[feature.layerName] = 0;\n        }\n        layerStats[feature.layerName]++;\n      });\n\n      // 📊 統計各圖層的多邊形數\n      const polygonStats = {};\n      polygonInRange.forEach((feature) => {\n        if (!polygonStats[feature.layerName]) {\n          polygonStats[feature.layerName] = 0;\n        }\n        polygonStats[feature.layerName]++;\n      });\n\n      const featureName = `分析範圍 ${pointId}`;\n\n      // 創建圓圈要素（主要交互物件）\n      const circleFeature = {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [lng, lat],\n        },\n        properties: {\n          id: pointId,\n          layerId: 'analysis-layer', // 添加圖層ID\n          type: 'circle-analysis',\n          name: featureName,\n          radius: radius,\n          pointsInRange: pointsInRange, // 存儲範圍內的點物件\n          polygonInRange: polygonInRange, // 存儲範圍內的多邊形物件\n          layerStats: layerStats, // 存儲各圖層統計\n          polygonStats: polygonStats, // 存儲各多邊形圖層統計\n          // 添加 propertyData 供 PropertiesTab 使用\n          propertyData: {\n            名稱: featureName,\n            範圍內點位數: pointsInRange.length,\n            範圍內多邊形數: polygonInRange.length,\n            分析範圍半徑: `${(radius / 1000).toFixed(1)} 公里`,\n          },\n        },\n      };\n\n      // 創建分析點要素（僅用於顯示位置標記）\n      const pointFeature = {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [lng, lat],\n        },\n        properties: {\n          id: `${pointId}_analysis_point`,\n          layerId: 'analysis-layer',\n          type: 'point-analysis',\n          parentId: pointId,\n        },\n      };\n\n      // 添加到分析圖層（圓圈在前，點在後，這樣圓圈會在下層，點在上層）\n      analysisLayer.geoJsonData.features.push(circleFeature, pointFeature);\n\n      // 更新圖層統計和表格數據\n      updateAnalysisLayerData(analysisLayer);\n\n      // 🎯 輸出範圍內點位物件的詳細信息\n      // if (pointsInRange.length > 0) {\n      //   console.log('🎯 範圍內的點物件:', pointsInRange);\n      // }\n\n      return {\n        pointId,\n        pointsInRange,\n        polygonInRange,\n        layerStats,\n        polygonStats,\n      };\n    };\n\n    // 🌐 調用 OpenRouteService API 獲取等時圈數據\n    /**\n     * 從 OpenRouteService API 獲取等時圈（Isochrone）數據\n     *\n     * @description 此函數向 ORS API 發送請求，獲取從指定起點在指定時間內可到達的所有區域\n     * 等時圈是指從某一點出發，在相同時間內可以到達的所有地點連成的邊界線\n     *\n     * @param {number} lat - 起點緯度（WGS84 坐標系）\n     * @param {number} lng - 起點經度（WGS84 坐標系）\n     * @param {number} travelTimeMinutes - 旅行時間（分鐘），默認為 10 分鐘\n     *\n     * @returns {Promise<Object>} 返回 GeoJSON 格式的等時圈數據\n     * @throws {Error} 當 API 調用失敗時拋出錯誤\n     *\n     * @example\n     * // 獲取台北 101 周邊 15 分鐘車程的等時圈\n     * const isochrone = await fetchIsochroneData(25.034, 121.565, 15);\n     */\n    const fetchIsochroneData = async (lat, lng, travelTimeMinutes = 10) => {\n      // OpenRouteService API 金鑰（免費額度：每日 2000 次請求）\n      const apiKey = '5b3ce3597851110001cf6248cd3e1a052bec45bc8410b037091bb766';\n\n      // ORS API 要求坐標格式為 [經度, 緯度]（與常見的 [緯度, 經度] 相反）\n      const startPoint = [lng, lat];\n\n      try {\n        // 向 ORS Isochrones API 發送 POST 請求\n        // https://openrouteservice.org/dev/#/api-docs/v2/isochrones/{profile}/post\n        const response = await fetch(\n          'https://api.openrouteservice.org/v2/isochrones/driving-car', // driving-car // cycling-electric\n          {\n            method: 'POST',\n            headers: {\n              // API 身份驗證標頭\n              Authorization: apiKey,\n              // 指定請求內容類型為 JSON\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              // 起點坐標陣列（可以同時計算多個起點，這裡只有一個）\n              locations: [startPoint],\n              // 時間範圍陣列，單位為秒（可以同時計算多個時間範圍）\n              range: [travelTimeMinutes * 60],\n              // 範圍類型：'time' 表示時間等時圈，'distance' 表示距離等時圈\n              range_type: 'time',\n            }),\n          }\n        );\n\n        // 檢查 HTTP 響應狀態\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        // 解析 JSON 響應數據\n        const data = await response.json();\n\n        // 返回的數據格式為 GeoJSON FeatureCollection\n        // 包含一個或多個 Polygon 要素，代表等時圈區域\n        return data;\n      } catch (error) {\n        console.error('獲取等時圈數據失敗:', error);\n        throw error;\n      }\n    };\n\n    // 🎯 計算等時圈多邊形範圍內的點物件\n    /**\n     * 計算等時圈多邊形範圍內的所有點物件（長照設施等）\n     *\n     * @description 此函數遍歷所有可見的點圖層，檢查每個點是否位於等時圈多邊形內部\n     * 使用射線投射算法（Ray Casting Algorithm）判斷點是否在多邊形內\n     *\n     * @param {Object} isochroneData - 來自 ORS API 的等時圈 GeoJSON 數據\n     * @param {number} centerLat - 等時圈中心點緯度（用於計算距離）\n     * @param {number} centerLng - 等時圈中心點經度（用於計算距離）\n     *\n     * @returns {Array} 包含所有在等時圈內的點物件陣列，每個物件包含：\n     *   - 原始 GeoJSON feature 數據\n     *   - layerId: 圖層 ID\n     *   - layerName: 圖層名稱\n     *   - distance: 與中心點的直線距離（公尺）\n     *\n     * @example\n     * const pointsInRange = calculatePointsInIsochronePolygon(isochroneData, 25.034, 121.565);\n     * console.log(`找到 ${pointsInRange.length} 個設施`);\n     */\n    const calculatePointsInIsochronePolygon = (isochroneData, centerLat, centerLng) => {\n      const pointsInRange = [];\n\n      // 檢查等時圈數據是否有效\n      if (!isochroneData.features || isochroneData.features.length === 0) {\n        console.warn('等時圈數據無效或為空');\n        return pointsInRange;\n      }\n\n      // 取得第一個（通常也是唯一的）等時圈多邊形\n      const isochronePolygon = isochroneData.features[0];\n\n      // 獲取所有符合條件的點圖層：\n      // 1. 必須是可見的 (visible = true)\n      // 2. 必須已載入數據 (isLoaded = true)\n      // 3. 必須是點類型 (type = 'point')\n      // 4. 排除分析圖層（避免計算分析點本身）\n      // 5. 必須有實際的 GeoJSON 數據\n      const visiblePointLayers = getAllLayers().filter(\n        (layer) =>\n          layer.visible &&\n          layer.isLoaded &&\n          layer.type === 'point' &&\n          !layer.isAnalysisLayer &&\n          !layer.isIsochroneAnalysisLayer &&\n          layer.geoJsonData\n      );\n\n      console.log(\n        '🔍 檢查等時圈範圍內的點圖層:',\n        visiblePointLayers.map((l) => l.layerName)\n      );\n\n      // 🚨 診斷：如果沒有找到符合條件的點圖層，提供詳細的診斷資訊\n      if (visiblePointLayers.length === 0) {\n        console.warn('⚠️ 沒有找到符合條件的點圖層進行等時圈分析！');\n\n        // 檢查所有點圖層的狀態\n        const allPointLayers = getAllLayers().filter((layer) => layer.type === 'point');\n        console.log('📊 所有點圖層狀態診斷:');\n        allPointLayers.forEach((layer) => {\n          const status = [];\n          if (!layer.visible) status.push('不可見');\n          if (!layer.isLoaded) status.push('未載入');\n          if (!layer.geoJsonData) status.push('無數據');\n\n          console.log(\n            `  - ${layer.layerName}: ${status.length > 0 ? status.join(', ') : '✅ 符合條件'}`\n          );\n        });\n\n        console.log('💡 解決方案：');\n        console.log('   1. 在左側圖層面板中開啟需要分析的點圖層（如醫院、診所等）');\n        console.log('   2. 等待圖層載入完成後再進行等時圈分析');\n        console.log('   3. 或者可以考慮自動載入相關圖層');\n\n        return pointsInRange;\n      }\n\n      // 遍歷每個符合條件的圖層\n      visiblePointLayers.forEach((layer) => {\n        if (layer.geoJsonData && layer.geoJsonData.features) {\n          // 遍歷圖層中的每個地理要素\n          layer.geoJsonData.features.forEach((feature) => {\n            // 只處理點類型的要素\n            if (feature.geometry.type === 'Point') {\n              // 取得點的坐標 [經度, 緯度]\n              const [lng, lat] = feature.geometry.coordinates;\n\n              // 使用點在多邊形內判斷算法檢查此點是否在等時圈內\n              if (isPointInPolygon([lng, lat], isochronePolygon.geometry)) {\n                // 計算點與等時圈中心的直線距離（雖然不是實際行車距離，但可作為參考）\n                const distance = calculateDistance(centerLat, centerLng, lat, lng);\n\n                // 創建增強的要素物件，包含原始數據和額外資訊\n                const enhancedFeature = {\n                  ...feature, // 保留原始 GeoJSON feature 的所有屬性\n                  layerId: layer.layerId, // 添加圖層 ID\n                  layerName: layer.layerName, // 添加圖層名稱（供顯示用）\n                  distance: Math.round(distance), // 添加與中心點的距離（四捨五入到公尺）\n                };\n                pointsInRange.push(enhancedFeature);\n              }\n            }\n          });\n        }\n      });\n\n      // 按與中心點的距離排序（最近的在前面）\n      pointsInRange.sort((a, b) => a.distance - b.distance);\n\n      console.log(`🎯 在等時圈範圍內找到 ${pointsInRange.length} 個點物件`);\n      return pointsInRange;\n    };\n\n    // 🎯 計算等時圈多邊形範圍內的多邊形物件\n    /**\n     * 計算與等時圈多邊形有重疊的所有多邊形物件（如行政區界、統計區域等）\n     *\n     * @description 此函數檢查所有可見的多邊形圖層，找出與等時圈有交集的多邊形\n     * 使用簡化的重疊檢測算法：檢查多邊形頂點是否有任何一個落在等時圈內\n     *\n     * @param {Object} isochroneData - 來自 ORS API 的等時圈 GeoJSON 數據\n     *\n     * @returns {Array} 包含所有與等時圈重疊的多邊形物件陣列，每個物件包含：\n     *   - 原始 GeoJSON feature 數據\n     *   - layerId: 圖層 ID\n     *   - layerName: 圖層名稱\n     *   - overlapType: 重疊類型（'intersects'）\n     *\n     * @example\n     * const overlappingPolygons = calculatePolygonInIsochronePolygon(isochroneData);\n     * console.log(`找到 ${overlappingPolygons.length} 個重疊的行政區`);\n     */\n    const calculatePolygonInIsochronePolygon = (isochroneData) => {\n      const polygonInRange = [];\n\n      // 檢查等時圈數據是否有效\n      if (!isochroneData.features || isochroneData.features.length === 0) {\n        console.warn('等時圈數據無效或為空，無法計算多邊形重疊');\n        return polygonInRange;\n      }\n\n      // 取得第一個等時圈多邊形\n      const isochronePolygon = isochroneData.features[0];\n\n      // 獲取所有符合條件的多邊形圖層：\n      // 1. 必須是可見的 (visible = true)\n      // 2. 必須已載入數據 (isLoaded = true)\n      // 3. 必須是多邊形類型 (type = 'polygon')\n      // 4. 排除分析圖層（避免與分析多邊形本身比較）\n      // 5. 必須有實際的 GeoJSON 數據\n      const visiblePolygonLayers = getAllLayers().filter(\n        (layer) =>\n          layer.visible &&\n          layer.isLoaded &&\n          layer.type === 'polygon' &&\n          !layer.isAnalysisLayer &&\n          !layer.isIsochroneAnalysisLayer &&\n          layer.geoJsonData\n      );\n\n      // 遍歷每個符合條件的多邊形圖層\n      visiblePolygonLayers.forEach((layer) => {\n        if (layer.geoJsonData && layer.geoJsonData.features) {\n          // 遍歷圖層中的每個地理要素\n          layer.geoJsonData.features.forEach((feature) => {\n            // 只處理 Polygon 和 MultiPolygon 類型的要素\n            if (feature.geometry.type === 'Polygon' || feature.geometry.type === 'MultiPolygon') {\n              // 檢查此多邊形是否與等時圈有重疊\n              const hasOverlap = checkPolygonIsochroneOverlap(\n                feature.geometry,\n                isochronePolygon.geometry\n              );\n\n              if (hasOverlap) {\n                // 創建增強的要素物件，包含重疊資訊\n                const enhancedFeature = {\n                  ...feature, // 保留原始 GeoJSON feature 的所有屬性\n                  layerId: layer.layerId, // 添加圖層 ID\n                  layerName: layer.layerName, // 添加圖層名稱\n                  overlapType: 'intersects', // 標記重疊類型\n                };\n                polygonInRange.push(enhancedFeature);\n              }\n            }\n          });\n        }\n      });\n\n      console.log(`🎯 在等時圈範圍內找到 ${polygonInRange.length} 個重疊多邊形`);\n      return polygonInRange;\n    };\n\n    // 檢查點是否在多邊形內（射線投射算法）\n    /**\n     * 使用射線投射算法（Ray Casting Algorithm）判斷點是否在多邊形內部\n     *\n     * @description 此算法的基本原理：\n     * 1. 從測試點向任意方向（通常是水平向右）發射一條射線\n     * 2. 計算射線與多邊形邊界的交點數量\n     * 3. 如果交點數量為奇數，則點在多邊形內；偶數則在外\n     *\n     * @param {Array} point - 測試點坐標 [經度, 緯度]\n     * @param {Object} polygon - GeoJSON 多邊形幾何物件\n     *\n     * @returns {boolean} true 表示點在多邊形內，false 表示在外\n     *\n     * @example\n     * const isInside = isPointInPolygon([121.565, 25.034], polygonGeometry);\n     * console.log(isInside ? '在多邊形內' : '在多邊形外');\n     *\n     * @note 此實現為簡化版本，僅處理多邊形的外環，未考慮內環（洞）\n     */\n    const isPointInPolygon = (point, polygon) => {\n      const [x, y] = point; // 測試點的 x, y 坐標\n      let coordinates;\n\n      // 根據多邊形類型獲取坐標陣列\n      if (polygon.type === 'Polygon') {\n        // 單一多邊形：取外環坐標（第一個陣列）\n        coordinates = polygon.coordinates[0];\n      } else if (polygon.type === 'MultiPolygon') {\n        // 多重多邊形：取第一個多邊形的外環坐標\n        coordinates = polygon.coordinates[0][0];\n      } else {\n        // 不支援的幾何類型\n        console.warn(`不支援的多邊形類型: ${polygon.type}`);\n        return false;\n      }\n\n      let inside = false; // 初始假設點在多邊形外\n\n      // 遍歷多邊形的每條邊\n      for (let i = 0, j = coordinates.length - 1; i < coordinates.length; j = i++) {\n        const [xi, yi] = coordinates[i]; // 當前頂點\n        const [xj, yj] = coordinates[j]; // 前一個頂點\n\n        // 檢查射線是否與此邊相交\n        // 條件：\n        // 1. 邊的兩個端點 y 坐標一個在測試點上方，一個在下方\n        // 2. 交點的 x 坐標在測試點右側\n        if (yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi) {\n          inside = !inside; // 每次相交都切換內外狀態\n        }\n      }\n\n      return inside;\n    };\n\n    // 檢查多邊形與等時圈是否重疊（簡化版本）\n    /**\n     * 檢查兩個多邊形是否有重疊或相交\n     *\n     * @description 此函數使用簡化的重疊檢測算法：\n     * 檢查測試多邊形的所有頂點，如果有任何一個頂點落在等時圈多邊形內，\n     * 就認為兩個多邊形有重疊。這是一個快速但不完美的方法。\n     *\n     * @param {Object} polygon - 要檢測的多邊形幾何物件\n     * @param {Object} isochronePolygon - 等時圈多邊形幾何物件\n     *\n     * @returns {boolean} true 表示有重疊，false 表示無重疊\n     *\n     * @note 限制：\n     * 1. 此方法只檢查頂點，可能遺漏某些邊緣相交的情況\n     * 2. 不處理一個多邊形完全包含另一個的情況\n     * 3. 完整的多邊形相交算法會更複雜，需要考慮所有邊的交點\n     *\n     * @example\n     * const hasOverlap = checkPolygonIsochroneOverlap(districtGeometry, isochroneGeometry);\n     * if (hasOverlap) console.log('行政區與等時圈有重疊');\n     */\n    const checkPolygonIsochroneOverlap = (polygon, isochronePolygon) => {\n      let coordinates;\n\n      // 根據多邊形類型獲取坐標陣列\n      if (polygon.type === 'Polygon') {\n        // 單一多邊形：取外環坐標\n        coordinates = polygon.coordinates[0];\n      } else if (polygon.type === 'MultiPolygon') {\n        // 多重多邊形：取第一個多邊形的外環坐標\n        coordinates = polygon.coordinates[0][0];\n      } else {\n        // 不支援的幾何類型\n        console.warn(`不支援的多邊形類型用於重疊檢測: ${polygon.type}`);\n        return false;\n      }\n\n      // 遍歷多邊形的所有頂點\n      for (const [lng, lat] of coordinates) {\n        // 如果任何一個頂點在等時圈內，就認為有重疊\n        if (isPointInPolygon([lng, lat], isochronePolygon)) {\n          return true;\n        }\n      }\n\n      // 所有頂點都在等時圈外，認為無重疊\n      // 注意：這可能會遺漏某些邊緣相交的情況\n      return false;\n    };\n\n    /**\n     * 自動載入重要的長照設施圖層用於等時圈分析\n     *\n     * @description 為了確保等時圈分析能夠計算到範圍內的設施，\n     * 此函數會自動載入一些重要的長照相關圖層\n     *\n     * @returns {Promise<void>} 完成所有圖層載入的 Promise\n     */\n    const autoLoadImportantLayersForAnalysis = async () => {\n      // 定義重要的長照設施圖層 ID（按重要性排序）\n      const importantLayerIds = [\n        '醫院',\n        '診所',\n        '藥局',\n        '社區照顧關懷據點',\n        '社區整合型服務中心(A單位)',\n        '一般護理之家',\n        '住宿式長照機構',\n      ];\n\n      const layersToLoad = [];\n\n      // 檢查哪些重要圖層需要載入\n      importantLayerIds.forEach((layerId) => {\n        const layer = findLayerById(layerId);\n        if (layer && !layer.isLoaded && !layer.isLoading) {\n          layersToLoad.push(layer);\n        }\n      });\n\n      if (layersToLoad.length > 0) {\n        console.log(\n          `🚀 自動載入 ${layersToLoad.length} 個重要圖層用於等時圈分析:`,\n          layersToLoad.map((l) => l.layerName)\n        );\n\n        // 並行載入所有圖層\n        const loadPromises = layersToLoad.map(async (layer) => {\n          try {\n            layer.isLoading = true;\n            layer.visible = true; // 設為可見\n\n            if (layer.loader) {\n              const data = await layer.loader(layer.fileName);\n              layer.geoJsonData = data.geoJsonData;\n              layer.summaryData = data.summaryData;\n              layer.tableData = data.tableData;\n              layer.legendData = data.legendData;\n              layer.isLoaded = true;\n              console.log(`✅ 已載入圖層: ${layer.layerName}`);\n            }\n          } catch (error) {\n            console.error(`❌ 載入圖層失敗: ${layer.layerName}`, error);\n          } finally {\n            layer.isLoading = false;\n          }\n        });\n\n        await Promise.all(loadPromises);\n        console.log('🎉 重要圖層載入完成，可以進行等時圈分析');\n      } else {\n        console.log('✅ 重要圖層已經載入，無需額外載入');\n      }\n    };\n\n    /**\n     * 添加等時圈分析點 - 核心功能函數\n     *\n     * @description 這是等時圈分析功能的主要入口點。此函數會：\n     * 1. 調用 OpenRouteService API 獲取真實的等時圈數據\n     * 2. 計算等時圈範圍內的所有長照設施和相關區域\n     * 3. 創建可視化的等時圈多邊形和分析點\n     * 4. 生成統計數據和報告\n     * 5. 在 API 失敗時提供回退方案\n     *\n     * @param {number} lat - 分析起點的緯度（WGS84 坐標系）\n     * @param {number} lng - 分析起點的經度（WGS84 坐標系）\n     * @param {number} travelTimeMinutes - 等時圈時間範圍（分鐘），預設 10 分鐘\n     *\n     * @returns {Promise<Object>} 分析結果物件，包含：\n     *   - pointId: 分析點編號\n     *   - pointsInRange: 範圍內的點設施陣列\n     *   - polygonInRange: 範圍內的多邊形區域陣列\n     *   - layerStats: 各圖層的統計數據\n     *   - polygonStats: 多邊形圖層的統計數據\n     *   - isochroneData: 原始等時圈 API 數據\n     *\n     * @throws {Error} 當 API 調用失敗且回退方案也失敗時拋出錯誤\n     *\n     * @example\n     * // 在台北 101 創建 15 分鐘車程的等時圈分析\n     * const result = await addIsochroneAnalysisPoint(25.034, 121.565, 15);\n     * console.log(`找到 ${result.pointsInRange.length} 個長照設施`);\n     */\n    const addIsochroneAnalysisPoint = async (lat, lng, travelTimeMinutes = 10) => {\n      // 獲取等時圈分析圖層實例\n      const isochroneLayer = findLayerById('isochrone-analysis-layer');\n      if (!isochroneLayer) {\n        console.error('找不到等時圈分析圖層');\n        return;\n      }\n\n      // 🚀 自動載入重要的長照設施圖層\n      await autoLoadImportantLayersForAnalysis();\n\n      // 計算新的分析點編號（基於現有分析點數量）\n      const pointId =\n        isochroneLayer.geoJsonData.features.filter(\n          (f) => f.properties.type === 'isochrone-point-analysis'\n        ).length + 1;\n\n      try {\n        // 🚀 第一階段：調用 OpenRouteService API 獲取等時圈數據\n        isochroneLayer.isLoading = true; // 設置圖層加載狀態，用於 UI 顯示\n        console.log(`🌐 正在獲取 ${travelTimeMinutes} 分鐘車程的等時圈數據...`);\n\n        // 調用 ORS API 獲取實際的等時圈多邊形\n        const isochroneData = await fetchIsochroneData(lat, lng, travelTimeMinutes);\n\n        // 🎯 第二階段：基於等時圈多邊形計算範圍內的設施和區域\n        const pointsInRange = calculatePointsInIsochronePolygon(isochroneData, lat, lng);\n        const polygonInRange = calculatePolygonInIsochronePolygon(isochroneData);\n\n        // 📊 第三階段：統計各圖層的設施數量\n        const layerStats = {};\n        pointsInRange.forEach((feature) => {\n          if (!layerStats[feature.layerName]) {\n            layerStats[feature.layerName] = 0;\n          }\n          layerStats[feature.layerName]++;\n        });\n\n        // 📊 統計各多邊形圖層的重疊數量\n        const polygonStats = {};\n        polygonInRange.forEach((feature) => {\n          if (!polygonStats[feature.layerName]) {\n            polygonStats[feature.layerName] = 0;\n          }\n          polygonStats[feature.layerName]++;\n        });\n\n        // 🏷️ 第四階段：創建分析結果的顯示名稱\n        const featureName = `等時分析範圍 ${pointId} (${travelTimeMinutes}分鐘車程)`;\n\n        // 🗺️ 第五階段：創建等時圈多邊形要素（用於地圖顯示）\n        const isochronePolygonFeature = {\n          type: 'Feature',\n          geometry: isochroneData.features[0].geometry, // 直接使用 ORS API 返回的多邊形幾何\n          properties: {\n            id: pointId, // 唯一識別編號\n            layerId: 'isochrone-analysis-layer', // 所屬圖層\n            type: 'isochrone-polygon-analysis', // 要素類型標記\n            name: featureName, // 顯示名稱\n            travelTime: travelTimeMinutes, // 旅行時間\n            pointsInRange: pointsInRange, // 範圍內的點設施\n            polygonInRange: polygonInRange, // 範圍內的多邊形區域\n            layerStats: layerStats, // 圖層統計\n            polygonStats: polygonStats, // 多邊形統計\n            // 為屬性面板準備的格式化數據\n            propertyData: {\n              名稱: featureName,\n              車程時間: `${travelTimeMinutes} 分鐘`,\n              範圍內點位數: pointsInRange.length,\n              範圍內多邊形數: polygonInRange.length,\n            },\n          },\n        };\n\n        // 📍 創建等時圈分析點要素（用於標記分析起點）\n        const pointFeature = {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [lng, lat], // 分析起點坐標\n          },\n          properties: {\n            id: `${pointId}_isochrone_analysis_point`, // 唯一識別編號\n            layerId: 'isochrone-analysis-layer',\n            type: 'isochrone-point-analysis', // 點標記類型\n            parentId: pointId, // 關聯的多邊形 ID\n          },\n        };\n\n        // 🔄 第六階段：將新創建的要素添加到圖層\n        isochroneLayer.geoJsonData.features.push(isochronePolygonFeature, pointFeature);\n\n        // 📊 更新圖層統計和表格數據\n        updateIsochroneAnalysisLayerData(isochroneLayer);\n\n        console.log(`✅ 成功創建等時圈分析 ${pointId}，包含 ${pointsInRange.length} 個點位`);\n\n        // 返回完整的分析結果\n        return {\n          pointId,\n          pointsInRange,\n          polygonInRange,\n          layerStats,\n          polygonStats,\n          isochroneData,\n        };\n      } catch (error) {\n        console.error('創建等時圈分析失敗:', error);\n        // 🔄 錯誤處理：API 失敗時回退到簡單圓圈分析\n        console.log('🔄 回退到簡單圓圈分析模式');\n        return addSimpleIsochroneAnalysisPoint(lat, lng, pointId);\n      } finally {\n        // 🧹 清理：無論成功或失敗都要清除加載狀態\n        isochroneLayer.isLoading = false;\n      }\n    };\n\n    // 🔄 回退方案：簡單圓圈分析（當 API 失敗時使用）\n    /**\n     * 簡單圓圈分析 - API 失敗時的回退方案\n     *\n     * @description 當 OpenRouteService API 調用失敗時（如網路錯誤、API 限制等），\n     * 使用此函數提供基本的分析功能。以指定半徑的圓圈代替等時圈多邊形，\n     * 雖然不如真實等時圈精確，但仍能提供基本的距離分析。\n     *\n     * @param {number} lat - 分析起點緯度\n     * @param {number} lng - 分析起點經度\n     * @param {number} pointId - 分析點編號\n     *\n     * @returns {Object} 簡化的分析結果物件\n     *\n     * @note 使用固定的 3 公里半徑作為預估等時圈範圍\n     * 這個距離大約對應 10-15 分鐘的車程（視交通狀況而定）\n     */\n    const addSimpleIsochroneAnalysisPoint = (lat, lng, pointId) => {\n      const isochroneLayer = findLayerById('isochrone-analysis-layer');\n      if (!isochroneLayer) {\n        console.error('回退方案：找不到等時圈分析圖層');\n        return;\n      }\n\n      // 使用原有的圓圈範圍計算函數，半徑設為 3 公里\n      const FALLBACK_RADIUS = 3000; // 3 公里，作為等時圈的粗略估計\n\n      console.log('🔄 回退模式：使用圓圈分析計算範圍內設施');\n      const pointsInRange = calculatePointsInRange(lat, lng, FALLBACK_RADIUS);\n      const polygonInRange = calculatePolygonInRange(lat, lng, FALLBACK_RADIUS);\n\n      console.log(\n        `🔄 回退模式結果：找到 ${pointsInRange.length} 個點設施，${polygonInRange.length} 個多邊形區域`\n      );\n\n      // 統計各圖層的設施數量\n      const layerStats = {};\n      pointsInRange.forEach((feature) => {\n        if (!layerStats[feature.layerName]) {\n          layerStats[feature.layerName] = 0;\n        }\n        layerStats[feature.layerName]++;\n      });\n\n      // 統計各多邊形圖層的重疊數量\n      const polygonStats = {};\n      polygonInRange.forEach((feature) => {\n        if (!polygonStats[feature.layerName]) {\n          polygonStats[feature.layerName] = 0;\n        }\n        polygonStats[feature.layerName]++;\n      });\n\n      // 創建回退模式的顯示名稱\n      const featureName = `等時分析範圍 ${pointId} (預估範圍)`;\n\n      // 創建圓圈要素（回退模式下的視覺表示）\n      const circleFeature = {\n        type: 'Feature',\n        geometry: {\n          type: 'Point', // 使用點幾何，在渲染時轉換為圓圈\n          coordinates: [lng, lat],\n        },\n        properties: {\n          id: pointId,\n          layerId: 'isochrone-analysis-layer',\n          type: 'isochrone-circle-analysis', // 標記為圓圈類型（非多邊形）\n          name: featureName,\n          radius: FALLBACK_RADIUS, // 圓圈半徑\n          pointsInRange: pointsInRange,\n          polygonInRange: polygonInRange,\n          layerStats: layerStats,\n          polygonStats: polygonStats,\n          // 屬性面板數據（簡化版）\n          propertyData: {\n            名稱: featureName,\n            範圍內點位數: pointsInRange.length,\n            範圍內多邊形數: polygonInRange.length,\n          },\n        },\n      };\n\n      // 創建分析點標記\n      const pointFeature = {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [lng, lat],\n        },\n        properties: {\n          id: `${pointId}_isochrone_analysis_point`,\n          layerId: 'isochrone-analysis-layer',\n          type: 'isochrone-point-analysis',\n          parentId: pointId,\n        },\n      };\n\n      // 添加要素到圖層\n      isochroneLayer.geoJsonData.features.push(circleFeature, pointFeature);\n\n      // 更新圖層統計\n      updateIsochroneAnalysisLayerData(isochroneLayer);\n\n      console.log(\n        `🔄 回退方案：創建 ${FALLBACK_RADIUS / 1000}km 圓圈分析，包含 ${pointsInRange.length} 個點位`\n      );\n\n      return {\n        pointId,\n        pointsInRange,\n        polygonInRange,\n        layerStats,\n        polygonStats,\n      };\n    };\n\n    const clearAnalysisLayer = () => {\n      const analysisLayer = findLayerById('analysis-layer');\n      if (analysisLayer) {\n        analysisLayer.geoJsonData.features = [];\n\n        // 更新圖層統計和表格數據\n        updateAnalysisLayerData(analysisLayer);\n\n        console.log('🗑️ 清除分析圖層數據');\n      }\n    };\n\n    /**\n     * 清除等時圈分析圖層的所有數據\n     *\n     * @description 此函數會移除等時圈分析圖層中的所有分析結果，\n     * 包括等時圈多邊形、分析點標記和相關統計數據。\n     * 通常在使用者需要重新開始分析或清空地圖時調用。\n     *\n     * @note 此操作無法撤銷，清除後需要重新創建分析點\n     *\n     * @example\n     * // 清除所有等時圈分析\n     * clearIsochroneAnalysisLayer();\n     */\n    const clearIsochroneAnalysisLayer = () => {\n      const isochroneLayer = findLayerById('isochrone-analysis-layer');\n      if (isochroneLayer) {\n        // 清空圖層中的所有要素\n        isochroneLayer.geoJsonData.features = [];\n\n        // 重新計算並更新圖層統計和表格數據\n        updateIsochroneAnalysisLayerData(isochroneLayer);\n\n        console.log('🗑️ 清除等時圈分析圖層數據');\n      } else {\n        console.warn('找不到等時圈分析圖層，無法執行清除操作');\n      }\n    };\n\n    // 🗑️ 刪除單個分析點 (Delete Single Analysis Point)\n    const deleteAnalysisPoint = (pointId) => {\n      const analysisLayer = findLayerById('analysis-layer');\n      if (!analysisLayer || !analysisLayer.geoJsonData) return;\n\n      // 過濾掉指定的分析圓圈和其對應的點\n      analysisLayer.geoJsonData.features = analysisLayer.geoJsonData.features.filter((feature) => {\n        const isTargetCircle =\n          feature.properties.type === 'circle-analysis' && feature.properties.id === pointId;\n        const isTargetPoint =\n          feature.properties.type === 'point-analysis' && feature.properties.parentId === pointId;\n        return !isTargetCircle && !isTargetPoint;\n      });\n\n      // 更新圖層統計和表格數據\n      updateAnalysisLayerData(analysisLayer);\n\n      console.log('🗑️ 刪除分析點:', pointId);\n    };\n\n    // 🗑️ 刪除單個等時圈分析點 (Delete Single Isochrone Analysis Point)\n    /**\n     * 刪除指定的等時圈分析點及其相關要素\n     *\n     * @description 此函數會移除指定編號的等時圈分析結果，包括：\n     * 1. 等時圈多邊形或圓圈（分析範圍的視覺表示）\n     * 2. 分析點標記（藍色加號圖標）\n     * 3. 更新相關的統計數據和表格數據\n     *\n     * @param {number|string} pointId - 要刪除的分析點編號\n     *\n     * @note 此操作會同時處理兩種類型的等時圈要素：\n     * - isochrone-polygon-analysis: 來自 ORS API 的真實等時圈多邊形\n     * - isochrone-circle-analysis: 回退模式的圓圈分析\n     *\n     * @example\n     * // 刪除編號為 3 的等時圈分析\n     * deleteIsochroneAnalysisPoint(3);\n     */\n    const deleteIsochroneAnalysisPoint = (pointId) => {\n      const isochroneLayer = findLayerById('isochrone-analysis-layer');\n      if (!isochroneLayer || !isochroneLayer.geoJsonData) {\n        console.warn('找不到等時圈分析圖層或其數據，無法執行刪除操作');\n        return;\n      }\n\n      // 過濾並移除指定的等時圈分析要素\n      // 需要移除三種相關的要素：\n      isochroneLayer.geoJsonData.features = isochroneLayer.geoJsonData.features.filter(\n        (feature) => {\n          // 1. 回退模式的圓圈分析\n          const isTargetCircle =\n            feature.properties.type === 'isochrone-circle-analysis' &&\n            feature.properties.id === pointId;\n\n          // 2. API 模式的多邊形分析\n          const isTargetPolygon =\n            feature.properties.type === 'isochrone-polygon-analysis' &&\n            feature.properties.id === pointId;\n\n          // 3. 分析點標記（藍色加號）\n          const isTargetPoint =\n            feature.properties.type === 'isochrone-point-analysis' &&\n            feature.properties.parentId === pointId;\n\n          // 保留不匹配的要素（即刪除匹配的要素）\n          return !isTargetCircle && !isTargetPolygon && !isTargetPoint;\n        }\n      );\n\n      // 重新計算並更新圖層統計和表格數據\n      updateIsochroneAnalysisLayerData(isochroneLayer);\n\n      console.log('🗑️ 刪除等時圈分析點:', pointId);\n    };\n\n    // 🗺️ ============ 路徑規劃圖層相關函數 (Route Planning Layer Functions) ============\n\n    /**\n     * 更新路徑規劃圖層的統計數據和表格數據\n     *\n     * @description 計算路徑規劃圖層中的路徑點數量，更新摘要統計和表格顯示數據。\n     * 路徑規劃在點選完成前被視為一筆資料，表格只顯示一筆記錄包含所有路徑點。\n     * 這個函數會在以下情況被調用：\n     * 1. 添加新的路徑規劃點後\n     * 2. 刪除路徑規劃點後\n     * 3. 清空路徑規劃圖層後\n     *\n     * @param {Object} routePlanningLayer - 路徑規劃圖層物件\n     *\n     * @example\n     * const routeLayer = findLayerById('route-planning-layer');\n     * updateRoutePlanningLayerData(routeLayer);\n     */\n    const updateRoutePlanningLayerData = (routePlanningLayer) => {\n      // 獲取已完成的路線\n      const completedRoutes = routePlanningLayer.geoJsonData.features.filter(\n        (f) => f.properties.type === 'route-line'\n      );\n\n      // 獲取當前正在規劃的路徑點（排除已完成的）\n      const currentRoutePoints = routePlanningLayer.geoJsonData.features.filter(\n        (f) => f.properties.type === 'route-planning-point' && f.properties.status !== 'completed'\n      );\n\n      // 計算總數量：已完成路線數 + (如果有正在規劃的點則+1)\n      const totalCount = completedRoutes.length + (currentRoutePoints.length > 0 ? 1 : 0);\n\n      // 更新摘要數據\n      if (completedRoutes.length > 0 || currentRoutePoints.length > 0) {\n        const totalDistance = completedRoutes.reduce(\n          (sum, route) => sum + (route.properties.distance || 0),\n          0\n        );\n        const totalDuration = completedRoutes.reduce(\n          (sum, route) => sum + (route.properties.duration || 0),\n          0\n        );\n\n        let description = '';\n        if (completedRoutes.length > 0 && currentRoutePoints.length > 0) {\n          description = `已完成 ${completedRoutes.length} 條路線，正在規劃第 ${completedRoutes.length + 1} 條路線（已選擇 ${currentRoutePoints.length} 個路徑點）`;\n        } else if (completedRoutes.length > 0) {\n          description = `已完成 ${completedRoutes.length} 條路線，總距離 ${totalDistance.toFixed(2)} 公里，總時間 ${totalDuration} 分鐘`;\n        } else {\n          description = `正在規劃第 1 條路線，已選擇 ${currentRoutePoints.length} 個路徑點`;\n        }\n\n        routePlanningLayer.summaryData = {\n          totalCount: totalCount,\n          type: '路徑規劃',\n          description: description,\n          lastUpdated: new Date().toISOString(),\n          coverage:\n            completedRoutes.length > 0\n              ? `${totalDistance.toFixed(2)} 公里`\n              : `${currentRoutePoints.length} 個路徑點`,\n        };\n      } else {\n        routePlanningLayer.summaryData = {\n          totalCount: 0,\n          type: '路徑規劃',\n          description: '尚未開始路徑規劃，點選地圖開始規劃路徑',\n          lastUpdated: new Date().toISOString(),\n          coverage: '0 條路線',\n        };\n      }\n\n      // 更新表格數據\n      const tableData = [];\n\n      // 添加已完成的路線\n      completedRoutes.forEach((route, index) => {\n        tableData.push({\n          '#': index + 1,\n          id: route.properties.id, // 🔥 添加正確的 feature ID 用於高亮顯示\n          名稱: route.properties.name || `路線 ${index + 1}`,\n          類型: '已完成路線',\n          起點: route.properties.startPointName || '起點',\n          終點: route.properties.endPointName || '終點',\n          路徑點數: route.properties.waypoints || 0,\n          總距離: `${route.properties.distance} 公里`,\n          預估時間: `${route.properties.duration} 分鐘`,\n          建立時間: new Date(route.properties.createdAt).toLocaleString('zh-TW'),\n          狀態: '已完成',\n        });\n      });\n\n      // 如果有正在規劃的路徑點，添加到表格\n      if (currentRoutePoints.length > 0) {\n        const firstPoint = currentRoutePoints[0];\n        const lastPoint = currentRoutePoints[currentRoutePoints.length - 1];\n\n        tableData.push({\n          '#': completedRoutes.length + 1,\n          id: firstPoint.properties.id, // 🔥 使用第一個路徑點的 ID 作為規劃中路線的代表\n          名稱: `路線 ${completedRoutes.length + 1}`,\n          類型: '規劃中',\n          起點: `${firstPoint.properties.name}`,\n          終點: currentRoutePoints.length > 1 ? `${lastPoint.properties.name}` : '同起點',\n          路徑點數: currentRoutePoints.length,\n          總距離: '-',\n          預估時間: '-',\n          建立時間: new Date(firstPoint.properties.createdAt).toLocaleString('zh-TW'),\n          狀態: '規劃中',\n        });\n      }\n\n      routePlanningLayer.tableData = tableData;\n    };\n\n    /**\n     * 添加路徑規劃點到地圖\n     *\n     * @description 在指定的經緯度位置添加一個路徑規劃點。\n     * 路徑規劃點將按添加順序進行編號，支援無限數量的路徑點添加。\n     *\n     * @param {number} lat - 緯度\n     * @param {number} lng - 經度\n     * @returns {string|null} - 成功時返回路徑點ID，失敗時返回null\n     *\n     * @example\n     * // 添加路徑規劃點\n     * const pointId = addRoutePlanningPoint(25.0330, 121.5654);\n     * if (pointId) {\n     *   console.log('成功添加路徑點:', pointId);\n     * }\n     */\n    const addRoutePlanningPoint = (lat, lng) => {\n      // 獲取路徑規劃圖層實例\n      const routePlanningLayer = findLayerById('route-planning-layer');\n      if (!routePlanningLayer) {\n        console.error('找不到路徑規劃圖層');\n        return null;\n      }\n\n      // 計算當前正在規劃的路徑點數量，用於生成順序編號（排除已完成的）\n      const currentPoints = routePlanningLayer.geoJsonData.features.filter(\n        (f) => f.properties.type === 'route-planning-point' && f.properties.status !== 'completed'\n      );\n      const nextOrder = currentPoints.length + 1;\n\n      // 生成唯一的路徑點ID\n      const pointId = `route_point_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      // 生成路徑點名稱\n      const pointName = `路徑點 ${nextOrder}`;\n\n      // 創建路徑規劃點的 GeoJSON 要素\n      const routePlanningPointFeature = {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [lng, lat], // GeoJSON 格式：[經度, 緯度]\n        },\n        properties: {\n          id: pointId, // 唯一識別編號\n          layerId: 'route-planning-layer', // 所屬圖層\n          type: 'route-planning-point', // 要素類型標記\n          name: pointName, // 顯示名稱\n          order: nextOrder, // 路徑點順序\n          latitude: lat, // 緯度（便於存取）\n          longitude: lng, // 經度（便於存取）\n          createdAt: new Date().toISOString(), // 建立時間\n        },\n      };\n\n      // 將新的路徑點添加到圖層數據中\n      routePlanningLayer.geoJsonData.features.push(routePlanningPointFeature);\n\n      // 更新圖層統計和表格數據\n      updateRoutePlanningLayerData(routePlanningLayer);\n\n      console.log(\n        `🗺️ 添加路徑規劃點 ${nextOrder}:`,\n        pointName,\n        `(${lat.toFixed(6)}, ${lng.toFixed(6)})`\n      );\n      console.log(\n        `📍 路徑規劃點已添加到圖層，總點數: ${routePlanningLayer.geoJsonData.features.length}`\n      );\n      console.log(`🎯 路徑規劃圖層可見性: ${routePlanningLayer.visible}`);\n\n      return pointId;\n    };\n\n    /**\n     * 清空路徑規劃圖層中的所有路徑點\n     *\n     * @description 移除路徑規劃圖層中的所有路徑規劃點，重置圖層狀態。\n     * 這個函數通常在用戶想要重新開始路徑規劃時使用。\n     *\n     * @example\n     * // 清空所有路徑規劃點\n     * clearRoutePlanningLayer();\n     */\n    const clearRoutePlanningLayer = (clearAll = false) => {\n      // 獲取路徑規劃圖層實例\n      const routePlanningLayer = findLayerById('route-planning-layer');\n      if (routePlanningLayer) {\n        if (clearAll) {\n          // 清空圖層中的所有要素（路徑點 + 路線）\n          routePlanningLayer.geoJsonData.features = [];\n          console.log('🗑️ 已清空路徑規劃圖層的所有內容（包括已完成的路線和路徑點）');\n        } else {\n          // 只清空當前正在規劃的路徑點，保留已完成的路線和已完成的路徑點\n          routePlanningLayer.geoJsonData.features = routePlanningLayer.geoJsonData.features.filter(\n            (f) =>\n              f.properties.type !== 'route-planning-point' || f.properties.status === 'completed'\n          );\n          console.log('🗑️ 已清空當前正在規劃的路徑點，保留已完成的路線和路徑點');\n        }\n\n        // 重新計算並更新圖層統計和表格數據\n        updateRoutePlanningLayerData(routePlanningLayer);\n      } else {\n        console.warn('找不到路徑規劃圖層，無法清空');\n      }\n    };\n\n    /**\n     * 刪除指定的路徑規劃點\n     *\n     * @description 根據點ID刪除特定的路徑規劃點，並重新整理剩餘路徑點的順序編號。\n     *\n     * @param {string} pointId - 要刪除的路徑點ID\n     *\n     * @example\n     * // 刪除特定的路徑規劃點\n     * deleteRoutePlanningPoint('route_point_1234567890_abc123');\n     */\n    const deleteRoutePlanningPoint = (pointId) => {\n      // 獲取路徑規劃圖層實例\n      const routePlanningLayer = findLayerById('route-planning-layer');\n      if (!routePlanningLayer || !routePlanningLayer.geoJsonData) {\n        console.warn('找不到路徑規劃圖層或其數據，無法執行刪除操作');\n        return;\n      }\n\n      // 過濾並移除指定的路徑規劃點\n      const originalCount = routePlanningLayer.geoJsonData.features.length;\n      routePlanningLayer.geoJsonData.features = routePlanningLayer.geoJsonData.features.filter(\n        (feature) => feature.properties.id !== pointId\n      );\n\n      // 檢查是否成功刪除\n      const newCount = routePlanningLayer.geoJsonData.features.length;\n      if (originalCount === newCount) {\n        console.warn('找不到指定的路徑規劃點:', pointId);\n        return;\n      }\n\n      // 重新整理剩餘路徑點的順序編號\n      const remainingPoints = routePlanningLayer.geoJsonData.features.filter(\n        (f) => f.properties.type === 'route-planning-point'\n      );\n\n      remainingPoints.forEach((point, index) => {\n        const newOrder = index + 1;\n        point.properties.order = newOrder;\n        point.properties.name = `路徑點 ${newOrder}`;\n      });\n\n      // 重新計算並更新圖層統計和表格數據\n      updateRoutePlanningLayerData(routePlanningLayer);\n\n      console.log('🗑️ 刪除路徑規劃點:', pointId);\n    };\n\n    /**\n     * 獲取所有路徑規劃點的坐標列表\n     *\n     * @description 返回當前所有路徑規劃點的坐標陣列，按順序排列，\n     * 可用於後續的路徑規劃API調用。\n     *\n     * @returns {Array<Array<number>>} - 坐標陣列，格式為 [[lng, lat], [lng, lat], ...]\n     *\n     * @example\n     * // 獲取路徑點坐標用於路徑規劃\n     * const coordinates = getRoutePlanningCoordinates();\n     * console.log('路徑點坐標:', coordinates);\n     * // 輸出: [[121.5654, 25.0330], [121.5700, 25.0350], ...]\n     */\n    const getRoutePlanningCoordinates = () => {\n      const routePlanningLayer = findLayerById('route-planning-layer');\n      if (!routePlanningLayer) {\n        console.warn('找不到路徑規劃圖層');\n        return [];\n      }\n\n      // 獲取正在規劃中的路徑規劃點，並按順序排序（排除已完成的）\n      const routePoints = routePlanningLayer.geoJsonData.features\n        .filter(\n          (f) => f.properties.type === 'route-planning-point' && f.properties.status !== 'completed'\n        )\n        .sort((a, b) => a.properties.order - b.properties.order);\n\n      // 提取坐標陣列\n      const coordinates = routePoints.map((point) => point.geometry.coordinates);\n\n      console.log(`📍 獲取 ${coordinates.length} 個路徑點坐標`);\n      return coordinates;\n    };\n\n    /**\n     * 使用 OpenRouteService Directions API 計算路徑\n     *\n     * @description 調用 ORS Directions API 計算多個路徑點之間的最佳路線，\n     * 返回包含路徑幾何、距離、時間等詳細信息的數據。\n     *\n     * @param {Array<Array<number>>} coordinates - 路徑點坐標陣列 [[lng, lat], ...]\n     * @param {string} profile - 交通方式 ('driving-car', 'cycling-regular', 'foot-walking')\n     * @returns {Promise<Object>} - ORS Directions API 響應數據\n     *\n     * @throws {Error} - 當 API 調用失敗時拋出錯誤\n     *\n     * @example\n     * const coordinates = [[121.5654, 25.0330], [121.5700, 25.0350]];\n     * const routeData = await fetchRouteDirections(coordinates, 'driving-car');\n     * console.log('路徑距離:', routeData.features[0].properties.summary.distance, '公尺');\n     */\n    const fetchRouteDirections = async (coordinates, profile = 'driving-car') => {\n      const apiKey = '5b3ce3597851110001cf6248cd3e1a052bec45bc8410b037091bb766';\n\n      if (!coordinates || coordinates.length < 2) {\n        throw new Error('路徑規劃至少需要2個路徑點');\n      }\n\n      try {\n        console.log(`🛣️ 開始計算路徑，使用 ${coordinates.length} 個路徑點`);\n        console.log('路徑點坐標:', coordinates);\n\n        // 使用正確的 API URL 格式 (包含 /geojson)\n        const apiUrl = `https://api.openrouteservice.org/v2/directions/${profile}/geojson`;\n\n        const response = await fetch(apiUrl, {\n          method: 'POST',\n          headers: {\n            Accept:\n              'application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8',\n            'Content-Type': 'application/json',\n            Authorization: apiKey,\n          },\n          body: JSON.stringify({\n            coordinates: coordinates,\n          }),\n        });\n\n        if (!response.ok) {\n          let errorMessage = `HTTP ${response.status}`;\n          try {\n            const errorData = await response.json();\n            if (errorData.error && errorData.error.message) {\n              errorMessage = errorData.error.message;\n            }\n          } catch (parseError) {\n            // 如果無法解析錯誤響應，使用狀態碼\n            errorMessage = `HTTP ${response.status} - ${response.statusText}`;\n          }\n          throw new Error(`ORS API 錯誤: ${errorMessage}`);\n        }\n\n        const data = await response.json();\n\n        if (!data.features || data.features.length === 0) {\n          throw new Error('API 返回的路徑數據為空');\n        }\n\n        console.log('✅ 路徑計算成功');\n        console.log(\n          `📏 路徑距離: ${(data.features[0].properties.summary.distance / 1000).toFixed(2)} 公里`\n        );\n        console.log(\n          `⏱️ 預估時間: ${Math.round(data.features[0].properties.summary.duration / 60)} 分鐘`\n        );\n\n        return data;\n      } catch (error) {\n        console.error('🚫 路徑計算失敗:', error);\n        throw error;\n      }\n    };\n\n    /**\n     * 計算並繪製路徑規劃路線\n     *\n     * @description 使用當前的路徑規劃點計算最佳路線，並將路線添加到地圖圖層中。\n     * 同時更新圖層統計數據，包含路線長度、預估時間等信息。\n     *\n     * @param {string} profile - 交通方式，預設為 'driving-car'\n     * @returns {Promise<Object|null>} - 成功時返回路線數據，失敗時返回 null\n     *\n     * @example\n     * // 計算並繪製駕車路線\n     * const routeResult = await calculateAndDrawRoute('driving-car');\n     * if (routeResult) {\n     *   console.log('路線已繪製，距離:', routeResult.distance, '公里');\n     * }\n     */\n    const calculateAndDrawRoute = async (profile = 'driving-car') => {\n      const routePlanningLayer = findLayerById('route-planning-layer');\n      if (!routePlanningLayer) {\n        console.error('找不到路徑規劃圖層');\n        return null;\n      }\n\n      // 獲取路徑點坐標\n      const coordinates = getRoutePlanningCoordinates();\n      if (coordinates.length < 2) {\n        console.warn('⚠️ 路徑規劃至少需要2個點，目前只有', coordinates.length, '個點');\n        return null;\n      }\n\n      try {\n        console.log('🚀 開始路徑規劃計算...');\n\n        // 調用 ORS Directions API\n        const routeData = await fetchRouteDirections(coordinates, profile);\n        const route = routeData.features[0];\n        const summary = route.properties.summary;\n\n        // 獲取當前路徑點（在清除前保存信息）\n        const currentRoutePoints = routePlanningLayer.geoJsonData.features.filter(\n          (f) => f.properties.type === 'route-planning-point'\n        );\n\n        const firstPoint = currentRoutePoints[0];\n        const lastPoint = currentRoutePoints[currentRoutePoints.length - 1];\n\n        // 計算路線統計\n        const distanceKm = (summary.distance / 1000).toFixed(2);\n        const durationMin = Math.round(summary.duration / 60);\n\n        // 獲取已完成的路線數量，用於生成路線編號\n        const existingRoutes = routePlanningLayer.geoJsonData.features.filter(\n          (f) => f.properties.type === 'route-line'\n        );\n        const routeNumber = existingRoutes.length + 1;\n        const routeId = `route_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n        // 創建路線 GeoJSON 要素\n        const routeFeature = {\n          type: 'Feature',\n          geometry: route.geometry, // 直接使用 ORS 返回的幾何數據\n          properties: {\n            id: routeId,\n            layerId: 'route-planning-layer',\n            type: 'route-line',\n            name: `路線 ${routeNumber}`,\n            routeNumber: routeNumber, // 路線編號\n            distance: parseFloat(distanceKm), // 距離（公里）\n            duration: durationMin, // 時間（分鐘）\n            profile: profile, // 交通方式\n            waypoints: coordinates.length, // 路徑點數量\n            startPointName: firstPoint.properties.name, // 起點名稱\n            endPointName: lastPoint.properties.name, // 終點名稱\n            createdAt: new Date().toISOString(),\n          },\n        };\n\n        // 添加完成的路線到圖層\n        routePlanningLayer.geoJsonData.features.push(routeFeature);\n\n        // 🔥 修改：將當前路徑規劃點標記為已完成，但保留在地圖上\n        routePlanningLayer.geoJsonData.features.forEach((feature) => {\n          if (feature.properties.type === 'route-planning-point') {\n            // 將路徑點標記為已完成，關聯到對應的路線\n            feature.properties.status = 'completed';\n            feature.properties.routeId = routeId;\n            feature.properties.routeNumber = routeNumber;\n          }\n        });\n\n        // 更新圖層數據（現在只有已完成的路線）\n        updateRoutePlanningLayerData(routePlanningLayer);\n\n        console.log(`✅ 路徑規劃完成！`);\n        console.log(`📏 總距離: ${distanceKm} 公里`);\n        console.log(`⏱️ 預估時間: ${durationMin} 分鐘`);\n        console.log(`🛣️ 交通方式: ${profile}`);\n\n        return {\n          routeId,\n          routeNumber: routeNumber,\n          distance: parseFloat(distanceKm),\n          duration: durationMin,\n          waypoints: coordinates.length,\n          profile,\n          geometry: route.geometry,\n        };\n      } catch (error) {\n        console.error('❌ 路徑規劃失敗:', error);\n\n        // 錯誤時更新圖層狀態\n        routePlanningLayer.summaryData.description = `路徑規劃失敗: ${error.message}`;\n\n        return null;\n      }\n    };\n\n    // 🗺️ ============ 路徑優化相關函數 (Route Optimization Functions) ============\n\n    /**\n     * 添加路徑優化點\n     *\n     * @description 在地圖上添加一個新的路徑優化點，用於路徑優化計算\n     * @param {number} lat - 緯度\n     * @param {number} lng - 經度\n     * @returns {string|null} 路徑優化點的唯一ID，失敗時返回null\n     *\n     * @example\n     * // 添加路徑優化點\n     * const pointId = addRouteOptimizationPoint(25.0330, 121.5654);\n     * if (pointId) {\n     *   console.log('成功添加優化點:', pointId);\n     * }\n     */\n    const addRouteOptimizationPoint = (lat, lng) => {\n      // 獲取路徑優化圖層實例\n      const routeOptimizationLayer = findLayerById('route-optimization-layer');\n      if (!routeOptimizationLayer) {\n        console.error('找不到路徑優化圖層');\n        return null;\n      }\n\n      // 計算當前正在優化的點數量，用於生成順序編號（排除已完成的）\n      const currentPoints = routeOptimizationLayer.geoJsonData.features.filter(\n        (f) => f.properties.type === 'optimization-point' && f.properties.status !== 'completed'\n      );\n      const nextOrder = currentPoints.length + 1;\n\n      // 生成唯一的優化點ID\n      const pointId = `optimization_point_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      // 生成優化點名稱\n      const pointName = `優化點 ${nextOrder}`;\n\n      // 創建路徑優化點的 GeoJSON 要素\n      const routeOptimizationPointFeature = {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [lng, lat], // GeoJSON 格式：[經度, 緯度]\n        },\n        properties: {\n          id: pointId, // 唯一識別編號\n          layerId: 'route-optimization-layer', // 所屬圖層\n          type: 'optimization-point', // 要素類型標記\n          name: pointName, // 顯示名稱\n          order: nextOrder, // 優化點順序\n          latitude: lat, // 緯度（便於存取）\n          longitude: lng, // 經度（便於存取）\n          createdAt: new Date().toISOString(), // 建立時間\n        },\n      };\n\n      // 將新的優化點添加到圖層數據中\n      routeOptimizationLayer.geoJsonData.features.push(routeOptimizationPointFeature);\n\n      // 更新圖層統計和表格數據（與路徑規劃點行為一致）\n      updateRouteOptimizationLayerData(routeOptimizationLayer);\n\n      console.log(\n        `🗺️ 添加路徑優化點 ${nextOrder}:`,\n        pointName,\n        `(${lat.toFixed(6)}, ${lng.toFixed(6)})`\n      );\n      console.log(\n        `📍 路徑優化點已添加到圖層，總點數: ${routeOptimizationLayer.geoJsonData.features.length}`\n      );\n      console.log(`🎯 路徑優化圖層可見性: ${routeOptimizationLayer.visible}`);\n\n      return pointId;\n    };\n\n    /**\n     * 清空路徑優化圖層中的所有優化點\n     *\n     * @description 移除路徑優化圖層中的所有優化點，重置圖層狀態。\n     * 這個函數通常在用戶想要重新開始路徑優化時使用。\n     *\n     * @example\n     * // 清空所有優化點\n     * clearRouteOptimizationLayer();\n     */\n    const clearRouteOptimizationLayer = (clearAll = false) => {\n      // 獲取路徑優化圖層實例\n      const routeOptimizationLayer = findLayerById('route-optimization-layer');\n      if (routeOptimizationLayer) {\n        if (clearAll) {\n          // 清空圖層中的所有要素（優化點 + 優化路線）\n          routeOptimizationLayer.geoJsonData.features = [];\n          console.log('🗑️ 已清空路徑優化圖層的所有內容（包括已完成的優化路線和優化點）');\n        } else {\n          // 只清空當前正在優化的點，保留已完成的優化路線和已完成的優化點\n          routeOptimizationLayer.geoJsonData.features =\n            routeOptimizationLayer.geoJsonData.features.filter(\n              (f) =>\n                f.properties.type !== 'optimization-point' || f.properties.status === 'completed'\n            );\n          console.log('🗑️ 已清空當前正在優化的點，保留已完成的優化路線和優化點');\n        }\n\n        // 重新計算並更新圖層統計和表格數據\n        updateRouteOptimizationLayerData(routeOptimizationLayer);\n      } else {\n        console.warn('找不到路徑優化圖層，無法清空');\n      }\n    };\n\n    /**\n     * 獲取路徑優化點的坐標\n     *\n     * @description 獲取當前路徑優化圖層中所有優化點的坐標，用於路徑優化計算\n     * @returns {Array} 坐標數組，每個元素為 [經度, 緯度]\n     *\n     * @example\n     * // 獲取優化點坐標\n     * const coordinates = getRouteOptimizationCoordinates();\n     * console.log('優化點坐標:', coordinates);\n     */\n    const getRouteOptimizationCoordinates = () => {\n      const routeOptimizationLayer = findLayerById('route-optimization-layer');\n      if (!routeOptimizationLayer) {\n        console.warn('找不到路徑優化圖層');\n        return [];\n      }\n\n      // 獲取正在優化中的優化點，並按順序排序（排除已完成的）\n      const optimizationPoints = routeOptimizationLayer.geoJsonData.features\n        .filter(\n          (f) => f.properties.type === 'optimization-point' && f.properties.status !== 'completed'\n        )\n        .sort((a, b) => a.properties.order - b.properties.order);\n\n      // 提取坐標\n      return optimizationPoints.map((point) => point.geometry.coordinates);\n    };\n\n    /**\n     * 更新路徑優化圖層的統計和表格數據\n     *\n     * @description 根據圖層中的要素更新摘要統計和表格數據\n     * @param {Object} routeOptimizationLayer - 路徑優化圖層實例\n     */\n    const updateRouteOptimizationLayerData = (routeOptimizationLayer) => {\n      // 獲取已完成的優化路線\n      const completedRoutes = routeOptimizationLayer.geoJsonData.features.filter(\n        (f) => f.properties.type === 'optimized-route-line'\n      );\n\n      // 獲取當前正在優化的點（排除已完成的）\n      const currentOptimizationPoints = routeOptimizationLayer.geoJsonData.features.filter(\n        (f) => f.properties.type === 'optimization-point' && f.properties.status !== 'completed'\n      );\n\n      // 計算總數量：已完成路線數 + (如果有正在優化的點則+1)\n      const totalCount = completedRoutes.length + (currentOptimizationPoints.length > 0 ? 1 : 0);\n\n      // 更新摘要數據\n      if (completedRoutes.length > 0 || currentOptimizationPoints.length > 0) {\n        const totalDistance = completedRoutes.reduce(\n          (sum, route) => sum + (route.properties.distance || 0),\n          0\n        );\n        const totalDuration = completedRoutes.reduce(\n          (sum, route) => sum + (route.properties.duration || 0),\n          0\n        );\n\n        let description = '';\n        if (completedRoutes.length > 0 && currentOptimizationPoints.length > 0) {\n          description = `已完成 ${completedRoutes.length} 條優化路線，正在規劃第 ${completedRoutes.length + 1} 條路線（已選擇 ${currentOptimizationPoints.length} 個優化點）`;\n        } else if (completedRoutes.length > 0) {\n          description = `已完成 ${completedRoutes.length} 條優化路線，總距離 ${totalDistance.toFixed(2)} 公里，總時間 ${totalDuration} 分鐘`;\n        } else {\n          description = `正在規劃第 1 條優化路線，已選擇 ${currentOptimizationPoints.length} 個優化點`;\n        }\n\n        routeOptimizationLayer.summaryData = {\n          totalCount: totalCount,\n          type: '路徑優化',\n          description: description,\n          lastUpdated: new Date().toISOString(),\n          coverage:\n            completedRoutes.length > 0\n              ? `${totalDistance.toFixed(2)} 公里`\n              : `${currentOptimizationPoints.length} 個優化點`,\n        };\n      } else {\n        routeOptimizationLayer.summaryData = {\n          totalCount: 0,\n          type: '路徑優化',\n          description: '尚未開始路徑優化，點選地圖開始選擇優化點',\n          lastUpdated: new Date().toISOString(),\n          coverage: '0 條路線',\n        };\n      }\n\n      // 更新表格數據\n      const tableData = [];\n\n      // 添加已完成的優化路線\n      completedRoutes.forEach((route, index) => {\n        tableData.push({\n          '#': index + 1,\n          id: route.properties.id,\n          名稱: route.properties.name || `優化路線 ${index + 1}`,\n          類型: '已完成路線',\n          起點: '起點',\n          終點: '終點',\n          路徑點數: route.properties.waypoints || 0,\n          總距離: `${route.properties.distance} 公里`,\n          預估時間: `${route.properties.duration} 分鐘`,\n          建立時間: new Date(route.properties.createdAt).toLocaleString('zh-TW'),\n          狀態: '已完成',\n        });\n      });\n\n      // 如果有正在優化的點，添加到表格\n      if (currentOptimizationPoints.length > 0) {\n        const firstPoint = currentOptimizationPoints[0];\n        const lastPoint = currentOptimizationPoints[currentOptimizationPoints.length - 1];\n\n        tableData.push({\n          '#': completedRoutes.length + 1,\n          id: firstPoint.properties.id,\n          名稱: `優化路線 ${completedRoutes.length + 1}`,\n          類型: '規劃中',\n          起點: `${firstPoint.properties.name}`,\n          終點: currentOptimizationPoints.length > 1 ? `${lastPoint.properties.name}` : '同起點',\n          路徑點數: currentOptimizationPoints.length,\n          總距離: '-',\n          預估時間: '-',\n          建立時間: new Date(firstPoint.properties.createdAt).toLocaleString('zh-TW'),\n          狀態: '規劃中',\n        });\n      }\n\n      routeOptimizationLayer.tableData = tableData;\n    };\n\n    /**\n     * 計算並繪製優化路線\n     *\n     * @description 使用 OpenRouteService Optimization API 計算最佳訪問順序並繪製優化路線\n     * @param {string} profile - 交通方式，預設為 'driving-car'\n     * @returns {Object|null} 優化結果，包含距離、時間、優化順序等，失敗時返回null\n     *\n     * @example\n     * // 計算並繪製優化路線\n     * const optimizationResult = await calculateAndDrawOptimizedRoute('driving-car');\n     * if (optimizationResult) {\n     *   console.log('優化路線已繪製，距離:', optimizationResult.distance, '公里');\n     * }\n     */\n    const calculateAndDrawOptimizedRoute = async (profile = 'driving-car') => {\n      const routeOptimizationLayer = findLayerById('route-optimization-layer');\n      if (!routeOptimizationLayer) {\n        console.error('找不到路徑優化圖層');\n        return null;\n      }\n\n      // 獲取優化點坐標\n      const coordinates = getRouteOptimizationCoordinates();\n      if (coordinates.length < 2) {\n        console.warn('⚠️ 路徑優化至少需要2個點，目前只有', coordinates.length, '個點');\n        return null;\n      }\n\n      try {\n        console.log('🚀 開始路徑優化計算...');\n\n        // 調用 ORS Optimization API\n        const optimizationData = await fetchRouteOptimization(coordinates, profile);\n\n        // 處理優化結果中的每條路線\n        const routeFeatures = [];\n        let totalDistanceKm = 0;\n        let totalDurationMin = 0;\n\n        console.log('🔍 調試優化結果:');\n        console.log('總路線數:', optimizationData.routes.length);\n        console.log('原始優化點數:', coordinates.length);\n\n        for (let i = 0; i < optimizationData.routes.length; i++) {\n          const route = optimizationData.routes[i];\n          console.log(`🚗 處理路線 ${i + 1}:`, route);\n          console.log('路線步驟數:', route.steps.length);\n\n          // 構建優化後的訪問順序坐標和對應的點信息\n          const optimizedCoordinates = [];\n          const optimizedPointInfo = [];\n\n          // 用於追蹤已經處理過的點，避免重複\n          const processedPointIds = new Set();\n\n          console.log('🔍 詳細步驟分析:');\n\n          // 1. 構建完整路線坐標（包含所有步驟：start, job, end）\n          route.steps.forEach((step, stepIndex) => {\n            console.log(`  步驟 ${stepIndex + 1}:`, {\n              type: step.type,\n              location: step.location,\n              id: step.id,\n              job: step.job,\n            });\n            optimizedCoordinates.push(step.location);\n          });\n\n          // 2. 建立完整的優化訪問順序：起點 → API優化的中間點 → 終點\n          // 按照 route.steps 的順序來建立 optimizedPointInfo（包含所有步驟）\n          console.log(`📊 處理所有步驟，共 ${route.steps.length} 個步驟`);\n\n          route.steps.forEach((step, stepIndex) => {\n            console.log(`  處理步驟 ${stepIndex + 1}:`, {\n              type: step.type,\n              location: step.location,\n              id: step.id,\n              job: step.job,\n            });\n\n            // 找到對應的原始優化點（使用更大的容差匹配，避免浮點數精度問題）\n            const originalPoint = routeOptimizationLayer.geoJsonData.features.find((f) => {\n              if (f.properties.type !== 'optimization-point') return false;\n              const tolerance = 0.0001; // 約10米的容差，避免精度問題\n              const lonDiff = Math.abs(f.geometry.coordinates[0] - step.location[0]);\n              const latDiff = Math.abs(f.geometry.coordinates[1] - step.location[1]);\n              return lonDiff < tolerance && latDiff < tolerance;\n            });\n\n            if (originalPoint) {\n              // 檢查是否已經處理過這個點\n              if (!processedPointIds.has(originalPoint.properties.id)) {\n                processedPointIds.add(originalPoint.properties.id);\n                optimizedPointInfo.push({\n                  order: originalPoint.properties.order,\n                  name: originalPoint.properties.name,\n                  coordinates: originalPoint.geometry.coordinates, // 使用原始點的坐標\n                  stepType: step.type, // 記錄步驟類型（start, job, end）\n                  visitOrder: stepIndex + 1, // 記錄訪問順序\n                });\n                console.log(\n                  `✅ 找到匹配點: ${originalPoint.properties.name} (${originalPoint.properties.order}) - ${step.type}`\n                );\n              } else {\n                console.log(\n                  `🔄 跳過重複點: ${originalPoint.properties.name} (${originalPoint.properties.order})`\n                );\n              }\n            } else {\n              console.warn(\n                `⚠️ 未找到匹配的原始點: [${step.location[0]}, ${step.location[1]}] - ${step.type}`\n              );\n              // 如果找不到匹配點，創建一個臨時點信息\n              optimizedPointInfo.push({\n                order: optimizedPointInfo.length + 1,\n                name: `${step.type === 'start' ? '起點' : step.type === 'end' ? '終點' : '未知點'} ${optimizedPointInfo.length + 1}`,\n                coordinates: step.location,\n                stepType: step.type,\n                visitOrder: stepIndex + 1,\n              });\n            }\n          });\n\n          // 4. 檢查是否有遺漏的點（確保所有用戶點擊的點都被包含）\n          const allUserPoints = routeOptimizationLayer.geoJsonData.features.filter(\n            (f) => f.properties.type === 'optimization-point' && f.properties.status !== 'completed'\n          );\n\n          console.log(\n            `🔍 檢查遺漏點: 用戶點擊了 ${allUserPoints.length} 個點，已匹配 ${optimizedPointInfo.length} 個點`\n          );\n          console.log(\n            '🔍 所有用戶點:',\n            allUserPoints.map((p) => ({\n              order: p.properties.order,\n              name: p.properties.name,\n              coords: p.geometry.coordinates,\n            }))\n          );\n          console.log(\n            '🔍 已匹配點:',\n            optimizedPointInfo.map((p) => ({\n              order: p.order,\n              name: p.name,\n              coords: p.coordinates,\n            }))\n          );\n\n          // 如果匹配的點數少於用戶點擊的點數，嘗試匹配遺漏的點\n          if (optimizedPointInfo.length < allUserPoints.length) {\n            allUserPoints.forEach((userPoint) => {\n              // 檢查這個用戶點是否已經在 optimizedPointInfo 中\n              const isAlreadyMatched = optimizedPointInfo.some((info) => {\n                const tolerance = 0.0001; // 約10米的容差，與上面保持一致\n                const lonDiff = Math.abs(info.coordinates[0] - userPoint.geometry.coordinates[0]);\n                const latDiff = Math.abs(info.coordinates[1] - userPoint.geometry.coordinates[1]);\n                return lonDiff < tolerance && latDiff < tolerance;\n              });\n\n              if (!isAlreadyMatched) {\n                optimizedPointInfo.push({\n                  order: userPoint.properties.order,\n                  name: userPoint.properties.name,\n                  coordinates: userPoint.geometry.coordinates,\n                });\n                console.log(\n                  `✅ 補充遺漏點: ${userPoint.properties.name} (${userPoint.properties.order})`\n                );\n              }\n            });\n          }\n\n          console.log(`📊 路線 ${i + 1} 處理結果:`);\n          console.log('  優化坐標數:', optimizedCoordinates.length);\n          console.log('  匹配點信息數:', optimizedPointInfo.length);\n          console.log('  匹配點信息:', optimizedPointInfo);\n\n          // 如果有足夠的點，調用 Directions API 獲取實際路線幾何\n          let routeGeometry = { type: 'LineString', coordinates: [] };\n          let routeDistance = 0;\n          let routeDuration = 0;\n\n          if (optimizedCoordinates.length >= 2) {\n            try {\n              const directionsData = await fetchRouteDirections(optimizedCoordinates, profile);\n              if (directionsData && directionsData.features && directionsData.features.length > 0) {\n                const feature = directionsData.features[0];\n                routeGeometry = feature.geometry;\n                routeDistance = (feature.properties.summary.distance / 1000).toFixed(2);\n                routeDuration = Math.round(feature.properties.summary.duration / 60);\n              }\n            } catch (error) {\n              console.warn('無法獲取路線幾何，使用直線連接:', error);\n              // 如果 Directions API 失敗，使用直線連接\n              routeGeometry = {\n                type: 'LineString',\n                coordinates: optimizedCoordinates,\n              };\n              routeDistance = (route.duration / 1000).toFixed(2); // 使用優化結果的估算\n              routeDuration = Math.round(route.duration / 60);\n            }\n          }\n\n          totalDistanceKm += parseFloat(routeDistance);\n          totalDurationMin += routeDuration;\n\n          // 獲取已完成的優化路線數量，用於生成路線編號\n          const existingRoutes = routeOptimizationLayer.geoJsonData.features.filter(\n            (f) => f.properties.type === 'optimized-route-line'\n          );\n          const routeNumber = existingRoutes.length + i + 1;\n          const routeId = `optimized_route_${Date.now()}_${i}_${Math.random().toString(36).substr(2, 9)}`;\n\n          // 創建優化路線 GeoJSON 要素\n          const routeFeature = {\n            type: 'Feature',\n            geometry: routeGeometry,\n            properties: {\n              id: routeId,\n              layerId: 'route-optimization-layer',\n              type: 'optimized-route-line',\n              name: `優化路線 ${routeNumber}`,\n              routeNumber: routeNumber,\n              vehicleId: route.vehicle,\n              distance: parseFloat(routeDistance),\n              duration: routeDuration,\n              profile: profile,\n              waypoints: optimizedPointInfo.length, // 只計算實際的優化點數量\n              optimizedOrder: optimizedCoordinates,\n              optimizedPointInfo: optimizedPointInfo,\n              createdAt: new Date().toISOString(),\n            },\n          };\n\n          routeFeatures.push(routeFeature);\n        }\n\n        // 添加所有優化路線到圖層\n        routeFeatures.forEach((routeFeature) => {\n          routeOptimizationLayer.geoJsonData.features.push(routeFeature);\n        });\n\n        // 將當前優化點標記為已完成，但保留在地圖上\n        routeOptimizationLayer.geoJsonData.features.forEach((feature) => {\n          if (feature.properties.type === 'optimization-point') {\n            // 將優化點標記為已完成\n            feature.properties.status = 'completed';\n          }\n        });\n\n        // 更新圖層數據\n        updateRouteOptimizationLayerData(routeOptimizationLayer);\n\n        console.log(`✅ 路徑優化完成！`);\n        console.log(`📏 總優化距離: ${totalDistanceKm.toFixed(2)} 公里`);\n        console.log(`⏱️ 總優化時間: ${totalDurationMin} 分鐘`);\n        console.log(`🚗 共生成 ${routeFeatures.length} 條優化路線`);\n        console.log(`🛣️ 交通方式: ${profile}`);\n\n        return {\n          routeCount: routeFeatures.length,\n          totalDistance: totalDistanceKm,\n          totalDuration: totalDurationMin,\n          waypoints: coordinates.length,\n          profile,\n          routes: routeFeatures.map((f) => ({\n            id: f.properties.id,\n            name: f.properties.name,\n            distance: f.properties.distance,\n            duration: f.properties.duration,\n          })),\n        };\n      } catch (error) {\n        console.error('❌ 路徑優化失敗:', error);\n\n        // 錯誤時更新圖層狀態\n        routeOptimizationLayer.summaryData.description = `路徑優化失敗: ${error.message}`;\n\n        return null;\n      }\n    };\n\n    /**\n     * 調用 OpenRouteService Optimization API\n     *\n     * @description 使用 XMLHttpRequest 調用 ORS Optimization API 進行路徑優化\n     * @param {Array} coordinates - 坐標數組，每個元素為 [經度, 緯度]\n     * @param {string} profile - 交通方式\n     * @returns {Object} 優化結果\n     */\n    const fetchRouteOptimization = async (coordinates, profile = 'driving-car') => {\n      const apiKey = '5b3ce3597851110001cf6248cd3e1a052bec45bc8410b037091bb766';\n\n      if (!coordinates || coordinates.length < 2) {\n        throw new Error('路徑優化至少需要2個優化點');\n      }\n\n      try {\n        console.log(`🔄 開始路徑優化計算，使用 ${coordinates.length} 個優化點`);\n        console.log('優化點坐標:', coordinates);\n\n        // 構建請求體（按照正確的API格式）\n        const requestBody = {\n          // 1. JOBS: 定義所有必須完成的任務（第2到第n-1個點）\n          jobs: coordinates.slice(1, -1).map((coord, index) => ({\n            id: index + 1,\n            location: coord,\n          })),\n          // 2. VEHICLES: 定義執行任務的車輛\n          vehicles: [\n            {\n              id: 1,\n              profile: profile,\n              start: coordinates[0], // 第1個點作為起點\n              end: coordinates[coordinates.length - 1], // 第n個點作為終點\n            },\n          ],\n        };\n\n        // 使用 fetch API 調用 ORS Optimization API（與路徑規劃一致）\n        const apiUrl = 'https://api.openrouteservice.org/optimization';\n\n        const response = await fetch(apiUrl, {\n          method: 'POST',\n          headers: {\n            Accept:\n              'application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8',\n            'Content-Type': 'application/json',\n            Authorization: apiKey,\n          },\n          body: JSON.stringify(requestBody),\n        });\n\n        if (!response.ok) {\n          let errorMessage = `HTTP ${response.status}`;\n          try {\n            const errorData = await response.json();\n            if (errorData.error && errorData.error.message) {\n              errorMessage = errorData.error.message;\n            }\n          } catch (parseError) {\n            // 如果無法解析錯誤響應，使用狀態碼\n            errorMessage = `HTTP ${response.status} - ${response.statusText}`;\n          }\n          throw new Error(`ORS API 錯誤: ${errorMessage}`);\n        }\n\n        const data = await response.json();\n\n        if (data.code === 0 && data.routes && data.routes.length > 0) {\n          console.log('✅ 路徑優化計算成功');\n          console.log(\n            `📊 總計: ${data.summary.routes} 條路線，總成本: ${data.summary.cost}，總時間: ${Math.round(data.summary.duration / 60)} 分鐘`\n          );\n\n          // 返回優化結果（包含所有路線）\n          const result = {\n            ...data,\n            summary: data.summary,\n            routes: data.routes,\n            unassigned: data.unassigned || [],\n          };\n\n          console.log('🔄 優化結果:', result);\n\n          return result;\n        } else {\n          throw new Error('API 返回的優化數據為空或無效');\n        }\n      } catch (error) {\n        console.error('🚫 路徑優化計算失敗:', error);\n        throw error;\n      }\n    };\n\n    return {\n      layers,\n      findLayerById, // 根據 ID 尋找圖層\n      getAllLayers, // 獲取所有圖層的扁平陣列\n      toggleLayerVisibility,\n      selectedFeature,\n      setSelectedFeature,\n      clearSelectedFeature,\n      addAnalysisPoint, // 添加分析點\n      clearAnalysisLayer, // 清除分析圖層\n      deleteAnalysisPoint, // 刪除單個分析點\n      addIsochroneAnalysisPoint, // 添加等時圈分析點\n      clearIsochroneAnalysisLayer, // 清除等時圈分析圖層\n      deleteIsochroneAnalysisPoint, // 刪除單個等時圈分析點\n      addRoutePlanningPoint, // 添加路徑規劃點\n      clearRoutePlanningLayer, // 清除路徑規劃圖層\n      deleteRoutePlanningPoint, // 刪除單個路徑規劃點\n      getRoutePlanningCoordinates, // 獲取路徑規劃點坐標\n      calculateAndDrawRoute, // 計算並繪製路徑規劃路線\n\n      // 🗺️ 路徑優化相關函數\n      addRouteOptimizationPoint, // 添加路徑優化點\n      clearRouteOptimizationLayer, // 清除路徑優化圖層\n      getRouteOptimizationCoordinates, // 獲取路徑優化點坐標\n      calculateAndDrawOptimizedRoute, // 計算並繪製優化路線\n\n      calculatePointsInRange, // 計算範圍內的點\n      calculatePolygonInRange, // 計算範圍內的多邊形\n      visibleLayers: computed(() => getAllLayers().filter((layer) => layer.visible)),\n      loadingLayers: computed(() => getAllLayers().filter((layer) => layer.isLoading)),\n    };\n  },\n  {\n    persist: true,\n  }\n);\n","<script>\n  export default {\n    name: 'LoadingOverlay',\n\n    /**\n     * 🔧 組件屬性定義 (Component Props)\n     * 接收來自父組件的載入狀態和配置選項\n     */\n    props: {\n      /** ⏳ 是否顯示載入覆蓋層 */\n      isVisible: {\n        type: Boolean,\n        default: false,\n        required: true,\n      },\n      /** 📝 載入過程的主要文字描述 */\n      loadingText: {\n        type: String,\n        default: '載入中...',\n      },\n      /** 📊 載入進度百分比 (0-100) */\n      progress: {\n        type: Number,\n        default: -1,\n        validator: (value) => value >= -1 && value <= 100,\n      },\n      /** 📊 是否顯示進度條 */\n      showProgress: {\n        type: Boolean,\n        default: false,\n      },\n      /** 📝 輔助說明文字 (可選) */\n      subText: {\n        type: String,\n        default: '',\n      },\n    },\n  };\n</script>\n\n<template>\n  <!-- ⏳ 載入覆蓋層組件 (Loading Overlay Component) -->\n  <!-- 在資料載入時顯示，提供視覺化的載入進度回饋和狀態提示 -->\n  <div\n    class=\"position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center\"\n    style=\"background-color: rgba(0, 0, 0, 0.7); z-index: 9999\"\n    v-if=\"isVisible\"\n  >\n    <!-- 📄 載入內容卡片 (Loading Content Card) -->\n    <!-- 包含載入動畫、文字提示、進度條等元素的中央卡片 -->\n    <div\n      class=\"text-center my-bgcolor-white p-4 rounded shadow\"\n      style=\"min-width: 300px; max-width: 400px\"\n    >\n      <!-- ⏳ 載入動畫圓環 (Loading Animation Spinner) -->\n      <!-- Bootstrap 提供的圓形載入動畫，表示系統正在處理請求 -->\n      <div class=\"spinner-border text-primary mb-3\" style=\"width: 2rem; height: 2rem\" role=\"status\">\n        <!-- 🔍 無障礙輔助文字 (Screen Reader Text) -->\n        <!-- 為螢幕閱讀器提供的載入狀態說明 -->\n        <span class=\"visually-hidden\">載入中...</span>\n      </div>\n\n      <!-- 📝 主要載入文字 (Primary Loading Text) -->\n      <!-- 顯示當前載入的主要操作或狀態描述 -->\n      <div class=\"my-title-lg-black\">{{ loadingText }}</div>\n\n      <!-- 📊 載入進度條區域 (Loading Progress Area) -->\n      <!-- 當需要顯示具體進度時，提供視覺化的進度條 -->\n      <div class=\"mt-3\" v-if=\"showProgress && progress >= 0\">\n        <!-- 📊 Bootstrap 進度條容器 (Bootstrap Progress Container) -->\n        <div class=\"progress\" style=\"height: 8px\">\n          <!-- 📊 進度條滑塊 (Progress Bar) -->\n          <!-- 根據 progress 屬性動態調整寬度，顯示載入完成百分比 -->\n          <div\n            class=\"progress-bar bg-primary d-flex align-items-center justify-content-center\"\n            role=\"progressbar\"\n            :style=\"{ width: progress + '%' }\"\n            :aria-valuenow=\"progress\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            style=\"transition: width 0.3s ease; font-size: 0.75rem; color: white\"\n          >\n            {{ Math.round(progress) }}%\n          </div>\n        </div>\n      </div>\n\n      <!-- 📝 輔助說明文字 (Secondary Text) -->\n      <!-- 提供載入操作的詳細說明或提示資訊 -->\n      <div v-if=\"subText\" class=\"mt-2\">\n        <small class=\"my-content-xs-gray\">{{ subText }}</small>\n      </div>\n    </div>\n  </div>\n</template>\n","import { render } from \"./LoadingOverlay.vue?vue&type=template&id=1438218f\"\nimport script from \"./LoadingOverlay.vue?vue&type=script&lang=js\"\nexport * from \"./LoadingOverlay.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\n  import LayersTab from '../tabs/LayersTab.vue';\n\n  export default {\n    name: 'LeftView',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊左側面板內使用的子組件\n     */\n    components: {\n      LayersTab, // 圖層列表分頁組件\n    },\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯\n     */\n    setup() {\n      // 📤 返回響應式數據給模板使用\n      return {};\n    },\n  };\n</script>\n\n<template>\n  <div class=\"my-bgcolor-gray-100 h-100 d-flex flex-column overflow-hidden\">\n    <!-- 📰 頁面標題區域 -->\n    <div class=\"p-3\">\n      <h1 class=\"my-font-size-lg my-letter-spacing-lg text-center m-3\">臺北市長照資訊</h1>\n    </div>\n\n    <!-- 📋 圖層列表分頁內容 -->\n    <div class=\"flex-grow-1 overflow-hidden\">\n      <LayersTab />\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","<script>\n  import { computed, ref } from 'vue';\n  import { useDataStore } from '@/stores/dataStore.js';\n  import { getIcon } from '../utils/utils.js';\n\n  export default {\n    name: 'LayersTab',\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯\n     */\n    setup() {\n      // 📦 取得 Pinia 數據存儲實例\n      const dataStore = useDataStore();\n\n      // 建立一個 ref 來引用模板中的圖層列表 DOM 元素\n      const layerListRef = ref(null);\n\n      // 建立一個計算屬性，從 store 中獲取圖層數據。當 store 的 state 改變時，這裡會自動更新。\n      const layers = computed(() => dataStore.layers);\n\n      /**\n       * 🔘 切換圖層可見性\n       * 呼叫 store 中的 action 來切換指定圖層的顯示/隱藏狀態\n       * @param {string} layerId - 要切換的圖層 ID\n       */\n      const toggleLayer = (layerId) => {\n        console.log('🔘 LayersTab: 切換圖層', layerId);\n        dataStore.toggleLayerVisibility(layerId);\n      };\n\n      // 📤 將需要暴露給 <template> 使用的數據和方法返回\n      return {\n        layers,\n        toggleLayer,\n        layerListRef,\n        getIcon,\n      };\n    },\n  };\n</script>\n\n<template>\n  <div class=\"h-100 d-flex flex-column overflow-hidden my-bgcolor-gray-100\">\n    <div class=\"flex-grow-1 overflow-auto layer-list-container\" ref=\"layerListRef\">\n      <div class=\"mb-3\">\n        <div v-for=\"group in layers\" :key=\"group.groupName\" class=\"p-3\">\n          <div class=\"d-flex align-items-center pb-2\">\n            <div class=\"my-title-xs-gray\">{{ group.groupName }}</div>\n          </div>\n\n          <div v-for=\"layer in group.groupLayers\" :key=\"layer.layerId\" class=\"mb-1\">\n            <!-- 圖層卡片 -->\n            <div\n              class=\"btn rounded-0 border-0 d-flex shadow-sm my-bgcolor-white-hover p-0\"\n              @click=\"toggleLayer(layer.layerId)\"\n            >\n              <!-- 圖層圖示 -->\n              <div\n                class=\"d-flex\"\n                :class=\"`my-bgcolor-${layer.colorName}`\"\n                style=\"min-width: 6px\"\n              ></div>\n              <div class=\"w-100\">\n                <div class=\"d-flex\">\n                  <!-- 圖層名稱 -->\n                  <div class=\"d-flex align-items-center text-start w-100 px-3 py-2\">\n                    <span class=\"my-content-sm-black\">\n                      {{ layer.layerName }}\n                      <span class=\"my-content-xs-gray ms-2\">\n                        {{ layer.summaryData?.totalCount }}\n                      </span>\n                    </span>\n                  </div>\n                  <!-- 切換圖層可見性 -->\n                  <div class=\"d-flex align-items-center justify-content-center px-3 py-2\">\n                    <input\n                      type=\"checkbox\"\n                      :id=\"'switch-' + layer.layerId\"\n                      :checked=\"layer.visible\"\n                      :disabled=\"layer.isLoading\"\n                      @change=\"toggleLayer(layer.layerId)\"\n                    />\n                    <label :for=\"'switch-' + layer.layerId\"></label>\n                  </div>\n                </div>\n                <div v-if=\"layer.legendData && layer.visible\" class=\"px-3 pb-2\">\n                  <div\n                    v-for=\"data in layer.legendData\"\n                    :key=\"data.color\"\n                    class=\"d-flex align-items-center\"\n                  >\n                    <div\n                      style=\"min-width: 6px; min-height: 18px\"\n                      :style=\"{\n                        backgroundColor: data.color,\n                      }\"\n                    ></div>\n                    <div class=\"my-content-xs-black text-nowrap ms-2\">{{ data.label }}</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n  /* 🎨 圖層切換開關樣式 (Layer Toggle Switch Styles) */\n  /* https://www.tpisoftware.com/tpu/articleDetails/2744 */\n\n  input[type='checkbox'] {\n    height: 0;\n    width: 0;\n    visibility: hidden;\n  }\n\n  label {\n    cursor: pointer;\n    width: 28px;\n    height: 16px;\n    background: var(--my-color-gray-300);\n    display: block;\n    border-radius: 16px;\n    position: relative;\n    transition: background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1); /* 優化背景色過渡 */\n  }\n\n  label:after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    width: 12px;\n    height: 12px;\n    background: var(--my-color-white);\n    border-radius: 12px;\n    transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1); /* 優化滑動過渡 */\n  }\n\n  input:checked + label {\n    background: var(--my-color-green);\n  }\n\n  input:checked + label:after {\n    transform: translateX(12px);\n  }\n</style>\n","/**\n * 圖標映射表 - 支援中文/英文/FontAwesome 類名\n * 用於統一管理系統中使用的所有圖標\n */\nexport const ICONS = {\n  // 基本操作圖標\n  add: { zh: '新增', en: 'Add', icon: 'fas fa-plus' },\n  edit: { zh: '編輯', en: 'Edit', icon: 'fas fa-edit' },\n  delete: { zh: '刪除', en: 'Delete', icon: 'fas fa-trash' },\n  save: { zh: '儲存', en: 'Save', icon: 'fas fa-save' },\n  cancel: { zh: '取消', en: 'Cancel', icon: 'fas fa-times' },\n  confirm: { zh: '確認', en: 'Confirm', icon: 'fas fa-check' },\n  search: { zh: '搜尋', en: 'Search', icon: 'fas fa-search' },\n  filter: { zh: '篩選', en: 'Filter', icon: 'fas fa-filter' },\n  sort: { zh: '排序', en: 'Sort', icon: 'fas fa-sort' },\n  refresh: { zh: '重新整理', en: 'Refresh', icon: 'fas fa-sync-alt' },\n\n  // 檔案操作圖標\n  upload: { zh: '上傳', en: 'Upload', icon: 'fas fa-upload' },\n  download: { zh: '下載', en: 'Download', icon: 'fas fa-download' },\n  import: { zh: '匯入', en: 'Import', icon: 'fas fa-file-import' },\n  export: { zh: '匯出', en: 'Export', icon: 'fas fa-file-export' },\n\n  // 導航圖標\n  home: { zh: '首頁', en: 'Home', icon: 'fas fa-home' },\n  back: { zh: '返回', en: 'Back', icon: 'fas fa-arrow-left' },\n  forward: { zh: '前進', en: 'Forward', icon: 'fas fa-arrow-right' },\n  up: { zh: '向上', en: 'Up', icon: 'fas fa-arrow-up' },\n  down: { zh: '向下', en: 'Down', icon: 'fas fa-arrow-down' },\n\n  // 狀態圖標\n  success: { zh: '成功', en: 'Success', icon: 'fas fa-check-circle' },\n  error: { zh: '錯誤', en: 'Error', icon: 'fas fa-exclamation-circle' },\n  warning: { zh: '警告', en: 'Warning', icon: 'fas fa-exclamation-triangle' },\n  info: { zh: '資訊', en: 'Info', icon: 'fas fa-info-circle' },\n  loading: { zh: '載入中', en: 'Loading', icon: 'fas fa-spinner' },\n\n  // 視圖控制圖標\n  view: { zh: '檢視', en: 'View', icon: 'fas fa-eye' },\n  hide: { zh: '隱藏', en: 'Hide', icon: 'fas fa-eye-slash' },\n  expand: { zh: '展開', en: 'Expand', icon: 'fas fa-expand' },\n  collapse: { zh: '收縮', en: 'Collapse', icon: 'fas fa-compress' },\n\n  // 📂 圖層和資料相關 (Layer & Data Icons)\n  layer: { zh: '圖層', en: 'Layer', icon: 'fas fa-layer-group' },\n  visible: { zh: '可見', en: 'Visible', icon: 'fas fa-eye' },\n  hidden: { zh: '隱藏', en: 'Hidden', icon: 'fas fa-eye-slash' },\n  data: { zh: '資料', en: 'Data', icon: 'fas fa-database' },\n  table: { zh: '表格', en: 'Table', icon: 'fas fa-table' },\n\n  // 🗺️ 地圖相關 (Map Icons)\n  map: { zh: '地圖', en: 'Map', icon: 'fas fa-map' },\n  location: { zh: '位置', en: 'Location', icon: 'fas fa-map-marker-alt' },\n  zoom_in: { zh: '放大', en: 'Zoom In', icon: 'fas fa-search-plus' },\n  zoom_out: { zh: '縮小', en: 'Zoom Out', icon: 'fas fa-search-minus' },\n  center: { zh: '居中', en: 'Center', icon: 'fas fa-crosshairs' },\n\n  // 📊 分析和統計 (Analysis & Statistics Icons)\n  chart: { zh: '圖表', en: 'Chart', icon: 'fas fa-chart-bar' },\n  statistics: { zh: '統計', en: 'Statistics', icon: 'fas fa-chart-line' },\n  dashboard: { zh: '儀表板', en: 'Dashboard', icon: 'fas fa-tachometer-alt' },\n  analysis: { zh: '分析', en: 'Analysis', icon: 'fas fa-analytics' },\n\n  // 🏥 醫療相關 (Medical Icons)\n  hospital: { zh: '醫院', en: 'Hospital', icon: 'fas fa-hospital' },\n  clinic: { zh: '診所', en: 'Clinic', icon: 'fas fa-clinic-medical' },\n  pharmacy: { zh: '藥局', en: 'Pharmacy', icon: 'fas fa-pills' },\n  elderly_care: { zh: '長照', en: 'Elderly Care', icon: 'fas fa-hands-helping' },\n  medical: { zh: '醫療', en: 'Medical', icon: 'fas fa-user-md' },\n\n  // 👥 人口和社會 (Population & Social Icons)\n  population: { zh: '人口', en: 'Population', icon: 'fas fa-users' },\n  demographics: { zh: '人口統計', en: 'Demographics', icon: 'fas fa-user-friends' },\n  community: { zh: '社區', en: 'Community', icon: 'fas fa-home' },\n\n  // 💰 經濟相關 (Economic Icons)\n  income: { zh: '收入', en: 'Income', icon: 'fas fa-dollar-sign' },\n  tax: { zh: '稅收', en: 'Tax', icon: 'fas fa-file-invoice-dollar' },\n\n  // 🎛️ 操作和控制 (Control & Action Icons)\n  drag: { zh: '拖拉', en: 'Drag', icon: 'fa-solid fa-grip-lines-vertical' },\n  move_up: { zh: '上移', en: 'Move Up', icon: 'fas fa-arrow-up' },\n  move_down: { zh: '下移', en: 'Move Down', icon: 'fas fa-arrow-down' },\n\n  // ⚙️ 設定和配置 (Settings & Configuration Icons)\n  settings: { zh: '設定', en: 'Settings', icon: 'fas fa-cog' },\n  sort_up: { zh: '升序', en: 'Sort Ascending', icon: 'fas fa-sort-up' },\n  sort_down: { zh: '降序', en: 'Sort Descending', icon: 'fas fa-sort-down' },\n\n  // 📁 檔案和資料夾 (File & Folder Icons)\n  folder: { zh: '資料夾', en: 'Folder', icon: 'fas fa-folder' },\n  folder_open: { zh: '開啟資料夾', en: 'Open Folder', icon: 'fas fa-folder-open' },\n  file: { zh: '檔案', en: 'File', icon: 'fas fa-file' },\n\n  // ℹ️ 資訊和狀態 (Information & Status Icons)\n  information: { zh: '資訊', en: 'Information', icon: 'fas fa-info-circle' },\n  alert: { zh: '警告', en: 'Warning', icon: 'fas fa-exclamation-triangle' },\n  failure: { zh: '錯誤', en: 'Error', icon: 'fas fa-times-circle' },\n  complete: { zh: '成功', en: 'Success', icon: 'fas fa-check-circle' },\n\n  // 🔄 狀態轉換 (State Transition Icons)\n  reset: { zh: '重設', en: 'Reset', icon: 'fas fa-undo' },\n\n  // 📱 介面元素 (UI Element Icons)\n  menu: { zh: '選單', en: 'Menu', icon: 'fas fa-bars' },\n  close: { zh: '關閉', en: 'Close', icon: 'fas fa-times' },\n};\n\n// =================================================================================\n// 🛠️ 輔助函數 (Helper Functions)\n// =================================================================================\n\n/**\n * 根據鍵名獲取圖標資訊\n *\n * @param {string} iconKey - 圖標鍵名\n * @param {string} lang - 語言 ('zh' | 'en')\n * @returns {object} 包含文字和圖標類名的物件\n */\nexport function getIcon(iconKey, lang = 'zh') {\n  const iconInfo = ICONS[iconKey];\n  if (!iconInfo) {\n    console.warn(`找不到圖標定義: ${iconKey}`);\n    return {\n      text: iconKey,\n      icon: 'fas fa-question-circle',\n    };\n  }\n\n  return {\n    text: iconInfo[lang] || iconInfo.zh,\n    icon: iconInfo.icon,\n  };\n}\n","import { render } from \"./LayersTab.vue?vue&type=template&id=264eabf7&scoped=true\"\nimport script from \"./LayersTab.vue?vue&type=script&lang=js\"\nexport * from \"./LayersTab.vue?vue&type=script&lang=js\"\n\nimport \"./LayersTab.vue?vue&type=style&index=0&id=264eabf7&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-264eabf7\"]])\n\nexport default __exports__","import { render } from \"./LeftView.vue?vue&type=template&id=58e0b998\"\nimport script from \"./LeftView.vue?vue&type=script&lang=js\"\nexport * from \"./LeftView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\n  import PropertiesTab from '../tabs/PropertiesTab.vue';\n  import { useDataStore } from '../stores/dataStore';\n  import { computed, watch } from 'vue';\n\n  export default {\n    name: 'RightView',\n    components: {\n      PropertiesTab, // 物件屬性分頁組件\n    },\n    props: {\n      /** 🔗 當前作用中的右側分頁標籤 */\n      activeRightTab: {\n        type: String,\n        default: 'results',\n      },\n      /** 📈 分析結果清單數據 */\n      analysisList: {\n        type: Array,\n        default: () => [],\n      },\n      /** 📈 選中的分析項目 ID */\n      selectedAnalysisId: {\n        type: [Number, String],\n        default: null,\n      },\n      /** 📏 右側面板寬度 (像素) */\n      rightViewWidth: {\n        type: Number,\n        default: 250,\n      },\n    },\n\n    /**\n     * 📡 組件事件定義 (Component Events)\n     * 定義向父組件發送的事件類型\n     */\n    emits: [\n      'update:activeRightTab', // 更新作用中分頁\n      'select-analysis', // 選擇分析項目\n      'view-analysis', // 查看分析結果\n      'delete-analysis', // 刪除分析項目\n      'highlight-feature', // 高亮顯示地圖特徵\n    ],\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯\n     */\n    setup(props) {\n      // 📦 取得 Pinia 數據存儲實例\n      const dataStore = useDataStore();\n\n      /**\n       * 📊 計算活躍分析項目數量 (Calculate Active Analysis Count)\n       * 統計狀態為「完成」的分析項目數量\n       *\n       * @returns {number} 完成狀態的分析項目數量\n       */\n      const getActiveAnalysisCount = () => {\n        return props.analysisList.filter((a) => a.status === '完成').length;\n      };\n\n      /**\n       * 👀 監聽選中物件的變化 (Watch Selected Feature Changes)\n       * 當 Pinia store 中的 selectedFeature 變化時執行回調\n       */\n      watch(\n        () => dataStore.selectedFeature,\n        (newFeature) => {\n          console.log('RightView - selectedFeature changed:', {\n            newFeature: newFeature,\n            properties: newFeature?.properties,\n            store: dataStore,\n          });\n        },\n        { immediate: true }\n      ); // immediate: true 表示立即執行一次\n\n      /**\n       * 🧮 選中物件計算屬性 (Selected Feature Computed Property)\n       * 從 Pinia store 獲取當前選中的地圖物件\n       * 提供響應式的選中物件數據給子組件使用\n       */\n      const selectedFeatureComputed = computed(() => {\n        const feature = dataStore.selectedFeature;\n        console.log('RightView - Computing selectedFeature:', {\n          feature: feature,\n          properties: feature?.properties,\n        });\n        return feature;\n      });\n\n      // 📤 返回響應式數據和函數給模板和子組件使用\n      return {\n        getActiveAnalysisCount, // 活躍分析計數函數\n        selectedFeature: selectedFeatureComputed, // 選中物件計算屬性\n      };\n    },\n  };\n</script>\n\n<template>\n  <div class=\"my-right-panel h-100 d-flex flex-column overflow-hidden\">\n    <!-- 📄 右側分頁內容區域 -->\n    <div class=\"flex-grow-1 overflow-auto\">\n      <!-- 📋 物件屬性分頁內容 -->\n      <div v-show=\"activeRightTab === 'properties'\" class=\"h-100\">\n        <PropertiesTab\n          :selected-feature=\"selectedFeature\"\n          @highlight-feature=\"$emit('highlight-feature', $event)\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","<script>\n  import DetailItem from '../components/DetailItem.vue';\n  import { useDataStore } from '../stores/dataStore';\n  import { computed } from 'vue';\n\n  export default {\n    name: 'PropertiesTab',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊物件屬性分頁內使用的子組件\n     */\n    components: {\n      DetailItem, // 詳細資訊項目組件\n    },\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯\n     */\n    setup() {\n      // 📦 取得 Pinia 數據存儲實例\n      const dataStore = useDataStore();\n\n      /**\n       * 📊 選中物件計算屬性 (Selected Feature Computed Property)\n       * 從 Pinia store 獲取當前選中的地圖物件\n       * 提供響應式的選中物件數據\n       */\n      const selectedFeature = computed(() => dataStore.selectedFeature);\n\n      const selectedLayer = computed(() => {\n        if (!selectedFeature.value?.properties?.layerId) {\n          return null;\n        }\n\n        const layerId = selectedFeature.value.properties.layerId;\n        const layer = dataStore.findLayerById(layerId);\n        return layer;\n      });\n\n      /**\n       * 🏷️ 圖層名稱計算屬性 (Layer Name Computed Property)\n       * 根據 selectedFeature.properties.layerId 從 dataStore 的 layers 中找到對應的圖層名稱\n       */\n      const layerName = computed(() => {\n        if (!selectedFeature.value?.properties?.layerId) {\n          return null;\n        }\n\n        const layerId = selectedFeature.value.properties.layerId;\n        const layer = dataStore.findLayerById(layerId);\n        return layer ? layer.layerName : layerId;\n      });\n\n      /**\n       * 📋 是否有屬性計算屬性 (Has Properties Computed Property)\n       * 檢查選中物件是否包含有效的屬性資料\n       *\n       * @returns {boolean} 是否有屬性資料\n       */\n      const hasProperties = computed(() => {\n        return (\n          !!selectedFeature.value?.properties?.propertyData &&\n          Object.keys(selectedFeature.value.properties.propertyData).length > 0\n        );\n      });\n\n      /**\n       * 🎯 是否為分析圖層物件 (Is Analysis Layer Object)\n       * 檢查選中物件是否為分析圖層的物件\n       */\n      const isAnalysisObject = computed(() => {\n        return selectedFeature.value?.properties?.layerId === 'analysis-layer';\n      });\n\n      /**\n       * 🚗 是否為等時圈分析圖層物件 (Is Isochrone Analysis Layer Object)\n       * 檢查選中物件是否為等時圈分析圖層的物件\n       */\n      const isIsochroneAnalysisObject = computed(() => {\n        return selectedFeature.value?.properties?.layerId === 'isochrone-analysis-layer';\n      });\n\n      /**\n       * 🛣️ 是否為路徑規劃圖層物件 (Is Route Planning Layer Object)\n       * 檢查選中物件是否為路徑規劃圖層的物件\n       */\n      const isRoutePlanningObject = computed(() => {\n        return selectedFeature.value?.properties?.layerId === 'route-planning-layer';\n      });\n\n      /**\n       * 🛣️ 是否為路徑規劃路線 (Is Route Planning Line)\n       * 檢查選中物件是否為路徑規劃路線\n       */\n      const isRoutePlanningLine = computed(() => {\n        return (\n          isRoutePlanningObject.value && selectedFeature.value?.properties?.type === 'route-line'\n        );\n      });\n\n      /**\n       * 📍 是否為路徑規劃點 (Is Route Planning Point)\n       * 檢查選中物件是否為路徑規劃點\n       */\n      const isRoutePlanningPoint = computed(() => {\n        return (\n          isRoutePlanningObject.value &&\n          selectedFeature.value?.properties?.type === 'route-planning-point'\n        );\n      });\n\n      /**\n       * 🗺️ 是否為路徑優化圖層物件 (Is Route Optimization Layer Object)\n       * 檢查選中物件是否為路徑優化圖層的物件\n       */\n      const isRouteOptimizationObject = computed(() => {\n        return selectedFeature.value?.properties?.layerId === 'route-optimization-layer';\n      });\n\n      /**\n       * 🗺️ 是否為路徑優化路線 (Is Route Optimization Line)\n       * 檢查選中物件是否為路徑優化路線\n       */\n      const isRouteOptimizationLine = computed(() => {\n        return (\n          isRouteOptimizationObject.value &&\n          selectedFeature.value?.properties?.type === 'optimized-route-line'\n        );\n      });\n\n      /**\n       * 🗺️ 是否為路徑優化點 (Is Route Optimization Point)\n       * 檢查選中物件是否為路徑優化點\n       */\n      const isRouteOptimizationPoint = computed(() => {\n        return (\n          isRouteOptimizationObject.value &&\n          selectedFeature.value?.properties?.type === 'optimization-point'\n        );\n      });\n\n      /**\n       * 📍 路徑規劃路線詳細信息 (Route Planning Line Details)\n       * 獲取路徑規劃路線的詳細信息，包括關聯的路徑點\n       */\n      const routePlanningDetails = computed(() => {\n        if (!isRoutePlanningLine.value) return null;\n\n        const routeFeature = selectedFeature.value;\n        const routeId = routeFeature.properties.id;\n        const routeNumber = routeFeature.properties.routeNumber;\n\n        // 從圖層中找到關聯的路徑點\n        const routePlanningLayer = dataStore.findLayerById('route-planning-layer');\n        if (!routePlanningLayer) return null;\n\n        const relatedPoints = routePlanningLayer.geoJsonData.features\n          .filter(\n            (f) => f.properties.type === 'route-planning-point' && f.properties.routeId === routeId\n          )\n          .sort((a, b) => a.properties.order - b.properties.order);\n\n        return {\n          routeInfo: {\n            id: routeId,\n            name: routeFeature.properties.name,\n            routeNumber: routeNumber,\n            distance: routeFeature.properties.distance,\n            duration: routeFeature.properties.duration,\n            profile: routeFeature.properties.profile,\n            waypoints: routeFeature.properties.waypoints,\n            startPointName: routeFeature.properties.startPointName,\n            endPointName: routeFeature.properties.endPointName,\n            createdAt: routeFeature.properties.createdAt,\n          },\n          routePoints: relatedPoints.map((point) => ({\n            order: point.properties.order,\n            name: point.properties.name,\n            latitude: point.properties.latitude,\n            longitude: point.properties.longitude,\n            coordinates: point.geometry.coordinates,\n            createdAt: point.properties.createdAt,\n          })),\n        };\n      });\n\n      /**\n       * 🗺️ 路徑優化路線詳細信息 (Route Optimization Line Details)\n       * 獲取路徑優化路線的詳細信息，包括優化後的訪問順序\n       */\n      const routeOptimizationDetails = computed(() => {\n        if (!isRouteOptimizationLine.value) return null;\n\n        const routeFeature = selectedFeature.value;\n        const routeId = routeFeature.properties.id;\n        const routeNumber = routeFeature.properties.routeNumber;\n\n        // 直接使用路線特性中存儲的優化點信息，確保數據一致性\n        const optimizedPointInfo = routeFeature.properties.optimizedPointInfo || [];\n\n        return {\n          routeInfo: {\n            id: routeId,\n            name: routeFeature.properties.name,\n            routeNumber: routeNumber,\n            distance: routeFeature.properties.distance,\n            duration: routeFeature.properties.duration,\n            profile: routeFeature.properties.profile,\n            waypoints: routeFeature.properties.waypoints,\n            vehicleId: routeFeature.properties.vehicleId,\n            createdAt: routeFeature.properties.createdAt,\n          },\n          routePoints: optimizedPointInfo.map((point) => ({\n            order: point.order,\n            name: point.name,\n            latitude: point.coordinates[1],\n            longitude: point.coordinates[0],\n            coordinates: point.coordinates,\n            createdAt: routeFeature.properties.createdAt, // 使用路線的創建時間\n          })),\n          optimizedOrder: routeFeature.properties.optimizedOrder || [],\n          optimizedPointInfo: optimizedPointInfo,\n        };\n      });\n\n      /**\n       * 📍 範圍內點位清單 (Points In Range List)\n       * 獲取分析圖層物件範圍內的點清單（支援數據分析和等時圈分析）\n       */\n      const pointsInRange = computed(() => {\n        if (!isAnalysisObject.value && !isIsochroneAnalysisObject.value) return [];\n        return selectedFeature.value?.properties?.pointsInRange || [];\n      });\n\n      /**\n       * 🏢 範圍內多邊形清單 (Polygon In Range List)\n       * 獲取分析圖層物件範圍內的多邊形清單（支援數據分析和等時圈分析）\n       */\n      const polygonInRange = computed(() => {\n        if (!isAnalysisObject.value && !isIsochroneAnalysisObject.value) return [];\n        return selectedFeature.value?.properties?.polygonInRange || [];\n      });\n\n      /**\n       * 📋 範圍內所有物件清單 (All Objects In Range List)\n       * 整合點物件和多邊形物件的統一清單\n       */\n      const allObjectsInRange = computed(() => {\n        const points = pointsInRange.value.map((obj) => ({ ...obj, objectType: 'point' }));\n        const polygons = polygonInRange.value.map((obj) => ({ ...obj, objectType: 'polygon' }));\n        return [...points, ...polygons];\n      });\n\n      /**\n       * 📊 圖層統計 (Layer Statistics)\n       * 獲取範圍內各圖層的統計信息（點物件）（支援數據分析和等時圈分析）\n       */\n      const layerStats = computed(() => {\n        if (!isAnalysisObject.value && !isIsochroneAnalysisObject.value) return {};\n        return selectedFeature.value?.properties?.layerStats || {};\n      });\n\n      /**\n       * 🏢 多邊形圖層統計 (Polygon Layer Statistics)\n       * 獲取範圍內各圖層的統計信息（多邊形物件）（支援數據分析和等時圈分析）\n       */\n      const polygonStats = computed(() => {\n        if (!isAnalysisObject.value && !isIsochroneAnalysisObject.value) return {};\n        return selectedFeature.value?.properties?.polygonStats || {};\n      });\n\n      /**\n       * 📊 整合統計 (Combined Statistics)\n       * 整合點物件和多邊形物件的統計\n       */\n      const combinedStats = computed(() => {\n        const combined = { ...layerStats.value };\n        Object.entries(polygonStats.value).forEach(([layerName, count]) => {\n          const key = `${layerName} (多邊形)`;\n          combined[key] = count;\n        });\n        return combined;\n      });\n\n      /**\n       * 🕐 格式化日期時間 (Format Date Time)\n       * 將 ISO 字串轉換為本地化的日期時間格式\n       * @param {string} isoString - ISO 格式的日期時間字串\n       * @returns {string} - 格式化後的日期時間字串\n       */\n      const formatDateTime = (isoString) => {\n        if (!isoString) return 'N/A';\n        try {\n          return new Date(isoString).toLocaleString('zh-TW');\n        } catch (error) {\n          console.warn('日期格式化失敗:', error);\n          return isoString;\n        }\n      };\n\n      // 📤 返回響應式數據給模板使用\n      return {\n        selectedFeature, // 選中物件\n        selectedLayer, // 選中圖層\n        layerName, // 圖層名稱\n        hasProperties, // 是否有屬性\n        isAnalysisObject, // 是否為分析圖層物件\n        isIsochroneAnalysisObject, // 是否為等時圈分析圖層物件\n        isRoutePlanningObject, // 是否為路徑規劃圖層物件\n        isRoutePlanningLine, // 是否為路徑規劃路線\n        isRoutePlanningPoint, // 是否為路徑規劃點\n        routePlanningDetails, // 路徑規劃路線詳細信息\n        isRouteOptimizationObject, // 是否為路徑優化圖層物件\n        isRouteOptimizationLine, // 是否為路徑優化路線\n        isRouteOptimizationPoint, // 是否為路徑優化點\n        routeOptimizationDetails, // 路徑優化路線詳細信息\n        pointsInRange, // 範圍內點位清單\n        polygonInRange, // 範圍內多邊形清單\n        allObjectsInRange, // 範圍內所有物件清單\n        layerStats, // 點圖層統計\n        polygonStats, // 多邊形圖層統計\n        combinedStats, // 整合統計\n        formatDateTime, // 日期時間格式化函數\n      };\n    },\n\n    /**\n     * 🛠️ 組件方法定義 (Component Methods)\n     * 定義資料格式化和處理方法\n     */\n    methods: {\n      /**\n       * 📝 格式化屬性標籤 (Format Property Label)\n       * 將英文屬性名稱轉換為中文顯示名稱\n       *\n       * @param {string} key - 原始屬性名稱\n       * @returns {string} 格式化後的顯示名稱\n       */\n      formatLabel(key) {\n        // 屬性名稱對照表，提供中文化顯示\n        const labelMap = {\n          PTVNAME: '區域名稱',\n          中位數: '中位數',\n          name: '名稱',\n          count: '數量',\n          area: '面積',\n          population: '人口',\n          density: '密度',\n          // 分析圖層專用標籤\n          分析點名稱: '分析點名稱',\n          分析範圍名稱: '分析範圍名稱',\n          緯度: '緯度',\n          經度: '經度',\n          中心緯度: '中心緯度',\n          中心經度: '中心經度',\n          分析半徑: '分析半徑',\n          建立時間: '建立時間',\n          關聯分析點: '關聯分析點',\n        };\n        return labelMap[key] || key;\n      },\n\n      /**\n       * 🎨 格式化屬性值 (Format Property Value)\n       * 根據值的類型進行適當的格式化處理\n       *\n       * @param {any} value - 原始屬性值\n       * @returns {string} 格式化後的顯示值\n       */\n      formatValue(value) {\n        // 數字類型：添加千分位分隔符\n        if (typeof value === 'number') {\n          return value.toLocaleString();\n        }\n        // 其他類型：直接返回\n        return value;\n      },\n    },\n  };\n</script>\n\n<template>\n  <div class=\"h-100 flex-grow-1 d-flex flex-column my-bgcolor-gray-200\">\n    <div v-if=\"selectedFeature\" class=\"my-bgcolor-white h-100\">\n      <div>\n        <div\n          v-if=\"selectedLayer\"\n          :class=\"`my-bgcolor-${selectedLayer.colorName}`\"\n          :style=\"{ minHeight: '4px' }\"\n        ></div>\n\n        <div class=\"p-3\">\n          <DetailItem label=\"圖層\" :value=\"layerName\" />\n          <template v-if=\"hasProperties\">\n            <DetailItem\n              v-for=\"(value, key) in selectedFeature.properties.propertyData\"\n              :key=\"key\"\n              :label=\"formatLabel(key)\"\n              :value=\"formatValue(value)\"\n            />\n          </template>\n\n          <!-- 🎯 分析圖層專用：範圍內物件清單（支援數據分析和等時圈分析） -->\n          <template\n            v-if=\"\n              (isAnalysisObject || isIsochroneAnalysisObject) &&\n              (pointsInRange.length > 0 || polygonInRange.length > 0)\n            \"\n          >\n            <!-- 📍 點物件清單 -->\n            <template v-if=\"pointsInRange.length > 0\">\n              <hr class=\"my-3\" />\n\n              <div class=\"my-title-xs-gray mb-3\">範圍內點物件 {{ pointsInRange.length }}</div>\n              <DetailItem\n                v-for=\"(point, index) in pointsInRange\"\n                :key=\"index\"\n                :label=\"point.properties.layerName\"\n                :value=\"`${point.properties.name} (${point.distance}m)`\"\n              />\n            </template>\n\n            <!-- 🏢 多邊形物件清單 -->\n            <template v-if=\"polygonInRange.length > 0\">\n              <hr class=\"my-3\" />\n\n              <div class=\"my-title-xs-gray mb-3\">範圍內面域物件 {{ polygonInRange.length }}</div>\n              <DetailItem\n                v-for=\"(polygon, index) in polygonInRange\"\n                :key=\"index\"\n                :label=\"polygon.properties.layerName\"\n                :value=\"polygon.properties.name\"\n              />\n            </template>\n          </template>\n\n          <!-- 🛣️ 路徑規劃路線專用：路線詳細信息 -->\n          <template v-if=\"isRoutePlanningLine && routePlanningDetails\">\n            <hr class=\"my-3\" />\n\n            <!-- 路線基本信息 -->\n            <div class=\"my-title-xs-gray mb-3\">路線信息</div>\n            <DetailItem label=\"路線名稱\" :value=\"routePlanningDetails.routeInfo.name\" />\n            <DetailItem\n              label=\"路線編號\"\n              :value=\"`路線 ${routePlanningDetails.routeInfo.routeNumber}`\"\n            />\n            <DetailItem label=\"總距離\" :value=\"`${routePlanningDetails.routeInfo.distance} 公里`\" />\n            <DetailItem\n              label=\"預估時間\"\n              :value=\"`${routePlanningDetails.routeInfo.duration} 分鐘`\"\n            />\n            <DetailItem\n              label=\"交通方式\"\n              :value=\"\n                routePlanningDetails.routeInfo.profile === 'driving-car'\n                  ? '駕車'\n                  : routePlanningDetails.routeInfo.profile\n              \"\n            />\n            <DetailItem\n              label=\"路徑點數\"\n              :value=\"`${routePlanningDetails.routeInfo.waypoints} 個`\"\n            />\n            <DetailItem label=\"起點\" :value=\"routePlanningDetails.routeInfo.startPointName\" />\n            <DetailItem label=\"終點\" :value=\"routePlanningDetails.routeInfo.endPointName\" />\n            <DetailItem\n              label=\"建立時間\"\n              :value=\"formatDateTime(routePlanningDetails.routeInfo.createdAt)\"\n            />\n\n            <!-- 路徑點詳細清單 -->\n            <template v-if=\"routePlanningDetails.routePoints.length > 0\">\n              <hr class=\"my-3\" />\n\n              <div class=\"my-title-xs-gray mb-3\">\n                路徑點詳細 {{ routePlanningDetails.routePoints.length }}\n              </div>\n\n              <div\n                v-for=\"(point, index) in routePlanningDetails.routePoints\"\n                :key=\"index\"\n                class=\"mb-3 p-2 border rounded\"\n              >\n                <div class=\"my-content-sm-black fw-bold mb-2\">{{ point.name }}</div>\n                <DetailItem label=\"順序\" :value=\"`第 ${point.order} 個路徑點`\" />\n                <DetailItem label=\"緯度\" :value=\"point.latitude.toFixed(6)\" />\n                <DetailItem label=\"經度\" :value=\"point.longitude.toFixed(6)\" />\n                <DetailItem\n                  label=\"坐標\"\n                  :value=\"`[${point.coordinates[1].toFixed(6)}, ${point.coordinates[0].toFixed(6)}]`\"\n                />\n                <DetailItem label=\"建立時間\" :value=\"formatDateTime(point.createdAt)\" />\n              </div>\n            </template>\n          </template>\n\n          <!-- 📍 路徑規劃點專用：路徑點詳細信息 -->\n          <template v-if=\"isRoutePlanningPoint\">\n            <hr class=\"my-3\" />\n\n            <!-- 路徑點基本信息 -->\n            <div class=\"my-title-xs-gray mb-3\">路徑點信息</div>\n            <DetailItem label=\"點名稱\" :value=\"selectedFeature.properties.name\" />\n            <DetailItem label=\"順序\" :value=\"`第 ${selectedFeature.properties.order} 個路徑點`\" />\n            <DetailItem\n              label=\"狀態\"\n              :value=\"selectedFeature.properties.status === 'completed' ? '已完成' : '規劃中'\"\n            />\n\n            <!-- 已完成路徑點的額外信息 -->\n            <template v-if=\"selectedFeature.properties.status === 'completed'\">\n              <DetailItem\n                label=\"所屬路線\"\n                :value=\"`路線 ${selectedFeature.properties.routeNumber}`\"\n              />\n              <DetailItem label=\"路線ID\" :value=\"selectedFeature.properties.routeId\" />\n            </template>\n\n            <!-- 坐標信息 -->\n            <hr class=\"my-3\" />\n            <div class=\"my-title-xs-gray mb-3\">坐標信息</div>\n            <DetailItem\n              label=\"緯度\"\n              :value=\"selectedFeature.properties.latitude?.toFixed(6) || 'N/A'\"\n            />\n            <DetailItem\n              label=\"經度\"\n              :value=\"selectedFeature.properties.longitude?.toFixed(6) || 'N/A'\"\n            />\n            <DetailItem\n              label=\"GeoJSON坐標\"\n              :value=\"`[${selectedFeature.properties.latitude?.toFixed(6) || 'N/A'}, ${selectedFeature.properties.longitude?.toFixed(6) || 'N/A'}]`\"\n            />\n\n            <!-- 其他屬性 -->\n            <hr class=\"my-3\" />\n            <div class=\"my-title-xs-gray mb-3\">其他屬性</div>\n            <DetailItem label=\"要素ID\" :value=\"selectedFeature.properties.id\" />\n            <DetailItem label=\"圖層ID\" :value=\"selectedFeature.properties.layerId\" />\n            <DetailItem label=\"要素類型\" :value=\"selectedFeature.properties.type\" />\n            <DetailItem\n              label=\"建立時間\"\n              :value=\"formatDateTime(selectedFeature.properties.createdAt)\"\n            />\n          </template>\n\n          <!-- 🗺️ 路徑優化路線專用：優化路線詳細信息 -->\n          <template v-if=\"isRouteOptimizationLine && routeOptimizationDetails\">\n            <hr class=\"my-3\" />\n\n            <!-- 優化路線基本信息 -->\n            <div class=\"my-title-xs-gray mb-3\">優化路線信息</div>\n            <DetailItem label=\"路線名稱\" :value=\"routeOptimizationDetails.routeInfo.name\" />\n            <DetailItem\n              label=\"路線編號\"\n              :value=\"`優化路線 ${routeOptimizationDetails.routeInfo.routeNumber}`\"\n            />\n            <DetailItem\n              label=\"總距離\"\n              :value=\"`${routeOptimizationDetails.routeInfo.distance} 公里`\"\n            />\n            <DetailItem\n              label=\"預估時間\"\n              :value=\"`${routeOptimizationDetails.routeInfo.duration} 分鐘`\"\n            />\n            <DetailItem\n              label=\"交通方式\"\n              :value=\"\n                routeOptimizationDetails.routeInfo.profile === 'driving-car'\n                  ? '駕車'\n                  : routeOptimizationDetails.routeInfo.profile\n              \"\n            />\n            <DetailItem\n              label=\"優化點數\"\n              :value=\"`${routeOptimizationDetails.routeInfo.waypoints} 個`\"\n            />\n            <DetailItem\n              label=\"車輛ID\"\n              :value=\"routeOptimizationDetails.routeInfo.vehicleId || 'N/A'\"\n            />\n            <DetailItem\n              label=\"建立時間\"\n              :value=\"formatDateTime(routeOptimizationDetails.routeInfo.createdAt)\"\n            />\n\n            <!-- 優化點詳細清單 -->\n            <template v-if=\"routeOptimizationDetails.routePoints.length > 0\">\n              <hr class=\"my-3\" />\n\n              <div class=\"my-title-xs-gray mb-3\">\n                優化點詳細 {{ routeOptimizationDetails.routePoints.length }}\n              </div>\n\n              <div\n                v-for=\"(point, index) in routeOptimizationDetails.routePoints\"\n                :key=\"index\"\n                class=\"mb-3 p-2 border rounded\"\n              >\n                <div class=\"my-content-sm-black fw-bold mb-2\">\n                  <span class=\"badge bg-primary me-2\">{{ point.order }}</span>\n                  {{ point.name }}\n                </div>\n                <DetailItem label=\"順序\" :value=\"`第 ${point.order} 個優化點`\" />\n                <DetailItem label=\"緯度\" :value=\"point.latitude.toFixed(6)\" />\n                <DetailItem label=\"經度\" :value=\"point.longitude.toFixed(6)\" />\n                <DetailItem\n                  label=\"坐標\"\n                  :value=\"`[${point.coordinates[1].toFixed(6)}, ${point.coordinates[0].toFixed(6)}]`\"\n                />\n                <DetailItem label=\"建立時間\" :value=\"formatDateTime(point.createdAt)\" />\n              </div>\n            </template>\n\n            <!-- 優化順序顯示 -->\n            <template\n              v-if=\"\n                routeOptimizationDetails.optimizedPointInfo &&\n                routeOptimizationDetails.optimizedPointInfo.length > 0\n              \"\n            >\n              <hr class=\"my-3\" />\n              <div class=\"my-title-xs-gray mb-3\">優化訪問順序</div>\n              <div class=\"mb-3 p-2 border rounded bg-light\">\n                <div\n                  v-for=\"(point, index) in routeOptimizationDetails.optimizedPointInfo\"\n                  :key=\"index\"\n                  class=\"mb-2\"\n                >\n                  <span class=\"badge bg-success me-2\"\n                    >訪問順序 {{ point.visitOrder || index + 1 }}</span\n                  >\n                  <span class=\"badge bg-primary me-2\">優化點 {{ point.order }}</span>\n                  <span v-if=\"point.stepType\" class=\"badge bg-secondary me-2\">{{\n                    point.stepType === 'start'\n                      ? '起點'\n                      : point.stepType === 'end'\n                        ? '終點'\n                        : point.stepType === 'job'\n                          ? '任務'\n                          : point.stepType\n                  }}</span>\n                  <span class=\"my-content-sm-black\">\n                    {{ point.name }}\n                    <small class=\"text-muted ms-2\">\n                      ({{ point.coordinates[1].toFixed(6) }}, {{ point.coordinates[0].toFixed(6) }})\n                    </small>\n                  </span>\n                </div>\n              </div>\n            </template>\n          </template>\n\n          <!-- 🗺️ 路徑優化點專用：優化點詳細信息 -->\n          <template v-if=\"isRouteOptimizationPoint\">\n            <hr class=\"my-3\" />\n\n            <!-- 優化點基本信息 -->\n            <div class=\"my-title-xs-gray mb-3\">優化點信息</div>\n            <DetailItem\n              label=\"點名稱\"\n              :value=\"`${selectedFeature.properties.order}. ${selectedFeature.properties.name}`\"\n            />\n            <DetailItem label=\"順序\" :value=\"`第 ${selectedFeature.properties.order} 個優化點`\" />\n            <DetailItem\n              label=\"狀態\"\n              :value=\"selectedFeature.properties.status === 'completed' ? '已完成' : '規劃中'\"\n            />\n\n            <!-- 已完成優化點的額外信息 -->\n            <template v-if=\"selectedFeature.properties.status === 'completed'\">\n              <DetailItem\n                label=\"所屬路線\"\n                :value=\"`優化路線 ${selectedFeature.properties.routeNumber}`\"\n              />\n              <DetailItem label=\"路線ID\" :value=\"selectedFeature.properties.routeId\" />\n            </template>\n\n            <!-- 坐標信息 -->\n            <hr class=\"my-3\" />\n            <div class=\"my-title-xs-gray mb-3\">坐標信息</div>\n            <DetailItem\n              label=\"緯度\"\n              :value=\"selectedFeature.geometry.coordinates[1]?.toFixed(6) || 'N/A'\"\n            />\n            <DetailItem\n              label=\"經度\"\n              :value=\"selectedFeature.geometry.coordinates[0]?.toFixed(6) || 'N/A'\"\n            />\n            <DetailItem\n              label=\"GeoJSON坐標\"\n              :value=\"`[${selectedFeature.geometry.coordinates[1].toFixed(6)}, ${selectedFeature.geometry.coordinates[0].toFixed(6)}]`\"\n            />\n\n            <!-- 其他屬性 -->\n            <hr class=\"my-3\" />\n            <div class=\"my-title-xs-gray mb-3\">其他屬性</div>\n            <DetailItem label=\"要素ID\" :value=\"selectedFeature.properties.id\" />\n            <DetailItem label=\"圖層ID\" :value=\"selectedFeature.properties.layerId\" />\n            <DetailItem label=\"要素類型\" :value=\"selectedFeature.properties.type\" />\n            <DetailItem\n              label=\"建立時間\"\n              :value=\"formatDateTime(selectedFeature.properties.createdAt)\"\n            />\n          </template>\n        </div>\n      </div>\n    </div>\n\n    <!-- 📭 無點擊地圖上物件的空狀態 -->\n    <div v-else class=\"flex-grow-1 d-flex align-items-center justify-content-center\">\n      <div class=\"text-center\">\n        <div class=\"my-title-md-gray p-3\">沒有點擊地圖上的物件</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","<script>\n  export default {\n    name: 'DetailItem',\n    props: {\n      label: {\n        type: String,\n        required: true,\n      },\n      value: {\n        type: [String, Number, Boolean, Object],\n        required: true,\n      },\n    },\n  };\n</script>\n\n<template>\n  <div class=\"pb-2\">\n    <div class=\"my-title-xs-gray pb-1\">{{ label }}</div>\n    <div class=\"my-content-sm-black pb-1\">{{ value }}</div>\n  </div>\n</template>\n\n<style scoped>\n  /* Add any component-specific styles here if needed */\n  .lead {\n    word-wrap: break-word; /* Ensure long values wrap */\n  }\n\n  .my-resizer-middle {\n    background-color: white;\n    position: relative;\n    border-top: 1px solid var(--my-color-gray-200); /* 上邊框分隔線 */\n    border-bottom: 1px solid var(--my-color-gray-200); /* 下邊框分隔線 */\n  }\n</style>\n","import { render } from \"./DetailItem.vue?vue&type=template&id=0cd54acc&scoped=true\"\nimport script from \"./DetailItem.vue?vue&type=script&lang=js\"\nexport * from \"./DetailItem.vue?vue&type=script&lang=js\"\n\nimport \"./DetailItem.vue?vue&type=style&index=0&id=0cd54acc&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-0cd54acc\"]])\n\nexport default __exports__","import { render } from \"./PropertiesTab.vue?vue&type=template&id=1951a296\"\nimport script from \"./PropertiesTab.vue?vue&type=script&lang=js\"\nexport * from \"./PropertiesTab.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./RightView.vue?vue&type=template&id=02004959\"\nimport script from \"./RightView.vue?vue&type=script&lang=js\"\nexport * from \"./RightView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\n  // 🔧 Vue Composition API 引入\n  import { ref, watch, nextTick } from 'vue';\n  // 🧩 子組件引入\n  import MapTab from '../tabs/MapTab.vue';\n  import DashboardTab from '../tabs/DashboardTab.vue';\n\n  export default {\n    name: 'UpperView',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊上半部面板內使用的子組件\n     */\n    components: {\n      MapTab,\n      DashboardTab,\n    },\n\n    /**\n     * 🔧 組件屬性定義 (Component Props)\n     * 接收來自父組件的配置和狀態數據\n     */\n    props: {\n      activeUpperTab: { type: String, default: 'map' },\n      mainPanelWidth: { type: Number, default: 60 },\n      contentHeight: { type: Number, default: 500 },\n      showTainanLayer: { type: Boolean, default: false },\n      selectedFilter: { type: String, default: '' },\n      zoomLevel: { type: Number, default: 11 },\n      isPanelDragging: { type: Boolean, default: false },\n      activeMarkers: { type: Number, default: 0 },\n    },\n\n    /**\n     * 📡 組件事件定義 (Component Events)\n     * 定義向父組件發送的事件類型\n     */\n    emits: [\n      'update:activeUpperTab', // 更新作用中分頁\n      'update:zoomLevel', // 更新地圖縮放等級\n      'update:currentCoords', // 更新當前座標\n      'update:activeMarkers', // 更新作用中標記數量\n      'feature-selected', // 選中地圖特徵\n    ],\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯\n     */\n    setup(props, { emit }) {\n      // 📚 子組件引用 (Child Component References)\n      /** 🗺️ 地圖視圖組件引用 */\n      const MapTab = ref(null);\n      /** 📊 儀表板視圖組件引用 */\n      const DashboardTab = ref(null);\n      /** 📊 儀表板容器引用 (用於控制滑鼠事件) */\n      const dashboardContainerRef = ref(null);\n\n      /**\n       * 👀 監聽拖曳狀態和分頁變化 (Watch Dragging State and Tab Changes)\n       * 調整儀表板容器的滑鼠指標事件，防止拖曳時的干擾\n       */\n      watch(\n        [() => props.isPanelDragging, () => props.activeUpperTab],\n        ([dragging, tab]) => {\n          nextTick(() => {\n            if (dashboardContainerRef.value) {\n              if (dragging && tab === 'dashboard') {\n                // 拖曳時禁用儀表板的滑鼠事件\n                dashboardContainerRef.value.style.pointerEvents = 'none';\n                console.log('MainContent: Dashboard container pointer-events set to none');\n              } else {\n                // 恢復儀表板的滑鼠事件\n                dashboardContainerRef.value.style.pointerEvents = 'auto';\n                console.log(\n                  'MainContent: Dashboard container pointer-events set to auto (dragging:',\n                  dragging,\n                  ', tab:',\n                  tab,\n                  ')'\n                );\n              }\n            }\n          });\n        },\n        { immediate: true }\n      ); // immediate: true 表示立即執行一次\n\n      /**\n       * 👀 監聽分頁變化 (Watch Tab Changes)\n       * 當切換分頁時觸發相應的更新動作，確保組件正常顯示\n       */\n      watch(\n        () => props.activeUpperTab,\n        (newTab, oldTab) => {\n          console.log('🔄 UpperView: Tab changed from', oldTab, 'to', newTab);\n\n          // 使用 v-show 後組件不會被銷毀，只需要在切換到地圖時刷新尺寸\n          if (newTab === 'map' && oldTab && oldTab !== 'map') {\n            nextTick(() => {\n              if (MapTab.value) {\n                console.log('🗺️ UpperView: Refreshing map size after showing map tab');\n                // 延遲執行，確保容器從隱藏狀態變為可見後再刷新尺寸\n                setTimeout(() => {\n                  if (MapTab.value && props.activeUpperTab === 'map') {\n                    MapTab.value.invalidateSize();\n                    console.log('🗺️ UpperView: Map size refreshed successfully');\n                  }\n                }, 100); // 減少延遲時間，因為現在不需要等待組件重新創建\n              }\n            });\n          }\n        }\n      );\n\n      /**\n       * 👀 監聽面板大小變化 (Watch Panel Size Changes)\n       * 當面板寬度或高度變化時，更新相應的子組件\n       */\n      watch([() => props.mainPanelWidth, () => props.contentHeight], () => {\n        nextTick(() => {\n          if (props.activeUpperTab === 'map' && MapTab.value) {\n            // 🗺️ 重新計算地圖大小，適應新的容器尺寸\n            MapTab.value.invalidateSize();\n\n            // 響應式布局中額外的地圖刷新\n            setTimeout(() => {\n              if (MapTab.value) {\n                MapTab.value.invalidateSize();\n                console.log('🗺️ UpperView: Extra map size invalidation for responsive layout');\n              }\n            }, 200);\n          }\n          // Dashboard現在是純文字統計，不需要重新計算圖表大小\n        });\n      });\n\n      /**\n       * 🎯 高亮顯示指定地圖特徵 (Highlight Feature on Map)\n       * 如果當前不在地圖分頁，會自動切換到地圖分頁再執行高亮\n       *\n       * @param {Object} highlightData - 包含 layerId 和 id 的高亮數據物件\n       */\n      const highlightFeature = (highlightData) => {\n        console.log('🎯 UpperView: highlightFeature called with data:', highlightData);\n\n        // 如果當前不在地圖分頁，先切換到地圖分頁\n        if (props.activeUpperTab !== 'map') {\n          emit('update:activeUpperTab', 'map');\n\n          // 等待分頁切換完成後再執行高亮\n          nextTick(() => {\n            MapTab.value?.highlightFeature(highlightData);\n          });\n        } else {\n          // 如果已經在地圖分頁，直接執行高亮\n          MapTab.value?.highlightFeature(highlightData);\n        }\n      };\n\n      /**\n       * 🔄 重設地圖視圖 (Reset Map View)\n       * 將地圖恢復到初始視圖狀態\n       */\n      const resetView = () => {\n        if (props.activeUpperTab === 'map' && MapTab.value) {\n          MapTab.value.resetView();\n        }\n      };\n\n      /**\n       * 🗺️ 適應台南地區邊界 (Fit to Tainan Bounds)\n       * 調整地圖視圖以完整顯示台南地區\n       */\n      const fitToTainanBounds = () => {\n        if (props.activeUpperTab === 'map' && MapTab.value) {\n          MapTab.value.fitToTainanBounds();\n        }\n      };\n\n      /**\n       * 📏 手動刷新地圖尺寸 (Manually Refresh Map Size)\n       * 當容器大小變化但自動偵測失效時使用\n       */\n      const invalidateMapSize = () => {\n        if (props.activeUpperTab === 'map' && MapTab.value) {\n          MapTab.value.invalidateSize();\n        }\n      };\n\n      return {\n        MapTab, // 地圖組件引用\n        DashboardTab, // 儀表板組件引用\n        dashboardContainerRef, // 儀表板容器引用\n        highlightFeature, // 高亮顯示功能\n        resetView, // 重設視圖功能\n        fitToTainanBounds, // 適應邊界功能\n        invalidateMapSize, // 刷新地圖尺寸功能\n      };\n    },\n  };\n</script>\n\n<template>\n  <div class=\"d-flex flex-column my-bgcolor-gray-200 h-100\">\n    <div class=\"flex-grow-1 overflow-hidden position-relative\">\n      <!-- 統一的導航按鈕組 -->\n      <div class=\"position-absolute top-0 start-0 m-3\" style=\"z-index: 1000\">\n        <div class=\"d-flex align-items-center rounded-pill shadow my-blur gap-1 p-2\">\n          <!-- 🗺️ 地圖視圖按鈕 (Map View Button) -->\n          <button\n            class=\"btn rounded-circle border-0 d-flex align-items-center justify-content-center my-btn-transparent my-font-size-xs\"\n            :class=\"{\n              'my-btn-blue': activeUpperTab === 'map',\n            }\"\n            @click=\"$emit('update:activeUpperTab', 'map')\"\n            style=\"width: 30px; height: 30px\"\n            title=\"地圖視圖\"\n          >\n            <i class=\"fas fa-map\"></i>\n          </button>\n          <!-- 📊 儀表板按鈕 (Dashboard Button) -->\n          <button\n            class=\"btn rounded-circle border-0 d-flex align-items-center justify-content-center my-btn-transparent my-font-size-xs\"\n            :class=\"{\n              'my-btn-blue': activeUpperTab === 'dashboard',\n            }\"\n            @click=\"$emit('update:activeUpperTab', 'dashboard')\"\n            style=\"width: 30px; height: 30px\"\n            title=\"資料儀表板\"\n          >\n            <i class=\"fas fa-chart-bar\"></i>\n          </button>\n        </div>\n      </div>\n\n      <!-- 地圖分頁內容-->\n      <div v-show=\"activeUpperTab === 'map'\" class=\"h-100\">\n        <MapTab\n          ref=\"MapTab\"\n          :showTainanLayer=\"showTainanLayer\"\n          :selectedFilter=\"selectedFilter\"\n          :zoomLevel=\"zoomLevel\"\n          :maxCount=\"maxCount\"\n          @update:zoomLevel=\"$emit('update:zoomLevel', $event)\"\n          @update:currentCoords=\"$emit('update:currentCoords', $event)\"\n          @update:activeMarkers=\"$emit('update:activeMarkers', $event)\"\n          @feature-selected=\"$emit('feature-selected', $event)\"\n          @open-distance-modal=\"(lat, lng) => $emit('open-distance-modal', lat, lng)\"\n          @open-isochrone-modal=\"(lat, lng) => $emit('open-isochrone-modal', lat, lng)\"\n        />\n      </div>\n\n      <!-- 儀表板分頁內容 -->\n      <div\n        v-show=\"activeUpperTab === 'dashboard'\"\n        ref=\"dashboardContainerRef\"\n        class=\"h-100 overflow-auto pt-5\"\n      >\n        <!-- 🎛️ 為導航按鈕組預留空間 (Reserve Space for Navigation Buttons) -->\n        <div style=\"height: 40px\"></div>\n        <DashboardTab\n          ref=\"DashboardTab\"\n          :containerHeight=\"contentHeight\"\n          :isPanelDragging=\"isPanelDragging\"\n          :activeMarkers=\"activeMarkers\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","<script>\n  // 🔧 Vue Composition API 引入 (Vue Composition API Imports)\n  import { ref, onMounted, onUnmounted, watch, nextTick, computed } from 'vue'; // 引入 Vue 3 響應式 API\n  import L from 'leaflet'; // 引入 Leaflet 地圖庫\n  import 'leaflet/dist/leaflet.css'; // 引入 Leaflet 預設樣式\n  import { useDataStore } from '@/stores/dataStore.js'; // 引入資料存儲\n  import { useDefineStore } from '@/stores/defineStore.js'; // 引入定義存儲\n\n  // 🔧 修復 Leaflet 預設圖標問題 (Fix Leaflet Default Icon Issues)\n  import icon from 'leaflet/dist/images/marker-icon.png'; // 引入標準標記圖標\n  import iconShadow from 'leaflet/dist/images/marker-shadow.png'; // 引入標記陰影圖標\n  import iconRetina from 'leaflet/dist/images/marker-icon-2x.png'; // 引入高解析度標記圖標\n\n  // 刪除預設圖標 URL 獲取方法，避免 webpack 打包問題\n  delete L.Icon.Default.prototype._getIconUrl;\n  // 重新設定 Leaflet 預設圖標配置\n  L.Icon.Default.mergeOptions({\n    iconRetinaUrl: iconRetina, // 高解析度圖標 URL\n    iconUrl: icon, // 標準圖標 URL\n    shadowUrl: iconShadow, // 陰影圖標 URL\n  });\n\n  export default {\n    name: 'MapTab', // 組件名稱\n\n    // 🔧 組件屬性定義 (Component Props Definition)\n    props: {\n      zoomLevel: { type: Number, default: 11 }, // 地圖縮放等級，預設為 11\n      isPanelDragging: { type: Boolean, default: false }, // 面板是否正在拖曳，預設為 false\n    },\n\n    // 📡 組件事件定義 (Component Events Definition)\n    emits: [\n      'update:zoomLevel',\n      'update:currentCoords',\n      'update:activeMarkers',\n      'feature-selected',\n      'open-distance-modal',\n      'open-isochrone-modal',\n    ],\n\n    // 🔧 組件設定函數 (Component Setup Function)\n    setup(props, { emit }) {\n      // 📦 資料存儲實例 (Data Store Instance)\n      const dataStore = useDataStore(); // 獲取 Pinia 資料存儲實例\n      const defineStore = useDefineStore(); // 獲取定義存儲實例\n\n      // 🗺️ 地圖相關變數 (Map Related Variables)\n      const mapContainer = ref(null); // 地圖容器 DOM 元素引用\n      let mapInstance = null; // 地圖實例，使用普通變數而非 ref 避免響應式開銷\n      let currentTileLayer = null; // 當前底圖圖層實例\n      let layerGroups = {}; // 存放所有圖層群組的物件\n      let isClickMode = ref(false); // 是否處於點擊模式\n      let isIsochroneClickMode = ref(false); // 是否處於等時圈點擊模式\n      let isRoutePlanningClickMode = ref(false); // 是否處於路徑規劃點擊模式\n      let isRouteOptimizationClickMode = ref(false); // 是否處於路徑優化點擊模式\n\n      // 🖱️ 右鍵菜單相關變數 (Context Menu Related Variables)\n      const contextMenu = ref(null); // 右鍵菜單 DOM 引用\n      const showContextMenu = ref(false); // 是否顯示右鍵菜單\n      const contextMenuPosition = ref({ x: 0, y: 0 }); // 右鍵菜單位置\n      const selectedAnalysisFeature = ref(null); // 選中的分析要素\n\n      // 🎛️ 地圖控制狀態 (Map Control States)\n      const isMapReady = ref(false); // 地圖是否已準備就緒的狀態標記\n      /** 🗺️ 動態地圖容器 ID（避免多實例衝突） */\n      const mapContainerId = ref(`leaflet-map-${Math.random().toString(36).substr(2, 9)}`);\n\n      // 📊 計算屬性：檢查是否有任何圖層可見 (Computed Property: Check if Any Layer is Visible)\n      const isAnyLayerVisible = computed(\n        () => dataStore.getAllLayers().some((l) => l.visible && l.geoJsonData) // 檢查所有圖層中是否有可見且有資料的圖層\n      );\n\n      // 🏗️ 創建地圖實例函數 (Create Map Instance Function)\n      const createMap = () => {\n        // 檢查地圖容器是否存在\n        if (!mapContainer.value) return false;\n\n        // 檢查容器尺寸是否有效\n        const rect = mapContainer.value.getBoundingClientRect(); // 獲取容器的邊界矩形\n        if (rect.width === 0 || rect.height === 0) {\n          // 如果寬度或高度為零\n          console.warn('[MapTab] 容器尺寸為零，延遲初始化'); // 輸出警告訊息\n          return false; // 返回失敗狀態\n        }\n\n        try {\n          // 創建 Leaflet 地圖實例，使用 defineStore 中保存的視圖狀態\n          mapInstance = L.map(mapContainer.value, {\n            center: defineStore.mapView.center, // 使用保存的地圖中心點\n            zoom: defineStore.mapView.zoom, // 使用保存的縮放等級\n            zoomControl: false, // 禁用預設縮放控制項\n            attributionControl: false, // 禁用預設版權資訊控制項\n          });\n\n          // 綁定地圖事件處理器\n          mapInstance.on('zoomend', handleZoomEnd); // 縮放結束事件\n          mapInstance.on('moveend', handleMoveEnd); // 移動結束事件\n\n          // 綁定地圖點擊事件 - 點擊空白處清除選取或添加分析點\n          mapInstance.on('click', function (e) {\n            if (isClickMode.value) {\n              // 如果處於數據分析點擊模式，發送事件到父組件顯示距離輸入 modal\n              e.originalEvent.stopPropagation();\n              emit('open-distance-modal', e.latlng.lat, e.latlng.lng);\n              return false; // 阻止事件繼續傳播\n            } else if (isIsochroneClickMode.value) {\n              // 如果處於等時圈分析點擊模式，發送事件到父組件顯示等時分析 modal\n              e.originalEvent.stopPropagation();\n              emit('open-isochrone-modal', e.latlng.lat, e.latlng.lng);\n              return false; // 阻止事件繼續傳播\n            } else if (isRoutePlanningClickMode.value) {\n              // 如果處於路徑規劃點擊模式，添加路徑規劃點並阻止其他事件\n              e.originalEvent.stopPropagation();\n              addRoutePlanningPoint(e.latlng.lat, e.latlng.lng);\n              return false; // 阻止事件繼續傳播\n            } else if (isRouteOptimizationClickMode.value) {\n              // 如果處於路徑優化點擊模式，添加路徑優化點並阻止其他事件\n              e.originalEvent.stopPropagation();\n              addRouteOptimizationPoint(e.latlng.lat, e.latlng.lng);\n              return false; // 阻止事件繼續傳播\n            } else if (!e.originalEvent.target.closest('.leaflet-interactive')) {\n              // 否則清除選取\n              dataStore.setSelectedFeature(null);\n              resetAllLayerStyles();\n            }\n          });\n\n          // 移除分析圖層專用面板，讓圖層按加入順序自然顯示\n\n          // 設定 popup 面板的 z-index\n          mapInstance.getPane('popupPane').style.zIndex = 2200;\n\n          // 設定地圖準備就緒狀態\n          isMapReady.value = true; // 標記地圖已準備就緒\n\n          // 如果已經處於點擊模式，確保樣式正確應用\n          if (isClickMode.value) {\n            const mapContainer = mapInstance.getContainer();\n            mapContainer.style.cursor = 'crosshair';\n            mapContainer.classList.add('click-mode-active');\n          } else if (isIsochroneClickMode.value) {\n            const mapContainer = mapInstance.getContainer();\n            mapContainer.style.cursor = 'crosshair';\n            mapContainer.classList.add('isochrone-click-mode-active');\n          } else if (isRoutePlanningClickMode.value) {\n            const mapContainer = mapInstance.getContainer();\n            mapContainer.style.cursor = 'crosshair';\n            mapContainer.classList.add('route-planning-click-mode-active');\n          }\n\n          console.log('[MapTab] 地圖創建成功'); // 輸出成功訊息\n          return true; // 返回成功狀態\n        } catch (error) {\n          console.error('[MapTab] 地圖創建失敗:', error); // 輸出錯誤訊息\n          return false; // 返回失敗狀態\n        }\n      };\n\n      // 📡 地圖事件處理函數 (Map Event Handler Functions)\n\n      // 處理縮放結束事件\n      const handleZoomEnd = () => {\n        if (mapInstance) {\n          // 確保地圖實例存在\n          const zoom = mapInstance.getZoom();\n          const center = mapInstance.getCenter();\n          // 保存地圖視圖狀態到 defineStore\n          defineStore.setMapView([center.lat, center.lng], zoom);\n          emit('update:zoomLevel', zoom); // 發送縮放等級更新事件\n        }\n      };\n\n      // 處理移動結束事件\n      const handleMoveEnd = () => {\n        if (mapInstance) {\n          // 確保地圖實例存在\n          const center = mapInstance.getCenter();\n          const zoom = mapInstance.getZoom();\n          // 保存地圖視圖狀態到 defineStore\n          defineStore.setMapView([center.lat, center.lng], zoom);\n          emit('update:currentCoords', center); // 發送座標更新事件\n        }\n      };\n\n      // 🗺️ 設定底圖函數 (Set Basemap Function)\n      const setBasemap = () => {\n        // 檢查地圖實例和準備狀態\n        if (!mapInstance || !isMapReady.value) return;\n\n        // 步驟一：無論如何，都先移除舊的底圖圖層\n        // 這樣可以確保在切換到「無底圖」時，舊的地圖會被正確清除。\n        if (currentTileLayer) {\n          mapInstance.removeLayer(currentTileLayer);\n          currentTileLayer = null;\n        }\n\n        // 步驟二：查找新的底圖設定\n        const config = defineStore.basemaps.find((b) => b.value === defineStore.selectedBasemap);\n\n        // 步驟三：只有在找到設定檔(config)且 URL 不是空值(falsy)時，才加入新的圖層\n        // 由於空字串 '' 是 falsy 值，這個判斷式會自動過濾掉 url 為 '' 的情況。\n        if (config && config.url) {\n          currentTileLayer = L.tileLayer(config.url, { attribution: '' });\n          currentTileLayer.addTo(mapInstance);\n        }\n\n        // 動態設定地圖容器背景色\n        const mapContainerElement = mapContainer.value;\n        if (mapContainerElement) {\n          if (defineStore.selectedBasemap === 'blank') {\n            // 空白地圖時設為白色背景\n            mapContainerElement.style.backgroundColor = 'var(--my-color-white)';\n          } else if (defineStore.selectedBasemap === 'black') {\n            // 全黑底圖時設為黑色背景\n            mapContainerElement.style.backgroundColor = 'var(--my-color-gray-800)';\n          } else {\n            // 其他底圖時設為透明，讓底圖顯示\n            mapContainerElement.style.backgroundColor = 'transparent';\n          }\n        }\n      };\n\n      // 🎨 創建要素圖層函數 (Create Feature Layer Function)\n      const createFeatureLayer = (layer) => {\n        // 檢查圖層是否有資料\n        if (!layer.geoJsonData) return null;\n\n        // 解構圖層屬性\n        const { layerName, colorName, type } = layer; // 獲取圖層名稱、顏色和類型\n\n        // 創建 GeoJSON 圖層\n        const geoJsonLayer = L.geoJSON(layer.geoJsonData, {\n          // 點要素轉換函數\n          pointToLayer: (feature, latlng) => {\n            // 分析圖層的特殊處理\n            if (layer.isAnalysisLayer) {\n              if (feature.properties.type === 'point-analysis') {\n                // 分析點：綠色加號標記\n                const icon = L.divIcon({\n                  html: `\n                  <div class=\"d-flex align-items-center justify-content-center my-color-green my-font-size-sm\">\n                    <i class=\"fas fa-plus\"></i>\n                  </div>\n                  `,\n                  className: 'analysis-point-icon',\n                  iconSize: [16, 16],\n                  iconAnchor: [8, 8],\n                  popupAnchor: [0, -8],\n                });\n                const marker = L.marker(latlng, { icon });\n\n                return marker;\n              } else if (feature.properties.type === 'circle-analysis') {\n                // 分析圓圈：2公里半徑\n                const circle = L.circle(latlng, {\n                  radius: feature.properties.radius,\n                  color: 'var(--my-color-green)',\n                  weight: 1,\n                  opacity: 0.8,\n                  fillColor: 'var(--my-color-green)',\n                  fillOpacity: 0.2,\n                });\n\n                return circle;\n              }\n            } else if (layer.isIsochroneAnalysisLayer) {\n              if (feature.properties.type === 'isochrone-point-analysis') {\n                // 等時圈分析點：藍色加號標記\n                const icon = L.divIcon({\n                  html: `\n                  <div class=\"d-flex align-items-center justify-content-center my-color-blue my-font-size-sm\">\n                    <i class=\"fas fa-plus\"></i>\n                  </div>\n                  `,\n                  className: 'isochrone-analysis-point-icon',\n                  iconSize: [16, 16],\n                  iconAnchor: [8, 8],\n                  popupAnchor: [0, -8],\n                });\n                const marker = L.marker(latlng, { icon });\n\n                return marker;\n              } else if (feature.properties.type === 'isochrone-circle-analysis') {\n                // 等時圈分析圓圈：藍色圓圈（回退模式）\n                const circle = L.circle(latlng, {\n                  radius: feature.properties.radius,\n                  color: 'var(--my-color-blue)',\n                  weight: 1,\n                  opacity: 0.8,\n                  fillColor: 'var(--my-color-blue)',\n                  fillOpacity: 0.2,\n                });\n\n                return circle;\n              }\n            } else if (layer.isRoutePlanningLayer) {\n              if (feature.properties.type === 'route-planning-point') {\n                // 路徑規劃點：橘色數字標記\n                const order = feature.properties.order || 1;\n                const isCompleted = feature.properties.status === 'completed';\n\n                // 根據完成狀態選擇不同的樣式\n                const backgroundColor = isCompleted\n                  ? 'var(--my-color-gray-500)'\n                  : 'var(--my-color-orange)';\n                const borderColor = isCompleted ? 'var(--my-color-gray-400)' : 'white';\n                const textColor = isCompleted\n                  ? 'var(--my-color-gray-200)'\n                  : 'var(--my-color-white)';\n\n                const icon = L.divIcon({\n                  html: `\n                  <div class=\"d-flex align-items-center justify-content-center my-font-size-xs fw-bold\"\n                       style=\"background: ${backgroundColor}; color: ${textColor}; border-radius: 50%; width: 20px; height: 20px; border: 2px solid ${borderColor}; box-shadow: 0 2px 4px rgba(0,0,0,0.3);\">\n                    ${order}\n                  </div>\n                  `,\n                  className: `route-planning-point-icon ${isCompleted ? 'completed' : 'active'}`,\n                  iconSize: [24, 24],\n                  iconAnchor: [12, 12],\n                  popupAnchor: [0, -12],\n                });\n                const marker = L.marker(latlng, { icon });\n\n                return marker;\n              }\n            } else if (layer.isRouteOptimizationLayer) {\n              if (feature.properties.type === 'optimization-point') {\n                // 路徑優化點：紫色數字標記\n                const order = feature.properties.order || 1;\n                const isCompleted = feature.properties.status === 'completed';\n\n                // 根據完成狀態選擇不同的樣式\n                const backgroundColor = isCompleted\n                  ? 'var(--my-color-gray-500)'\n                  : 'var(--my-color-purple)';\n                const borderColor = isCompleted ? 'var(--my-color-gray-400)' : 'white';\n                const textColor = isCompleted\n                  ? 'var(--my-color-gray-200)'\n                  : 'var(--my-color-white)';\n\n                const icon = L.divIcon({\n                  html: `\n                  <div class=\"d-flex align-items-center justify-content-center my-font-size-xs fw-bold\"\n                       style=\"background: ${backgroundColor}; color: ${textColor}; border-radius: 50%; width: 20px; height: 20px; border: 2px solid ${borderColor}; box-shadow: 0 2px 4px rgba(0,0,0,0.3);\">\n                    ${order}\n                  </div>\n                  `,\n                  className: `route-optimization-point-icon ${isCompleted ? 'completed' : 'active'}`,\n                  iconSize: [24, 24],\n                  iconAnchor: [12, 12],\n                  popupAnchor: [0, -12],\n                });\n                const marker = L.marker(latlng, { icon });\n\n                return marker;\n              }\n            } else if (type === 'point') {\n              // 一般點類型\n              const icon = L.divIcon({\n                html: `<div\n                class=\"rounded-circle\"\n                style=\"\n                   background-color: var(--my-color-${colorName});\n                   width: 8px;\n                   height: 8px;\n                   box-shadow: 0 2px 6px rgba(0,0,0,0.3);\n                 \">\n                 </div>`, // HTML 內容：圓形標記\n                className: '', // 移除不必要的 CSS 類名\n                iconSize: [8, 8], // 圖標尺寸\n                iconAnchor: [4, 4], // 圖標錨點\n                popupAnchor: [0, -4], // 彈窗錨點\n              });\n              return L.marker(latlng, { icon }); // 返回標記實例\n            }\n            return null; // 非點類型返回 null\n          },\n          // 樣式設定函數\n          style: (feature) => {\n            // 路徑規劃路線的特殊樣式處理\n            if (layer.isRoutePlanningLayer && feature.properties.type === 'route-line') {\n              return {\n                color: 'var(--my-color-orange)', // 橘色路線\n                weight: 4, // 路線粗細\n                opacity: 0.8, // 路線透明度\n                lineCap: 'round', // 線條端點樣式\n                lineJoin: 'round', // 線條連接樣式\n                dashArray: null, // 實線\n              };\n            }\n            // 路徑優化路線的特殊樣式處理\n            if (\n              layer.isRouteOptimizationLayer &&\n              feature.properties.type === 'optimized-route-line'\n            ) {\n              return {\n                color: 'var(--my-color-purple)', // 紫色路線\n                weight: 4, // 路線粗細\n                opacity: 0.8, // 路線透明度\n                lineCap: 'round', // 線條端點樣式\n                lineJoin: 'round', // 線條連接樣式\n                dashArray: null, // 實線\n              };\n            }\n            // 等時圈多邊形的特殊樣式處理\n            if (\n              layer.isIsochroneAnalysisLayer &&\n              feature.properties.type === 'isochrone-polygon-analysis'\n            ) {\n              return {\n                color: 'var(--my-color-blue)',\n                weight: 2,\n                opacity: 0.8,\n                fillColor: 'var(--my-color-blue)',\n                fillOpacity: 0.3,\n              };\n            }\n            // 只有polygon返回預設樣式物件\n            if (layer.type == 'polygon') {\n              //if (feature.properties.fillColor) {\n              return {\n                fillColor: feature.properties.fillColor, // 填充顏色\n                weight: 1, // 邊框粗細\n                opacity: 1, // 邊框透明度\n                color: feature.properties.color || 'white', // 邊框顏色\n                fillOpacity: feature.properties.fillColor ? 0.6 : 0, // 填充透明度\n              };\n            }\n          },\n          // 每個要素的處理函數\n          onEachFeature: (feature, layer) => {\n            // 創建彈窗內容 HTML\n            // const properties = Object.entries(feature.properties.popupData) // 獲取彈窗資料項目\n            //   .map(\n            //     ([key, value]) =>\n            //       `<div class=\"pb-2\">\n            //          <div class=\"my-title-xs-gray pb-1\">${key}</div>\n            //          <div class=\"my-content-sm-black pb-1\">${value}</div>\n            //        </div>` // 格式化每個資料項目\n            //   )\n            //   .join(''); // 合併所有項目\n\n            // 綁定彈窗到圖層\n            // layer.bindPopup(`\n            //   <div class=\"p-2\">\n            //     <div class=\"my-title-sm-gray pb-2\">${layerName}</div>\n            //     ${properties}\n            //   </div>\n            // `);\n\n            // 為分析圖層設定特殊的 popup 配置\n            if (layer.isAnalysisLayer) {\n              layer.bindPopup(\n                `\n                <div class=\"\">\n                  <div class=\"my-title-xs-gray pb-2\">${layerName}</div>\n                  <div class=\"my-content-sm-black\">${feature.properties.name}</div>\n                </div>\n              `,\n                {\n                  className: 'analysis-popup',\n                  offset: [0, -5], // 調整偏移量\n                  closeButton: true,\n                  autoClose: false,\n                  closeOnClick: false,\n                }\n              );\n            } else if (layer.isIsochroneAnalysisLayer) {\n              layer.bindPopup(\n                `\n                <div class=\"\">\n                  <div class=\"my-title-xs-gray pb-2\">${layerName}</div>\n                  <div class=\"my-content-sm-black\">${feature.properties.name}</div>\n                </div>\n              `,\n                {\n                  className: 'isochrone-analysis-popup',\n                  offset: [0, -5], // 調整偏移量\n                  closeButton: true,\n                  autoClose: false,\n                  closeOnClick: false,\n                }\n              );\n            } else if (layer.isRoutePlanningLayer) {\n              // 根據要素類型設定不同的彈出視窗\n              if (feature.properties.type === 'route-planning-point') {\n                // 路徑規劃點的彈出視窗\n                const isCompleted = feature.properties.status === 'completed';\n                const popupContent = isCompleted\n                  ? `\n                  <div class=\"\">\n                    <div class=\"my-title-xs-gray pb-2\">${layerName}</div>\n                    <div class=\"my-content-sm-black\">${feature.properties.name}</div>\n                    <div class=\"my-content-xs-gray pt-1\">順序: ${feature.properties.order}</div>\n                    <div class=\"my-content-xs-gray\">所屬路線: 路線 ${feature.properties.routeNumber}</div>\n                    <div class=\"my-content-xs-gray\">狀態: 已完成</div>\n                  </div>\n                `\n                  : `\n                  <div class=\"\">\n                    <div class=\"my-title-xs-gray pb-2\">${layerName}</div>\n                    <div class=\"my-content-sm-black\">${feature.properties.name}</div>\n                    <div class=\"my-content-xs-gray pt-1\">順序: ${feature.properties.order}</div>\n                    <div class=\"my-content-xs-gray\">狀態: 規劃中</div>\n                  </div>\n                `;\n\n                layer.bindPopup(popupContent, {\n                  className: `route-planning-popup ${isCompleted ? 'completed' : 'active'}`,\n                  offset: [0, -5],\n                  closeButton: true,\n                  autoClose: false,\n                  closeOnClick: false,\n                });\n              } else if (feature.properties.type === 'route-line') {\n                // 路徑規劃路線的彈出視窗\n                layer.bindPopup(\n                  `\n                  <div class=\"\">\n                    <div class=\"my-title-xs-gray pb-2\">${layerName}</div>\n                    <div class=\"my-content-sm-black\">${feature.properties.name}</div>\n                    <div class=\"my-content-xs-gray pt-1\">總距離: ${feature.properties.distance} 公里</div>\n                    <div class=\"my-content-xs-gray\">預估時間: ${feature.properties.duration} 分鐘</div>\n                    <div class=\"my-content-xs-gray\">路徑點數: ${feature.properties.waypoints} 個</div>\n                  </div>\n                `,\n                  {\n                    className: 'route-planning-popup route-line-popup',\n                    offset: [0, -5],\n                    closeButton: true,\n                    autoClose: false,\n                    closeOnClick: false,\n                  }\n                );\n              }\n            } else {\n              layer.bindPopup(`\n                <div class=\"\">\n                  <div class=\"my-title-xs-gray pb-2\">${layerName}</div>\n                  <div class=\"my-content-sm-black\">${feature.properties.name}</div>\n                </div>\n              `);\n            }\n\n            // 綁定滑鼠事件\n            layer.on({\n              // 滑鼠懸停事件\n              mouseover: function () {\n                // 如果處於點擊模式，禁用 hover 效果\n                if (\n                  isClickMode.value ||\n                  isIsochroneClickMode.value ||\n                  isRoutePlanningClickMode.value\n                ) {\n                  return;\n                }\n\n                // 分析圖層的特殊處理\n                if (layer.isAnalysisLayer || feature.properties.layerId === 'analysis-layer') {\n                  if (feature.properties.type === 'point-analysis') {\n                    // 分析點不需要懸停效果，直接返回\n                    return;\n                  } else if (feature.properties.type === 'circle-analysis') {\n                    // 分析圓圈懸停效果\n                    if (!this._originalStyle) {\n                      this._originalStyle = {\n                        weight: this.options.weight,\n                        color: this.options.color,\n                        fillOpacity: this.options.fillOpacity,\n                      };\n                    }\n                    this.setStyle({\n                      weight: 2,\n                      fillOpacity: 0.4,\n                    });\n                  }\n                } else if (\n                  layer.isIsochroneAnalysisLayer ||\n                  feature.properties.layerId === 'isochrone-analysis-layer'\n                ) {\n                  if (feature.properties.type === 'isochrone-point-analysis') {\n                    // 等時圈分析點不需要懸停效果，直接返回\n                    return;\n                  } else if (feature.properties.type === 'isochrone-circle-analysis') {\n                    // 等時圈分析圓圈懸停效果\n                    if (!this._originalStyle) {\n                      this._originalStyle = {\n                        weight: this.options.weight,\n                        color: this.options.color,\n                        fillOpacity: this.options.fillOpacity,\n                      };\n                    }\n                    this.setStyle({\n                      weight: 2,\n                      fillOpacity: 0.4,\n                    });\n                  } else if (feature.properties.type === 'isochrone-polygon-analysis') {\n                    // 等時圈多邊形懸停效果\n                    if (!this._originalStyle) {\n                      this._originalStyle = {\n                        weight: this.options.weight,\n                        color: this.options.color,\n                        fillOpacity: this.options.fillOpacity,\n                      };\n                    }\n                    this.setStyle({\n                      weight: 3,\n                      fillOpacity: 0.5,\n                    });\n                  }\n                } else if (\n                  layer.isRoutePlanningLayer ||\n                  feature.properties.layerId === 'route-planning-layer'\n                ) {\n                  if (feature.properties.type === 'route-planning-point') {\n                    // 路徑規劃點不需要懸停效果，直接返回\n                    return;\n                  } else if (feature.properties.type === 'route-line') {\n                    // 路徑規劃路線懸停效果\n                    if (!this._originalStyle) {\n                      this._originalStyle = {\n                        weight: this.options.weight,\n                        color: this.options.color,\n                        opacity: this.options.opacity,\n                      };\n                    }\n                    this.setStyle({\n                      weight: 6, // 加粗路線\n                      opacity: 1.0, // 增加透明度\n                      color: 'var(--my-color-orange-hover)', // 使用深橘色\n                    });\n                    this.bringToFront(); // 置於最前層\n                  }\n                } else if (type === 'point') {\n                  // 一般點類型處理\n                  const element = this.getElement();\n                  if (element) {\n                    const innerIconDiv = element.querySelector('div');\n                    if (innerIconDiv) {\n                      innerIconDiv.style.transition = 'transform 0.04s ease-in-out';\n                      innerIconDiv.style.transform = 'scale(1.6)';\n                    }\n                  }\n                } else if (type === 'polygon' && feature.properties.fillColor !== null) {\n                  // 多邊形類型處理\n                  if (!this._originalStyle) {\n                    this._originalStyle = {\n                      weight: this.options.weight,\n                      color: this.options.color,\n                      fillOpacity: this.options.fillOpacity,\n                    };\n                  }\n                  this.setStyle({\n                    weight: 4,\n                    color: 'white',\n                    fillOpacity: 0.8,\n                  });\n                  this.bringToFront();\n                }\n              },\n              // 滑鼠離開事件\n              mouseout: function () {\n                // 如果處於點擊模式，禁用 hover 效果\n                if (\n                  isClickMode.value ||\n                  isIsochroneClickMode.value ||\n                  isRoutePlanningClickMode.value\n                ) {\n                  return;\n                }\n\n                // 只有在沒有被選中的情況下才恢復原始樣式\n                const isSelected =\n                  dataStore.selectedFeature &&\n                  dataStore.selectedFeature.properties.id === feature.properties.id;\n\n                if (!isSelected) {\n                  // 分析圖層的特殊處理\n                  if (layer.isAnalysisLayer || feature.properties.layerId === 'analysis-layer') {\n                    if (feature.properties.type === 'point-analysis') {\n                      // 分析點不需要恢復效果，直接返回\n                      return;\n                    } else if (feature.properties.type === 'circle-analysis') {\n                      // 分析圓圈恢復\n                      if (this._originalStyle) {\n                        this.setStyle(this._originalStyle);\n                      }\n                    }\n                  } else if (\n                    layer.isIsochroneAnalysisLayer ||\n                    feature.properties.layerId === 'isochrone-analysis-layer'\n                  ) {\n                    if (feature.properties.type === 'isochrone-point-analysis') {\n                      // 等時圈分析點不需要恢復效果，直接返回\n                      return;\n                    } else if (feature.properties.type === 'isochrone-circle-analysis') {\n                      // 等時圈分析圓圈恢復\n                      if (this._originalStyle) {\n                        this.setStyle(this._originalStyle);\n                      }\n                    } else if (feature.properties.type === 'isochrone-polygon-analysis') {\n                      // 等時圈多邊形恢復\n                      if (this._originalStyle) {\n                        this.setStyle(this._originalStyle);\n                      }\n                    }\n                  } else if (\n                    layer.isRoutePlanningLayer ||\n                    feature.properties.layerId === 'route-planning-layer'\n                  ) {\n                    if (feature.properties.type === 'route-planning-point') {\n                      // 路徑規劃點不需要恢復效果，直接返回\n                      return;\n                    } else if (feature.properties.type === 'route-line') {\n                      // 路徑規劃路線恢復\n                      if (this._originalStyle) {\n                        this.setStyle(this._originalStyle);\n                      }\n                    }\n                  } else if (type === 'point') {\n                    // 一般點類型處理\n                    const element = this.getElement();\n                    if (element) {\n                      const innerIconDiv = element.querySelector('div');\n                      if (innerIconDiv) {\n                        innerIconDiv.style.transform = '';\n                      }\n                    }\n                  } else if (type === 'polygon') {\n                    // 多邊形類型處理\n                    if (this._originalStyle) {\n                      this.setStyle(this._originalStyle);\n                    } else {\n                      geoJsonLayer.resetStyle(this);\n                    }\n                  }\n                }\n              },\n              // 點擊事件\n              click: function (e) {\n                // 如果處於數據分析點擊模式，阻止圖層選擇並添加分析點\n                if (isClickMode.value) {\n                  e.originalEvent.stopPropagation();\n                  addAnalysisPoint(e.latlng.lat, e.latlng.lng);\n                  return false;\n                }\n\n                // 如果處於等時圈分析點擊模式，阻止圖層選擇並添加等時圈分析點\n                if (isIsochroneClickMode.value) {\n                  e.originalEvent.stopPropagation();\n                  addIsochroneAnalysisPoint(e.latlng.lat, e.latlng.lng);\n                  return false;\n                }\n\n                // 如果處於路徑規劃點擊模式，阻止圖層選擇並添加路徑規劃點\n                if (isRoutePlanningClickMode.value) {\n                  e.originalEvent.stopPropagation();\n                  addRoutePlanningPoint(e.latlng.lat, e.latlng.lng);\n                  return false; // 阻止事件繼續傳播\n                }\n\n                // 如果處於路徑優化點擊模式，阻止圖層選擇並添加路徑優化點\n                if (isRouteOptimizationClickMode.value) {\n                  e.originalEvent.stopPropagation();\n                  addRouteOptimizationPoint(e.latlng.lat, e.latlng.lng);\n                  return false; // 阻止事件繼續傳播\n                }\n\n                // 分析點不參與選擇，直接返回\n                if (\n                  (layer.isAnalysisLayer || feature.properties.layerId === 'analysis-layer') &&\n                  feature.properties.type === 'point-analysis'\n                ) {\n                  return;\n                }\n\n                // 等時圈分析點不參與選擇，直接返回\n                if (\n                  (layer.isIsochroneAnalysisLayer ||\n                    feature.properties.layerId === 'isochrone-analysis-layer') &&\n                  feature.properties.type === 'isochrone-point-analysis'\n                ) {\n                  return;\n                }\n\n                dataStore.setSelectedFeature(feature); // 設定選中的要素到資料存儲\n                emit('feature-selected', feature); // 發送要素選中事件\n              },\n              // 右鍵點擊事件\n              contextmenu: function (e) {\n                // 只有分析圖層的圓圈才顯示右鍵菜單\n                if (\n                  (layer.isAnalysisLayer || feature.properties.layerId === 'analysis-layer') &&\n                  feature.properties.type === 'circle-analysis'\n                ) {\n                  showAnalysisContextMenu(e.originalEvent, feature);\n                }\n\n                // 只有等時圈分析圖層的圓圈或多邊形才顯示右鍵菜單\n                if (\n                  (layer.isIsochroneAnalysisLayer ||\n                    feature.properties.layerId === 'isochrone-analysis-layer') &&\n                  (feature.properties.type === 'isochrone-circle-analysis' ||\n                    feature.properties.type === 'isochrone-polygon-analysis')\n                ) {\n                  showIsochroneAnalysisContextMenu(e.originalEvent, feature);\n                }\n              },\n            });\n          },\n        });\n\n        return geoJsonLayer; // 返回創建的 GeoJSON 圖層\n      };\n\n      // 🔄 重設所有圖層樣式函數 (Reset All Layer Styles Function)\n      const resetAllLayerStyles = () => {\n        Object.values(layerGroups).forEach((layerGroup) => {\n          if (layerGroup) {\n            layerGroup.eachLayer((layer) => {\n              const feature = layer.feature;\n              if (feature) {\n                const layerData = dataStore.findLayerById(feature.properties.layerId);\n                const type = layerData?.type;\n\n                // 分析圖層的特殊處理\n                if (layerData?.isAnalysisLayer || feature.properties.layerId === 'analysis-layer') {\n                  if (feature.properties.type === 'point-analysis') {\n                    // 分析點不需要特殊處理\n                    return;\n                  } else if (feature.properties.type === 'circle-analysis') {\n                    // 分析圓圈重設\n                    if (layer._originalStyle) {\n                      layer.setStyle(layer._originalStyle);\n                    }\n                  }\n                } else if (type === 'point') {\n                  // 一般點類型處理\n                  const element = layer.getElement();\n                  if (element) {\n                    const innerIconDiv = element.querySelector('div');\n                    if (innerIconDiv) {\n                      innerIconDiv.style.transform = '';\n                    }\n                  }\n                } else if (type === 'polygon') {\n                  // 多邊形類型處理\n                  if (layer._originalStyle) {\n                    layer.setStyle(layer._originalStyle);\n                  } else if (layerGroup.resetStyle) {\n                    layerGroup.resetStyle(layer);\n                  }\n                }\n              }\n            });\n          }\n        });\n      };\n\n      // 🔄 同步圖層函數 (Sync Layers Function)\n      const syncLayers = () => {\n        // 檢查地圖實例和準備狀態\n        if (!mapInstance || !isMapReady.value) return;\n\n        // 獲取資料存儲中的所有圖層\n        const storeLayers = dataStore.getAllLayers();\n        // 獲取當前地圖上的圖層 ID 列表\n        const currentLayerIds = Object.keys(layerGroups);\n        // 篩選出可見且有資料的圖層（分析圖層總是有空的 features 數組）\n        const visibleLayers = storeLayers.filter((l) => l.visible && l.geoJsonData);\n        const visibleLayerIds = visibleLayers.map((l) => l.layerId);\n\n        // 找出新增的圖層（不在當前地圖上但在可見列表中的圖層）\n        const newLayerIds = visibleLayerIds.filter((id) => !currentLayerIds.includes(id));\n        // 找出需要移除的圖層（在當前地圖上但不在可見列表中的圖層）\n        const layersToRemove = currentLayerIds.filter((id) => !visibleLayerIds.includes(id));\n\n        console.log(`🔄 圖層同步: 新增 ${newLayerIds.length} 個, 移除 ${layersToRemove.length} 個`);\n\n        // 只移除不可見的圖層，避免不必要的重新渲染\n        layersToRemove.forEach((layerId) => {\n          if (layerGroups[layerId]) {\n            mapInstance.removeLayer(layerGroups[layerId]);\n            delete layerGroups[layerId];\n            console.log(`🗺️ 移除圖層: ${layerId}`);\n          }\n        });\n\n        // 檢查是否有分析圖層需要更新\n        const hasAnalysisLayerUpdate = visibleLayers.some((layer) => layer.isAnalysisLayer);\n\n        // 如果有分析圖層更新，需要重新渲染所有圖層以保持正確順序\n        if (hasAnalysisLayerUpdate) {\n          // 移除所有現有圖層\n          Object.keys(layerGroups).forEach((layerId) => {\n            if (layerGroups[layerId]) {\n              mapInstance.removeLayer(layerGroups[layerId]);\n              delete layerGroups[layerId];\n            }\n          });\n        }\n\n        // 用於收集新添加的圖層，以便後續自動縮放\n        const newAddedLayers = [];\n\n        // 按照 layers 的反轉順序處理所有可見圖層（這樣第一個圖層會在最底層）\n        visibleLayers\n          .slice()\n          .reverse()\n          .forEach((layer) => {\n            const { layerId } = layer;\n\n            // 如果有分析圖層更新，所有圖層都需要重新創建\n            // 否則只有不存在的圖層才創建\n            const shouldCreateLayer = hasAnalysisLayerUpdate || !layerGroups[layerId];\n\n            if (!shouldCreateLayer) return;\n\n            try {\n              const newLayer = createFeatureLayer(layer);\n              if (newLayer) {\n                if (layer.isAnalysisLayer) {\n                  newLayer.isAnalysisLayer = true;\n                }\n                newLayer.addTo(mapInstance);\n                layerGroups[layerId] = newLayer;\n\n                // 如果是新添加的圖層，收集起來用於自動縮放（分析圖層不需要縮放）\n                if (newLayerIds.includes(layerId) && !layer.isAnalysisLayer) {\n                  newAddedLayers.push(newLayer);\n                }\n\n                console.log(`🗺️ 圖層 \"${layer.layerName}\" 已添加到地圖`);\n              }\n            } catch (error) {\n              console.error(`添加圖層 \"${layer.layerName}\" 時發生錯誤:`, error);\n            }\n          });\n\n        // 只有在有新添加的非分析圖層時才自動縮放\n        if (newAddedLayers.length > 0) {\n          const bounds = new L.LatLngBounds();\n          let hasValidBounds = false;\n\n          newAddedLayers.forEach((layer) => {\n            if (layer && layer.getBounds) {\n              const layerBounds = layer.getBounds();\n              if (layerBounds.isValid()) {\n                bounds.extend(layerBounds);\n                hasValidBounds = true;\n              }\n            }\n          });\n\n          if (hasValidBounds) {\n            setTimeout(() => {\n              mapInstance.fitBounds(bounds, { padding: [50, 50] });\n              console.log(`🎯 自動縮放到新添加的 ${newAddedLayers.length} 個圖層範圍`);\n            }, 200); // 稍微延遲確保圖層完全載入\n          }\n        }\n\n        // 計算並更新標記總數\n        const totalMarkers = Object.values(layerGroups).reduce(\n          (acc, layer) => acc + (layer.getLayers ? layer.getLayers().length : 0), // 累加每個圖層的要素數量\n          0 // 初始值為 0\n        );\n        emit('update:activeMarkers', totalMarkers); // 發送標記數量更新事件\n\n        console.log(`🗺️ 圖層同步完成，共 ${visibleLayers.length} 個可見圖層`); // 輸出同步完成訊息\n      };\n\n      // 🔍 顯示全部要素函數 (Show All Features Function) - 顯示圖面所有資料\n      const showAllFeatures = () => {\n        // 檢查地圖實例、準備狀態和圖層可見性\n        if (!mapInstance || !isMapReady.value || !isAnyLayerVisible.value) return;\n\n        // 創建邊界框物件用於計算所有要素的範圍\n        const bounds = new L.LatLngBounds(); // 初始化 Leaflet 邊界框\n        let hasValidBounds = false; // 標記是否有有效的邊界\n\n        // 遍歷所有圖層群組計算邊界\n        Object.values(layerGroups).forEach((layer) => {\n          if (layer && layer.getBounds) {\n            // 檢查圖層是否有 getBounds 方法\n            const layerBounds = layer.getBounds(); // 獲取圖層邊界\n            if (layerBounds.isValid()) {\n              // 檢查邊界是否有效\n              bounds.extend(layerBounds); // 擴展總邊界框\n              hasValidBounds = true; // 標記有有效邊界\n            }\n          }\n        });\n\n        // 如果有有效邊界，調整地圖視圖以包含所有要素\n        if (hasValidBounds) {\n          mapInstance.fitBounds(bounds, { padding: [50, 50] }); // 設定地圖視圖並添加內邊距\n        }\n      };\n\n      // 🌍 顯示全市函數 (Show Full City Function) - 回到預設地圖範圍\n      const showFullCity = () => {\n        // 檢查地圖實例和準備狀態\n        if (!mapInstance || !isMapReady.value) return;\n\n        // 使用固定的台北市預設範圍，不依賴當前存儲的值\n        const defaultCenter = [25.051474, 121.557989]; // 台北市中心\n        const defaultZoom = 11; // 適合台北市的縮放等級\n\n        console.log(`🌍 顯示全市: 中心點 ${defaultCenter}, 縮放等級 ${defaultZoom}`);\n\n        // 回到預設的地圖中心和縮放等級\n        mapInstance.setView(defaultCenter, defaultZoom);\n\n        // 同時更新 defineStore 中的值，保持一致性\n        defineStore.setMapView(defaultCenter, defaultZoom);\n      };\n\n      // 🎯 高亮顯示特定要素函數 (Highlight Specific Feature Function)\n      const highlightFeature = (highlightData) => {\n        console.log('🎯 開始高亮顯示要素:', highlightData); // 輸出開始高亮的訊息\n\n        // 檢查地圖是否準備就緒\n        if (!mapInstance || !isMapReady.value) {\n          console.warn('⚠️ 地圖尚未準備就緒，延遲執行高亮顯示'); // 輸出警告訊息\n          setTimeout(() => highlightFeature(highlightData), 200); // 延遲 200ms 後重試\n          return;\n        }\n\n        // 檢查是否有圖層群組\n        if (!layerGroups || Object.keys(layerGroups).length === 0) {\n          console.warn('⚠️ 圖層群組尚未載入，延遲執行高亮顯示'); // 輸出警告訊息\n          setTimeout(() => highlightFeature(highlightData), 200); // 延遲 200ms 後重試\n          return;\n        }\n\n        // 解析高亮資料\n        let targetLayerId, targetFeatureId; // 宣告目標圖層 ID 和要素 ID\n\n        // 檢查高亮資料是否為物件格式\n        if (typeof highlightData === 'object' && highlightData !== null) {\n          targetLayerId = highlightData.layerId; // 從物件中獲取圖層 ID\n          targetFeatureId = highlightData.id; // 從物件中獲取要素 ID\n        } else {\n          targetFeatureId = highlightData; // 直接使用作為要素 ID\n        }\n\n        console.log(`🔍 尋找要素: layerId=\"${targetLayerId}\", featureId=\"${targetFeatureId}\"`); // 輸出搜尋資訊\n        console.log('🔍 可用的圖層群組:', Object.keys(layerGroups)); // 輸出可用圖層列表\n\n        // 執行高亮顯示的核心邏輯函數\n        const performHighlight = () => {\n          // 重置所有圖層樣式\n          resetAllLayerStyles();\n\n          // 初始化目標要素搜尋變數\n          let targetLayer = null; // 目標圖層實例\n          let targetFeature = null; // 目標要素物件\n\n          // 如果指定了圖層 ID，在特定圖層中搜尋\n          if (targetLayerId && layerGroups[targetLayerId]) {\n            console.log(`🔍 在指定圖層 \"${targetLayerId}\" 中尋找要素`); // 輸出搜尋訊息\n            const specificLayerGroup = layerGroups[targetLayerId]; // 獲取指定圖層群組\n\n            // 遍歷圖層中的每個要素\n            specificLayerGroup.eachLayer((layer) => {\n              const feature = layer.feature; // 獲取要素物件\n              if (feature && feature.properties) {\n                // 檢查要素是否有屬性\n                // 獲取要素 ID\n                const featureId = feature.properties.id;\n\n                console.log(`🔍 檢查要素 ID: ${featureId} (目標: ${targetFeatureId})`); // 輸出檢查訊息\n\n                // 比較要素 ID（轉換為字串進行比較）\n                if (String(featureId) === String(targetFeatureId)) {\n                  targetLayer = layer; // 設定目標圖層\n                  targetFeature = feature; // 設定目標要素\n                  console.log(`✅ 在圖層 \"${targetLayerId}\" 中找到要素 \"${targetFeatureId}\"`); // 輸出找到訊息\n                  return;\n                }\n              }\n            });\n          } else {\n            console.log('🔍 在所有圖層中尋找要素'); // 輸出搜尋訊息\n            // 在所有圖層中尋找要素\n            for (const [layerId, layerGroup] of Object.entries(layerGroups)) {\n              console.log(`🔍 檢查圖層: ${layerId}`); // 輸出當前檢查的圖層\n              // 遍歷圖層中的每個要素\n              layerGroup.eachLayer((layer) => {\n                const feature = layer.feature; // 獲取要素物件\n                if (feature && feature.properties) {\n                  // 檢查要素是否有屬性\n                  const featureId = feature.properties.id; // 獲取要素 ID\n\n                  console.log(`🔍 檢查要素 ID: ${featureId} (目標: ${targetFeatureId})`); // 輸出檢查訊息\n\n                  // 比較要素 ID（轉換為字串進行比較）\n                  if (String(featureId) === String(targetFeatureId)) {\n                    targetLayer = layer; // 設定目標圖層\n                    targetFeature = feature; // 設定目標要素\n                    targetLayerId = layerId; // 設定目標圖層 ID\n                    console.log(`✅ 在圖層 \"${layerId}\" 中找到要素 \"${targetFeatureId}\"`); // 輸出找到訊息\n                    return;\n                  }\n                }\n              });\n              if (targetLayer) break; // 如果找到目標圖層，跳出迴圈\n            }\n          }\n\n          // 如果找到目標圖層和要素，執行高亮顯示\n          if (targetLayer && targetFeature) {\n            // 設置選中的特徵到資料存儲\n            dataStore.setSelectedFeature(targetFeature); // 更新選中要素狀態\n            console.log('🎯 設置選中特徵到 store'); // 輸出設置訊息\n\n            // 根據要素類型執行不同的高亮效果\n            if (targetLayer.feature?.geometry?.type === 'Point') {\n              // 點要素處理\n              const element = targetLayer.getElement(); // 獲取 DOM 元素\n              if (element) {\n                // 找到圖標內部的樣式 div\n                const innerIconDiv = element.querySelector('div');\n                if (innerIconDiv) {\n                  innerIconDiv.style.transition = 'transform 0.04s ease-in-out'; // 設定過渡動畫\n                  innerIconDiv.style.transform = 'scale(1.6)'; // 放大效果\n                }\n                // 設定最高層級確保圖標在最上方\n                element.style.zIndex = 1000;\n              }\n            } else {\n              // 面要素處理\n              // 面要素高亮 - 只對有 setStyle 方法的圖層調用\n              if (targetLayer.setStyle) {\n                if (targetLayer.feature?.properties?.fillColor) {\n                  targetLayer.setStyle({\n                    weight: 4, // 增加邊框粗細\n                    color: 'white', // 設定邊框顏色\n                    fillOpacity: 0.8, // 增加填充透明度\n                  });\n                } else {\n                  targetLayer.setStyle({\n                    weight: 4, // 增加邊框粗細\n                  });\n                }\n              }\n            }\n\n            // 將圖層置於最前方\n            if (targetLayer.bringToFront) {\n              // 檢查圖層是否有置前方法\n              targetLayer.bringToFront(); // 將圖層移到最前方\n            }\n\n            // 定位到要素位置\n            let bounds; // 宣告邊界變數\n            if (targetLayer.getBounds) {\n              // 如果圖層有 getBounds 方法（面要素）\n              bounds = targetLayer.getBounds(); // 獲取圖層邊界\n            } else if (targetLayer.getLatLng) {\n              // 如果圖層有 getLatLng 方法（點要素）\n              const latlng = targetLayer.getLatLng(); // 獲取點座標\n              bounds = L.latLngBounds([latlng, latlng]); // 創建點的邊界框\n            }\n\n            // 如果有有效邊界，調整地圖視圖\n            if (bounds && bounds.isValid()) {\n              mapInstance.fitBounds(bounds, {\n                maxZoom: 16, // 最大縮放等級限制\n                padding: [50, 50], // 邊界內邊距\n              });\n\n              // 延遲打開彈窗以確保地圖移動完成\n              setTimeout(() => {\n                if (targetLayer.openPopup) {\n                  // 檢查圖層是否有打開彈窗方法\n                  targetLayer.openPopup(); // 打開彈窗\n                }\n              }, 500); // 延遲 500ms\n            }\n\n            console.log('✅ 顯示位置功能完成'); // 輸出完成訊息\n            return true; // 返回成功狀態\n          } else {\n            // 如果未找到目標要素，輸出警告訊息\n            console.warn(\n              `❌ 找不到要素 \"${targetFeatureId}\"${targetLayerId ? ` 在圖層 \"${targetLayerId}\" 中` : ''}`\n            );\n            return false; // 返回失敗狀態\n          }\n        };\n\n        // 嘗試執行高亮顯示，如果失敗則重試\n        const success = performHighlight(); // 執行高亮顯示\n        if (!success) {\n          // 如果第一次失敗\n          console.log('🔄 第一次高亮顯示失敗，1秒後重試...'); // 輸出重試訊息\n          setTimeout(() => {\n            const retrySuccess = performHighlight(); // 重試執行高亮顯示\n            if (!retrySuccess) {\n              // 如果重試仍失敗\n              console.error('❌ 重試後仍無法高亮顯示要素'); // 輸出錯誤訊息\n            }\n          }, 1000); // 延遲 1 秒重試\n        }\n      };\n\n      // 🔄 刷新地圖尺寸函數 (Invalidate Map Size Function)\n      const invalidateSize = () => {\n        // 檢查地圖實例和準備狀態\n        if (mapInstance && isMapReady.value) {\n          nextTick(() => {\n            // 等待 DOM 更新完成\n            try {\n              // 檢查容器是否有效\n              if (mapContainer.value) {\n                const rect = mapContainer.value.getBoundingClientRect();\n                if (rect.width === 0 || rect.height === 0) {\n                  console.warn('🔄 地圖容器尺寸為零，嘗試重新初始化地圖');\n                  // 如果容器尺寸為零，嘗試重新初始化\n                  setTimeout(() => {\n                    if (mapContainer.value) {\n                      const newRect = mapContainer.value.getBoundingClientRect();\n                      if (newRect.width > 0 || newRect.height > 0) {\n                        mapInstance.invalidateSize();\n                        console.log('🗺️ 地圖尺寸已重新初始化');\n                      }\n                    }\n                  }, 100);\n                  return;\n                }\n              }\n\n              mapInstance.invalidateSize(); // 刷新地圖尺寸\n              console.log('🗺️ 地圖尺寸已刷新'); // 輸出成功訊息\n            } catch (error) {\n              console.error('❌ 刷新地圖尺寸時發生錯誤:', error); // 輸出錯誤訊息\n            }\n          });\n        } else if (!mapInstance) {\n          console.warn('🔄 地圖實例不存在，嘗試重新初始化');\n          // 如果地圖實例不存在，嘗試重新初始化\n          setTimeout(() => {\n            initMap();\n          }, 200);\n        }\n      };\n\n      // 加入分析點\n      const addAnalysisPoint = (lat, lng) => {\n        dataStore.addAnalysisPoint(lat, lng);\n      };\n\n      // 加入等時圈分析點\n      const addIsochroneAnalysisPoint = async (lat, lng) => {\n        try {\n          await dataStore.addIsochroneAnalysisPoint(lat, lng);\n        } catch (error) {\n          console.error('添加等時圈分析點失敗:', error);\n        }\n      };\n\n      // 開始點擊模式\n      const startClickMode = () => {\n        // 🔄 互斥邏輯：關閉其他點擊模式\n        if (isIsochroneClickMode.value) {\n          stopIsochroneClickMode();\n        }\n        if (isRoutePlanningClickMode.value) {\n          finishRoutePlanningClickMode();\n        }\n\n        isClickMode.value = true;\n        if (mapInstance) {\n          const mapContainer = mapInstance.getContainer();\n          mapContainer.style.cursor = 'crosshair';\n          // 為所有子元素設定十字游標\n          mapContainer.classList.add('click-mode-active');\n        }\n        console.log('🖱️ 開始數據分析點擊模式（自動關閉等時圈分析模式）');\n      };\n\n      // 停止點擊模式\n      const stopClickMode = () => {\n        isClickMode.value = false;\n        if (mapInstance) {\n          const mapContainer = mapInstance.getContainer();\n          mapContainer.style.cursor = '';\n          // 移除十字游標類別\n          mapContainer.classList.remove('click-mode-active');\n        }\n        console.log('🛑 停止地圖點擊模式');\n      };\n\n      // 開始等時圈點擊模式\n      const startIsochroneClickMode = () => {\n        // 🔄 互斥邏輯：關閉其他點擊模式\n        if (isClickMode.value) {\n          stopClickMode();\n        }\n        if (isRoutePlanningClickMode.value) {\n          finishRoutePlanningClickMode();\n        }\n\n        isIsochroneClickMode.value = true;\n        if (mapInstance) {\n          const mapContainer = mapInstance.getContainer();\n          mapContainer.style.cursor = 'crosshair';\n          // 為所有子元素設定十字游標\n          mapContainer.classList.add('isochrone-click-mode-active');\n        }\n        console.log('🖱️ 開始等時圈分析點擊模式（自動關閉數據分析模式）');\n      };\n\n      // 停止等時圈點擊模式\n      const stopIsochroneClickMode = () => {\n        isIsochroneClickMode.value = false;\n        if (mapInstance) {\n          const mapContainer = mapInstance.getContainer();\n          mapContainer.style.cursor = '';\n          // 移除十字游標類別\n          mapContainer.classList.remove('isochrone-click-mode-active');\n        }\n        console.log('🛑 停止等時圈分析點擊模式');\n      };\n\n      // 🗺️ ============ 路徑規劃點擊模式相關函數 (Route Planning Click Mode Functions) ============\n\n      // 添加路徑規劃點\n      const addRoutePlanningPoint = async (lat, lng) => {\n        try {\n          const pointId = dataStore.addRoutePlanningPoint(lat, lng);\n          if (pointId) {\n            console.log('🗺️ 成功添加路徑規劃點:', pointId);\n          }\n        } catch (error) {\n          console.error('添加路徑規劃點失敗:', error);\n        }\n      };\n\n      // 開始路徑規劃點擊模式\n      const startRoutePlanningClickMode = () => {\n        // 🔄 互斥邏輯：關閉其他點擊模式\n        if (isClickMode.value) {\n          stopClickMode();\n        }\n        if (isIsochroneClickMode.value) {\n          stopIsochroneClickMode();\n        }\n\n        isRoutePlanningClickMode.value = true;\n        if (mapInstance) {\n          const mapContainer = mapInstance.getContainer();\n          mapContainer.style.cursor = 'crosshair';\n          // 為所有子元素設定十字游標\n          mapContainer.classList.add('route-planning-click-mode-active');\n        }\n        console.log('🖱️ 開始路徑規劃點擊模式（自動關閉其他分析模式）');\n      };\n\n      // 完成路徑規劃點選（替代停止函數）\n      const finishRoutePlanningClickMode = async () => {\n        isRoutePlanningClickMode.value = false;\n        if (mapInstance) {\n          const mapContainer = mapInstance.getContainer();\n          mapContainer.style.cursor = '';\n          // 移除十字游標類別\n          mapContainer.classList.remove('route-planning-click-mode-active');\n        }\n\n        // 獲取當前路徑規劃點數量\n        const coordinates = dataStore.getRoutePlanningCoordinates();\n        console.log(`🛑 完成路徑規劃點選，共選擇了 ${coordinates.length} 個路徑點`);\n\n        // 執行路徑規劃計算\n        if (coordinates.length >= 2) {\n          console.log('📍 路徑規劃點坐標:', coordinates);\n          console.log('🚀 開始計算最佳路線...');\n\n          try {\n            // 調用路徑規劃 API 並繪製路線\n            const routeResult = await dataStore.calculateAndDrawRoute('driving-car');\n\n            if (routeResult) {\n              console.log('✅ 路徑規劃成功完成！');\n              console.log(`📏 路線總距離: ${routeResult.distance} 公里`);\n              console.log(`⏱️ 預估行車時間: ${routeResult.duration} 分鐘`);\n              console.log(`🚗 交通方式: 駕車`);\n\n              // 路徑規劃完成，不顯示彈窗，只在控制台記錄\n              console.log(`🎉 路線 ${routeResult.routeNumber || '新增'} 已保存完成`);\n              console.log(`📍 可以繼續添加下一條路線`);\n            } else {\n              console.warn('⚠️ 路徑規劃計算失敗');\n              alert('路徑規劃失敗，請檢查路徑點是否有效或網路連線。');\n            }\n          } catch (error) {\n            console.error('❌ 路徑規劃過程中發生錯誤:', error);\n            alert(`路徑規劃失敗: ${error.message}`);\n          }\n        } else if (coordinates.length === 1) {\n          console.log('⚠️ 路徑規劃至少需要2個點，目前只有1個點');\n          alert('路徑規劃至少需要2個路徑點，請添加更多路徑點。');\n        } else {\n          console.log('⚠️ 沒有選擇任何路徑規劃點');\n          alert('請先在地圖上選擇路徑點。');\n        }\n      };\n\n      // 🗑️ 清除分析圖層 (Clear Analysis Layer)\n      const clearAnalysisLayer = () => {\n        // 調用 dataStore 的方法清除分析圖層\n        dataStore.clearAnalysisLayer();\n        console.log('🗑️ 清除分析圖層');\n      };\n\n      // 🗺️ ============ 路徑優化點擊模式相關函數 (Route Optimization Click Mode Functions) ============\n\n      // 添加路徑優化點\n      const addRouteOptimizationPoint = async (lat, lng) => {\n        try {\n          const pointId = dataStore.addRouteOptimizationPoint(lat, lng);\n          if (pointId) {\n            console.log('🗺️ 成功添加路徑優化點:', pointId);\n          }\n        } catch (error) {\n          console.error('添加路徑優化點失敗:', error);\n        }\n      };\n\n      // 開始路徑優化點擊模式\n      const startRouteOptimizationClickMode = () => {\n        // 🔄 互斥邏輯：關閉其他點擊模式\n        if (isClickMode.value) {\n          stopClickMode();\n        }\n        if (isIsochroneClickMode.value) {\n          stopIsochroneClickMode();\n        }\n        if (isRoutePlanningClickMode.value) {\n          finishRoutePlanningClickMode();\n        }\n\n        // 開啟路徑優化點擊模式\n        isRouteOptimizationClickMode.value = true;\n\n        if (mapInstance) {\n          const mapContainer = mapInstance.getContainer();\n          mapContainer.style.cursor = 'crosshair';\n          // 為所有子元素設定十字游標\n          mapContainer.classList.add('route-optimization-click-mode-active');\n        }\n\n        // 清空之前的路徑優化點\n        dataStore.clearRouteOptimizationLayer();\n\n        console.log('🖱️ 開始路徑優化點擊模式（自動關閉其他分析模式）');\n        // 路徑優化點擊模式開始，不顯示彈窗，只在控制台記錄\n      };\n\n      // 完成路徑優化點選\n      const finishRouteOptimizationClickMode = async () => {\n        if (!isRouteOptimizationClickMode.value) {\n          console.warn('⚠️ 當前不在路徑優化點擊模式');\n          return;\n        }\n\n        // 停止路徑優化點擊模式\n        isRouteOptimizationClickMode.value = false;\n        isClickMode.value = false;\n        isIsochroneClickMode.value = false;\n        isRoutePlanningClickMode.value = false;\n\n        if (mapInstance) {\n          const mapContainer = mapInstance.getContainer();\n          mapContainer.style.cursor = '';\n          // 移除十字游標類別\n          mapContainer.classList.remove('route-optimization-click-mode-active');\n        }\n\n        // 獲取當前路徑優化點數量\n        const coordinates = dataStore.getRouteOptimizationCoordinates();\n        if (coordinates.length >= 2) {\n          console.log(`🛑 完成路徑優化點選，共選擇了 ${coordinates.length} 個優化點`);\n\n          try {\n            // 執行路徑優化計算\n            const optimizationResult = await dataStore.calculateAndDrawOptimizedRoute();\n            if (optimizationResult) {\n              console.log('✅ 路徑優化成功完成！');\n              console.log('📍 路徑優化點坐標:', coordinates);\n              console.log('📏 優化後距離:', optimizationResult.distance, '公里');\n              console.log('⏱️ 優化後時間:', optimizationResult.duration, '分鐘');\n              console.log('🔄 優化順序:', optimizationResult.optimizedOrder);\n\n              // 顯示路徑優化結果\n              console.log(`🎉 優化路線 ${optimizationResult.routeNumber || '新增'} 已保存完成`);\n              console.log(`📍 可以繼續添加下一條優化路線`);\n\n              // 路徑優化完成，不顯示彈窗，只在控制台記錄\n            } else {\n              console.warn('⚠️ 路徑優化計算失敗');\n              alert('路徑優化失敗，請檢查優化點是否有效或網路連線。');\n            }\n          } catch (error) {\n            console.error('❌ 路徑優化過程中發生錯誤:', error);\n            alert(`路徑優化失敗: ${error.message}`);\n          }\n        } else if (coordinates.length === 1) {\n          console.log('⚠️ 路徑優化至少需要2個點，目前只有1個點');\n          alert('路徑優化至少需要2個優化點，請添加更多優化點。');\n        } else {\n          console.log('⚠️ 沒有選擇任何路徑優化點');\n        }\n      };\n\n      // 🖱️ 顯示右鍵菜單 (Show Context Menu)\n      const showAnalysisContextMenu = (event, feature) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        selectedAnalysisFeature.value = feature;\n        contextMenuPosition.value = {\n          x: event.pageX || event.clientX,\n          y: event.pageY || event.clientY,\n        };\n        showContextMenu.value = true;\n\n        console.log('🖱️ 顯示分析要素右鍵菜單:', feature.properties.name);\n      };\n\n      // 🖱️ 顯示等時圈分析右鍵菜單 (Show Isochrone Analysis Context Menu)\n      const showIsochroneAnalysisContextMenu = (event, feature) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        selectedAnalysisFeature.value = feature;\n        contextMenuPosition.value = {\n          x: event.pageX || event.clientX,\n          y: event.pageY || event.clientY,\n        };\n        showContextMenu.value = true;\n\n        console.log('🖱️ 顯示等時圈分析要素右鍵菜單:', feature.properties.name);\n      };\n\n      // 🗑️ 刪除單個分析點 (Delete Single Analysis Point)\n      const deleteAnalysisPoint = () => {\n        if (!selectedAnalysisFeature.value) return;\n\n        const feature = selectedAnalysisFeature.value;\n        const layerId = feature.properties.layerId;\n\n        let pointId;\n        if (feature.properties.type === 'circle-analysis') {\n          pointId = feature.properties.id;\n        } else if (feature.properties.type === 'isochrone-circle-analysis') {\n          pointId = feature.properties.id;\n        } else if (feature.properties.type === 'isochrone-polygon-analysis') {\n          pointId = feature.properties.id;\n        } else {\n          pointId = feature.properties.parentId;\n        }\n\n        if (!pointId) return;\n\n        // 根據圖層類型調用對應的刪除方法\n        if (layerId === 'analysis-layer') {\n          dataStore.deleteAnalysisPoint(pointId);\n          console.log('🗑️ 刪除分析點:', pointId);\n        } else if (layerId === 'isochrone-analysis-layer') {\n          dataStore.deleteIsochroneAnalysisPoint(pointId);\n          console.log('🗑️ 刪除等時圈分析點:', pointId);\n        }\n\n        // 隱藏右鍵菜單\n        hideContextMenu();\n      };\n\n      // 🚫 隱藏右鍵菜單 (Hide Context Menu)\n      const hideContextMenu = () => {\n        showContextMenu.value = false;\n        selectedAnalysisFeature.value = null;\n      };\n\n      // 📏 設置 ResizeObserver 監聽容器大小變化 (Setup ResizeObserver)\n      let resizeObserver = null; // 宣告 ResizeObserver 實例變數\n      let resizeTimeout = null; // 防抖計時器\n\n      const setupResizeObserver = () => {\n        // 檢查容器存在且瀏覽器支援 ResizeObserver\n        if (mapContainer.value && window.ResizeObserver) {\n          // 創建 ResizeObserver 實例\n          resizeObserver = new ResizeObserver((entries) => {\n            for (let entry of entries) {\n              // 遍歷所有變化的元素\n              console.log('🔄 地圖容器大小變化:', entry.contentRect); // 輸出容器尺寸變化資訊\n\n              // 使用防抖機制，避免短時間內多次觸發\n              if (resizeTimeout) {\n                clearTimeout(resizeTimeout);\n              }\n\n              resizeTimeout = setTimeout(() => {\n                if (mapInstance && isMapReady.value) {\n                  invalidateSize(); // 刷新地圖尺寸\n                }\n                resizeTimeout = null;\n              }, 150); // 延遲 150ms，與 UpperView 的延遲保持一致\n            }\n          });\n          resizeObserver.observe(mapContainer.value); // 開始觀察地圖容器\n          console.log('✅ ResizeObserver 已設置'); // 輸出設置成功訊息\n        }\n      };\n\n      // 🔄 切換底圖函數 (Change Basemap Function)\n      const changeBasemap = (basemapType) => {\n        defineStore.setSelectedBasemap(basemapType); // 使用 store action 更新底圖狀態\n        setBasemap(); // 應用底圖變更\n      };\n\n      // 🏷️ 獲取底圖標籤函數 (Get Basemap Label Function)\n      const getBasemapLabel = (value) => {\n        // 從 defineStore 中獲取底圖標籤\n        const basemap = defineStore.basemaps.find((b) => b.value === value);\n        return basemap ? basemap.label : value;\n      };\n\n      // 🚀 初始化地圖函數 (Initialize Map Function)\n      const initMap = () => {\n        let attempts = 0; // 初始化嘗試次數計數器\n        const maxAttempts = 20; // 最大嘗試次數\n\n        // 嘗試初始化函數\n        const tryInit = () => {\n          if (attempts >= maxAttempts) {\n            // 如果超過最大嘗試次數\n            console.error('[MapTab] 地圖初始化超時'); // 輸出超時錯誤\n            return;\n          }\n\n          attempts++; // 增加嘗試次數\n\n          if (createMap()) {\n            // 嘗試創建地圖\n            setBasemap(); // 設定底圖\n            syncLayers(); // 同步圖層\n          } else {\n            setTimeout(tryInit, 100); // 延遲 100ms 後重試\n          }\n        };\n\n        tryInit(); // 開始嘗試初始化\n      };\n\n      // 🔄 生命週期：組件掛載 (Lifecycle: Component Mounted)\n      onMounted(() => {\n        nextTick(() => {\n          // 等待 DOM 更新完成\n          setTimeout(() => {\n            // 延遲執行確保容器準備就緒\n            initMap(); // 初始化地圖\n            // 地圖初始化完成後設置 ResizeObserver\n            setTimeout(setupResizeObserver, 500); // 延遲 500ms 設置尺寸觀察器\n          }, 100); // 延遲 100ms\n        });\n\n        // 🖱️ 添加全域點擊事件監聽器，用於隱藏右鍵菜單\n        document.addEventListener('click', hideContextMenu);\n      });\n\n      // 🧹 生命週期：組件卸載 (Lifecycle: Component Unmounted)\n      onUnmounted(() => {\n        // 清理 ResizeObserver 和相關計時器\n        if (resizeTimeout) {\n          clearTimeout(resizeTimeout);\n          resizeTimeout = null;\n        }\n\n        if (resizeObserver) {\n          // 如果 ResizeObserver 存在\n          resizeObserver.disconnect(); // 停止觀察\n          resizeObserver = null; // 清空引用\n          console.log('🧹 ResizeObserver 已清理'); // 輸出清理訊息\n        }\n\n        // 清理地圖事件和實例\n        if (mapInstance) {\n          // 如果地圖實例存在\n          mapInstance.off('zoomend', handleZoomEnd); // 移除縮放結束事件監聽器\n          mapInstance.off('moveend', handleMoveEnd); // 移除移動結束事件監聽器\n          mapInstance.remove(); // 移除地圖實例\n          mapInstance = null; // 清空引用\n        }\n\n        // 清理圖層相關變數\n        layerGroups = {}; // 清空圖層群組物件\n        currentTileLayer = null; // 清空當前底圖圖層引用\n        isMapReady.value = false; // 重設地圖準備狀態\n\n        // 🖱️ 移除全域點擊事件監聽器\n        document.removeEventListener('click', hideContextMenu);\n      });\n\n      // 👀 監聽器：監聽資料存儲中的圖層變化 (Watcher: Watch Data Store Layers)\n      watch(() => dataStore.layers, syncLayers, { deep: true }); // 深度監聽圖層變化並同步\n\n      // 👀 監聽器：監聽底圖變化 (Watcher: Watch Basemap Changes)\n      watch(\n        () => defineStore.selectedBasemap,\n        () => {\n          if (isMapReady.value) {\n            setBasemap(); // 當底圖變化時重新設定\n          }\n        }\n      );\n\n      // 📤 返回組件公開的屬性和方法 (Return Component Public Properties and Methods)\n      return {\n        mapContainer, // 地圖容器 DOM 元素引用\n        mapContainerId, // 動態地圖容器 ID\n        selectedBasemap: computed(() => defineStore.selectedBasemap), // 選定的底圖類型響應式變數\n        changeBasemap, // 切換底圖函數\n        getBasemapLabel, // 獲取底圖標籤函數\n        showAllFeatures, // 顯示全部要素函數\n        showFullCity, // 顯示全市函數\n        isAnyLayerVisible, // 檢查是否有可見圖層的計算屬性\n        highlightFeature, // 高亮顯示特定要素函數\n        invalidateSize, // 刷新地圖尺寸函數\n        startClickMode, // 開始點擊模式函數\n        stopClickMode, // 停止點擊模式函數\n        startIsochroneClickMode, // 開始等時圈點擊模式函數\n        stopIsochroneClickMode, // 停止等時圈點擊模式函數\n        startRoutePlanningClickMode, // 開始路徑規劃點擊模式函數\n        finishRoutePlanningClickMode, // 完成路徑規劃點選函數\n\n        // 🗺️ 路徑優化點擊模式相關函數\n        startRouteOptimizationClickMode, // 開始路徑優化點擊模式函數\n        finishRouteOptimizationClickMode, // 完成路徑優化點選函數\n\n        clearAnalysisLayer, // 清除分析圖層函數\n        isClickMode, // 點擊模式狀態\n        isIsochroneClickMode, // 等時圈點擊模式狀態\n        isRoutePlanningClickMode, // 路徑規劃點擊模式狀態\n        isRouteOptimizationClickMode, // 路徑優化點擊模式狀態\n        defineStore, // 定義存儲實例\n        // 右鍵菜單相關\n        contextMenu, // 右鍵菜單 DOM 引用\n        showContextMenu, // 是否顯示右鍵菜單\n        contextMenuPosition, // 右鍵菜單位置\n        selectedAnalysisFeature, // 選中的分析要素\n        deleteAnalysisPoint, // 刪除分析點函數\n        hideContextMenu, // 隱藏右鍵菜單函數\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 🗺️ 地圖主容器 (Main Map Container) -->\n  <div\n    id=\"map-container\"\n    class=\"h-100 w-100 position-relative\"\n    :class=\"{\n      'click-mode-active': isClickMode,\n      'isochrone-click-mode-active': isIsochroneClickMode,\n      'route-planning-click-mode-active': isRoutePlanningClickMode,\n      'route-optimization-click-mode-active': isRouteOptimizationClickMode,\n    }\"\n  >\n    <!-- 🗺️ Leaflet 地圖容器 (Leaflet Map Container) -->\n    <!-- 這是 Leaflet 地圖實際渲染的 DOM 元素 -->\n    <div :id=\"mapContainerId\" ref=\"mapContainer\" class=\"h-100 w-100\"></div>\n\n    <!-- 🖱️ 右鍵菜單 (Context Menu) -->\n    <div\n      v-if=\"showContextMenu\"\n      ref=\"contextMenu\"\n      class=\"position-fixed rounded my-bgcolor-white my-font-size-sm shadow-sm\"\n      :style=\"{\n        left: contextMenuPosition.x + 'px',\n        top: contextMenuPosition.y + 'px',\n        zIndex: 10000,\n      }\"\n      @click.stop\n    >\n      <div\n        class=\"context-menu-item d-flex align-items-center my-bgcolor-white-hover my-title-sm-black px-3 py-2 my-2\"\n        @click=\"deleteAnalysisPoint\"\n      >\n        <span class=\"my-color-red\"><i class=\"fas fa-trash-alt me-2\"></i></span>\n        刪除此分析點\n      </div>\n    </div>\n\n    <!-- 🚫 點擊遮罩，用於隱藏右鍵菜單 (Click Overlay to Hide Context Menu) -->\n    <div\n      v-if=\"showContextMenu\"\n      class=\"context-menu-overlay position-fixed w-100 h-100\"\n      style=\"top: 0; left: 0; z-index: 9999\"\n      @click=\"hideContextMenu\"\n    ></div>\n\n    <!-- 地圖底部控制項區域 -->\n    <div\n      class=\"position-absolute map-bottom-controls d-flex align-items-center rounded-pill shadow my-blur gap-2 p-2 mb-3\"\n    >\n      <div class=\"d-flex align-items-center\">\n        <div class=\"dropdown dropup\">\n          <button\n            class=\"btn rounded-pill border-0 my-btn-transparent my-font-size-xs text-nowrap\"\n            type=\"button\"\n            data-bs-toggle=\"dropdown\"\n            aria-expanded=\"false\"\n          >\n            {{ getBasemapLabel(selectedBasemap) }}\n          </button>\n          <ul class=\"dropdown-menu\">\n            <li v-for=\"basemap in defineStore.basemaps\" :key=\"basemap.value\">\n              <a\n                class=\"dropdown-item my-content-xs-black py-1\"\n                href=\"#\"\n                @click.prevent=\"changeBasemap(basemap.value)\"\n              >\n                {{ basemap.label }}\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <!-- 顯示全部 -->\n      <button\n        class=\"btn rounded-pill border-0 my-btn-transparent my-font-size-xs text-nowrap my-cursor-pointer\"\n        @click=\"showAllFeatures\"\n        :disabled=\"!isAnyLayerVisible\"\n        title=\"顯示圖面所有資料範圍\"\n      >\n        顯示全部\n      </button>\n\n      <!-- 顯示全市 -->\n      <button\n        class=\"btn rounded-pill border-0 my-btn-transparent my-font-size-xs text-nowrap my-cursor-pointer\"\n        @click=\"showFullCity\"\n        title=\"回到預設地圖範圍\"\n      >\n        顯示全市\n      </button>\n\n      <!-- 點選數據分析位置 -->\n      <button\n        v-if=\"!isClickMode\"\n        class=\"btn rounded-pill border-0 my-btn-green my-font-size-xs text-nowrap my-cursor-pointer\"\n        @click=\"startClickMode\"\n        title=\"在地圖上點選位置進行數據分析\"\n      >\n        點選數據分析位置\n      </button>\n      <button\n        v-else\n        class=\"btn rounded-pill border-0 my-btn-red my-font-size-xs text-nowrap my-cursor-pointer\"\n        @click=\"stopClickMode\"\n        title=\"取消地圖點選\"\n      >\n        取消地圖點選\n      </button>\n\n      <!-- 點選等時分析位置 -->\n      <button\n        v-if=\"!isIsochroneClickMode\"\n        class=\"btn rounded-pill border-0 my-btn-blue my-font-size-xs text-nowrap my-cursor-pointer\"\n        @click=\"startIsochroneClickMode\"\n        title=\"在地圖上點選位置進行等時圈分析\"\n      >\n        點選等時分析位置\n      </button>\n      <button\n        v-else\n        class=\"btn rounded-pill border-0 my-btn-red my-font-size-xs text-nowrap my-cursor-pointer\"\n        @click=\"stopIsochroneClickMode\"\n        title=\"取消等時圈分析點選\"\n      >\n        取消等時圈點選\n      </button>\n\n      <!-- 點選路徑規劃點 -->\n      <button\n        v-if=\"!isRoutePlanningClickMode\"\n        class=\"btn rounded-pill border-0 my-btn-orange my-font-size-xs text-nowrap my-cursor-pointer\"\n        @click=\"startRoutePlanningClickMode\"\n        title=\"在地圖上點選多個位置進行路徑規劃\"\n      >\n        點選路徑規劃點\n      </button>\n      <button\n        v-else\n        class=\"btn rounded-pill border-0 my-btn-red my-font-size-xs text-nowrap my-cursor-pointer\"\n        @click=\"finishRoutePlanningClickMode\"\n        title=\"完成路徑規劃點選\"\n      >\n        路徑規劃點選完成\n      </button>\n\n      <!-- 點選路徑優化點 -->\n      <button\n        v-if=\"!isRouteOptimizationClickMode\"\n        class=\"btn rounded-pill border-0 my-btn-purple my-font-size-xs text-nowrap my-cursor-pointer\"\n        @click=\"startRouteOptimizationClickMode\"\n        title=\"在地圖上點選多個位置進行路徑優化\"\n      >\n        點選路徑優化點\n      </button>\n      <button\n        v-else\n        class=\"btn rounded-pill border-0 my-btn-red my-font-size-xs text-nowrap my-cursor-pointer\"\n        @click=\"finishRouteOptimizationClickMode\"\n        title=\"完成路徑優化點選\"\n      >\n        路徑優化點選完成\n      </button>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n  /* 🗺️ 地圖容器樣式 (Map Container Styles) */\n  #map-container {\n    background-color: transparent; /* 預設透明，讓底圖顯示，空白地圖時由 JS 動態設定為白色 */\n    z-index: 0; /* 確保地圖在左側面板陰影下方 */\n  }\n\n  /* 🗺️ Leaflet 地圖容器樣式 (Leaflet Map Container Styles) */\n  [id^='leaflet-map'] {\n    width: 100% !important;\n    height: 100% !important;\n  }\n\n  /* ✨ 地圖底部控制項樣式 (Map Bottom Controls Styles) */\n  .map-bottom-controls {\n    bottom: 0px;\n    left: 50%;\n    transform: translateX(-50%);\n    z-index: 2000;\n  }\n\n  /* 🎯 分析點圖標樣式 (Analysis Point Icon Styles) */\n  :deep(.analysis-point-icon) {\n    background: transparent !important;\n    border: none !important;\n  }\n\n  /* 🎯 等時圈分析點圖標樣式 (Isochrone Analysis Point Icon Styles) */\n  :deep(.isochrone-analysis-point-icon) {\n    background: transparent !important;\n    border: none !important;\n  }\n\n  /* 🗺️ 路徑規劃點圖標樣式 (Route Planning Point Icon Styles) */\n  :deep(.route-planning-point-icon) {\n    background: transparent !important;\n    border: none !important;\n  }\n\n  /* 🖱️ 點擊模式樣式 (Click Mode Styles) */\n  .click-mode-active,\n  .click-mode-active * {\n    cursor: crosshair !important;\n  }\n\n  /* 🖱️ 等時圈點擊模式樣式 (Isochrone Click Mode Styles) */\n  .isochrone-click-mode-active,\n  .isochrone-click-mode-active * {\n    cursor: crosshair !important;\n  }\n\n  /* 🗺️ 路徑規劃點擊模式樣式 (Route Planning Click Mode Styles) */\n  .route-planning-click-mode-active,\n  .route-planning-click-mode-active * {\n    cursor: crosshair !important;\n  }\n\n  /* 🗺️ 路徑優化按鈕樣式 (Route Optimization Button Styles) */\n  .my-btn-purple {\n    background-color: var(--my-color-purple, #6f42c1);\n    border-color: var(--my-color-purple, #6f42c1);\n    color: white;\n  }\n\n  .my-btn-purple:hover {\n    background-color: var(--my-color-purple-hover, #5a32a1);\n    border-color: var(--my-color-purple-hover, #5a32a1);\n    color: white;\n  }\n\n  /* 🗺️ 路徑優化點擊模式樣式 (Route Optimization Click Mode Styles) */\n  .route-optimization-click-mode-active,\n  .route-optimization-click-mode-active * {\n    cursor: crosshair !important;\n  }\n</style>\n","import { defineStore } from 'pinia';\n\nexport const useDefineStore = defineStore('define', {\n  state: () => ({\n    selectedBasemap: 'carto_light_labels', // 當前選中的底圖\n    // 地圖視圖狀態\n    mapView: {\n      center: [25.051474, 121.557989], // 地圖中心點 [緯度, 經度] - 台北市中心\n      zoom: 11, // 縮放等級\n    },\n    basemaps: [\n      {\n        label: 'OpenStreetMap',\n        value: 'osm',\n        url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n      },\n      {\n        label: 'Esri Street',\n        value: 'esri_street',\n        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',\n      },\n      {\n        label: 'Esri Topo',\n        value: 'esri_topo',\n        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}',\n      },\n      {\n        label: 'Esri World Imagery',\n        value: 'esri_imagery',\n        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n      },\n      {\n        label: 'Google Maps 街道',\n        value: 'google_road',\n        url: 'https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',\n      },\n      {\n        label: 'Google Maps 衛星',\n        value: 'google_satellite',\n        url: 'https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\n      },\n      {\n        label: '國土規劃中心電子地圖',\n        value: 'nlsc_emap',\n        url: 'https://wmts.nlsc.gov.tw/wmts/EMAP/default/GoogleMapsCompatible/{z}/{y}/{x}',\n      },\n      {\n        label: '國土規劃中心正射影像',\n        value: 'nlsc_photo',\n        url: 'https://wmts.nlsc.gov.tw/wmts/PHOTO2/default/GoogleMapsCompatible/{z}/{y}/{x}',\n      },\n      {\n        label: '地形圖',\n        value: 'terrain',\n        url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n      },\n      {\n        label: 'Carto Light',\n        value: 'carto_light_labels',\n        url: 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',\n      },\n      {\n        label: 'Carto Dark',\n        value: 'carto_dark_labels',\n        url: 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',\n      },\n      {\n        label: 'Carto Voyager',\n        value: 'carto_voyager',\n        url: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png',\n      },\n      {\n        label: '白色地圖',\n        value: 'blank',\n        url: '',\n      },\n      {\n        label: '黑色底圖',\n        value: 'black',\n        url: '',\n      },\n    ],\n  }),\n  actions: {\n    setSelectedBasemap(value) {\n      this.selectedBasemap = value;\n    },\n    setMapView(center, zoom) {\n      this.mapView.center = center;\n      this.mapView.zoom = zoom;\n    },\n  },\n});\n","import { render } from \"./MapTab.vue?vue&type=template&id=41d5dd3b&scoped=true\"\nimport script from \"./MapTab.vue?vue&type=script&lang=js\"\nexport * from \"./MapTab.vue?vue&type=script&lang=js\"\n\nimport \"./MapTab.vue?vue&type=style&index=0&id=41d5dd3b&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-41d5dd3b\"]])\n\nexport default __exports__","<script setup>\n  import { ref, computed, watch, onMounted, nextTick, onUnmounted } from 'vue';\n  import { useDataStore } from '@/stores/dataStore.js';\n  import * as d3 from 'd3';\n\n  const dataStore = useDataStore();\n\n  const activeLayerTab = ref(null); /** 📑 當前作用中的圖層分頁 */\n  const chartContainer = ref(null); /** 📊 圖表容器參考 */\n\n  // 獲取所有開啟且有資料的圖層\n  const visibleLayers = computed(() => {\n    const allLayers = dataStore.getAllLayers();\n    return allLayers.filter((layer) => layer.visible);\n  });\n\n  /**\n   * 📑 設定作用中圖層分頁 (Set Active Layer Tab)\n   * @param {string} layerId - 圖層 ID\n   */\n  const setActiveLayerTab = (layerId) => {\n    activeLayerTab.value = layerId;\n  };\n\n  /**\n   * 📊 當前圖層摘要 (Current Layer Summary)\n   */\n  const currentLayerSummary = computed(() => {\n    if (!activeLayerTab.value) return null;\n    const layer = visibleLayers.value.find((l) => l.layerId === activeLayerTab.value);\n    return layer ? layer.summaryData || null : null;\n  });\n\n  /**\n   * 📊 取得當前選中圖層名稱 (Get Current Selected Layer Name)\n   */\n  const currentLayerName = computed(() => {\n    if (!activeLayerTab.value) return '無開啟圖層';\n    const layer = visibleLayers.value.find((l) => l.layerId === activeLayerTab.value);\n    return layer ? layer.layerName || '未知圖層' : '無開啟圖層';\n  });\n\n  /**\n   * 📊 繪製橫向長條圖 (Draw Horizontal Bar Chart)\n   * @param {Array} districtCount - 行政區統計數據\n   */\n  const drawHorizontalBarChart = (districtCount) => {\n    if (!chartContainer.value || !districtCount || districtCount.length === 0) {\n      return;\n    }\n\n    // 清除之前的圖表\n    d3.select(chartContainer.value).selectAll('*').remove();\n\n    // 設定圖表尺寸和邊距\n    const margin = { top: 0, right: 48, bottom: 16, left: 48 };\n    const containerWidth = chartContainer.value.clientWidth;\n    const width = containerWidth - margin.left - margin.right;\n    const barHeight = 8;\n    const barSpacing = 24;\n    const height = districtCount.length * barSpacing;\n\n    // 創建 SVG\n    const svg = d3\n      .select(chartContainer.value)\n      .append('svg')\n      .attr('width', containerWidth)\n      .attr('height', height + margin.top + margin.bottom);\n\n    const g = svg\n      .append('g')\n      .attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // 設定比例尺\n    const maxCount = d3.max(districtCount, d => d.count);\n    const xScale = d3\n      .scaleLinear()\n      .domain([0, maxCount])\n      .range([0, width]);\n\n                /**\n     * 計算刻度系統 - 所有刻度都是5的倍數，且等間隔分布，最多5個刻度\n     */\n    const calculateTickSystem = (dataMaxValue) => {\n      // Step 1: 決定刻度間隔（必須是5的倍數），確保刻度數量不超過5個\n      let interval;\n\n      // 計算需要的間隔，使刻度數量不超過5個（包含0）\n      const maxTicks = 5;\n      const minInterval = Math.ceil(dataMaxValue / (maxTicks - 1));\n\n      // 找到最小的5的倍數間隔\n      if (minInterval <= 5) {\n        interval = 5;\n      } else if (minInterval <= 10) {\n        interval = 10;\n      } else if (minInterval <= 20) {\n        interval = 20;\n      } else if (minInterval <= 50) {\n        interval = 50;\n      } else if (minInterval <= 100) {\n        interval = 100;\n      } else {\n        // 對於更大的數值，找到最接近的5的倍數\n        interval = Math.ceil(minInterval / 5) * 5;\n      }\n\n      // Step 2: 計算圖表的最大刻度值\n      const chartMaxValue = Math.ceil(dataMaxValue / interval) * interval;\n\n      // Step 3: 生成刻度點，確保不超過5個\n      const ticks = [];\n      for (let i = 0; i <= chartMaxValue && ticks.length < maxTicks; i += interval) {\n        ticks.push(i);\n      }\n\n      return {\n        ticks: ticks,           // 刻度陣列 [0, 5, 10, 15...]，最多5個\n        maxValue: chartMaxValue, // 圖表最大值\n        interval: interval       // 刻度間隔\n      };\n    };\n\n    // 計算刻度系統\n    const tickSystem = calculateTickSystem(maxCount);\n    const tickValues = tickSystem.ticks;\n\n    // 更新 X 軸比例尺的範圍\n    xScale.domain([0, tickSystem.maxValue]);\n\n    g.selectAll('.grid-line')\n      .data(tickValues)\n      .enter()\n      .append('line')\n      .attr('class', 'grid-line')\n      .attr('x1', d => xScale(d))\n      .attr('x2', d => xScale(d))\n      .attr('y1', 0)\n      .attr('y2', height)\n      .attr('stroke', 'var(--my-color-gray-400)')\n      .attr('stroke-dasharray', '2,2')\n      .attr('stroke-width', 1);\n\n    // 添加長條\n    g.selectAll('.bar')\n      .data(districtCount)\n      .enter()\n      .append('rect')\n      .attr('class', 'bar')\n      .attr('x', 0)\n      .attr('y', (d, i) => i * barSpacing + (barSpacing - barHeight) / 2)\n      .attr('width', d => xScale(d.count))\n      .attr('height', barHeight)\n      .attr('fill', 'var(--my-color-blue)');\n\n    // 添加數值標籤\n    g.selectAll('.label')\n      .data(districtCount)\n      .enter()\n      .append('text')\n      .attr('class', 'label my-font-size-xs')\n      .attr('x', d => xScale(d.count) + 5)\n      .attr('y', (d, i) => i * barSpacing + barSpacing / 2)\n      .attr('dy', '0.35em')\n      .attr('fill', 'var(--my-color-black)')\n      .text(d => d.count);\n\n    // 添加區域名稱標籤\n    g.selectAll('.district-label')\n      .data(districtCount)\n      .enter()\n      .append('text')\n      .attr('class', 'district-label my-font-size-xs')\n      .attr('x', -5)\n      .attr('y', (d, i) => i * barSpacing + barSpacing / 2)\n      .attr('dy', '0.35em')\n      .attr('fill', 'var(--my-color-black)')\n      .style('text-anchor', 'end')\n      .text(d => d.name);\n\n    // 添加 X 軸數字標籤\n    g.selectAll('.x-axis-label')\n      .data(tickValues)\n      .enter()\n      .append('text')\n      .attr('class', 'x-axis-label my-font-size-xs')\n      .attr('x', d => xScale(d))\n      .attr('y', height + 15)\n      .attr('fill', 'var(--my-color-gray-600)')\n      .style('text-anchor', 'middle')\n      .text(d => d);\n  };\n\n  // 記錄上一次的圖層列表用於比較\n  const previousLayers = ref([]);\n\n  /**\n   * 👀 監聽可見圖層變化，自動切換到新開啟的圖層分頁\n   */\n  watch(\n    () => visibleLayers.value,\n    (newLayers) => {\n      // 如果沒有可見圖層，清除選中的分頁\n      if (newLayers.length === 0) {\n        activeLayerTab.value = null;\n        previousLayers.value = [];\n        return;\n      }\n\n      // 找出新增的圖層（比較新舊圖層列表）\n      const previousLayerIds = previousLayers.value.map((layer) => layer.layerId);\n      const newLayerIds = newLayers.map((layer) => layer.layerId);\n      const addedLayerIds = newLayerIds.filter((id) => !previousLayerIds.includes(id));\n\n      // 如果有新增的圖層，自動切換到最新新增的圖層\n      if (addedLayerIds.length > 0) {\n        const newestAddedLayerId = addedLayerIds[addedLayerIds.length - 1];\n        activeLayerTab.value = newestAddedLayerId;\n        console.log(\n          `🔄 自動切換到新開啟的圖層: ${newLayers.find((layer) => layer.layerId === newestAddedLayerId)?.layerName}`\n        );\n      }\n      // 如果當前沒有選中分頁，或選中的分頁不在可見列表中，選中第一個\n      else if (\n        !activeLayerTab.value ||\n        !newLayers.find((layer) => layer.layerId === activeLayerTab.value)\n      ) {\n        activeLayerTab.value = newLayers[0].layerId;\n      }\n\n      // 更新記錄的圖層列表\n      previousLayers.value = [...newLayers];\n    },\n    { deep: true, immediate: true }\n  );\n\n  /**\n   * 👀 監聽當前圖層摘要變化，更新圖表\n   */\n  watch(\n    () => currentLayerSummary.value,\n    (newSummary) => {\n      if (newSummary && newSummary.districtCount) {\n        nextTick(() => {\n          drawHorizontalBarChart(newSummary.districtCount);\n        });\n      }\n    },\n    { immediate: true }\n  );\n\n  /**\n   * 🚀 組件掛載事件 (Component Mounted Event)\n   */\n  onMounted(() => {\n    console.log('[DashboardTab] Component Mounted');\n\n    // 初始化第一個可見圖層為作用中分頁\n    if (visibleLayers.value.length > 0 && !activeLayerTab.value) {\n      activeLayerTab.value = visibleLayers.value[0].layerId;\n    }\n  });\n\n  // 監聽窗口大小變化，重新繪製圖表\n  const handleResize = () => {\n    if (currentLayerSummary.value && currentLayerSummary.value.districtCount) {\n      nextTick(() => {\n        drawHorizontalBarChart(currentLayerSummary.value.districtCount);\n      });\n    }\n  };\n\n  onMounted(() => {\n    window.addEventListener('resize', handleResize);\n  });\n\n  // 組件卸載時移除事件監聽\n  onUnmounted(() => {\n    window.removeEventListener('resize', handleResize);\n  });\n</script>\n\n<template>\n  <!-- 📊 多圖層資料儀表板視圖組件 -->\n  <div class=\"d-flex flex-column my-bgcolor-gray-200 h-100\">\n    <!-- 📑 圖層分頁導航 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"\">\n      <ul class=\"nav nav-tabs nav-fill\">\n        <li\n          v-for=\"layer in visibleLayers\"\n          :key=\"layer.layerId\"\n          class=\"nav-item d-flex flex-column align-items-center\"\n        >\n          <!-- tab按鈕 -->\n          <div\n            class=\"btn nav-link rounded-0 border-0 position-relative d-flex align-items-center justify-content-center my-bgcolor-gray-200\"\n            :class=\"{\n              active: activeLayerTab === layer.layerId,\n            }\"\n            @click=\"setActiveLayerTab(layer.layerId)\"\n          >\n            <span class=\"my-title-sm-black\">{{ layer.layerName }}</span>\n          </div>\n          <div class=\"w-100\" :class=\"`my-bgcolor-${layer.colorName}`\" style=\"min-height: 4px\"></div>\n        </li>\n      </ul>\n    </div>\n\n    <!-- 有開啟圖層時的內容 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"flex-grow-1 overflow-auto my-bgcolor-white p-3\">\n      <!-- 📊 當前圖層資訊 -->\n      <div class=\"mb-4\">\n        <h5 class=\"my-title-md-black\">{{ currentLayerName }}</h5>\n      </div>\n\n      <!-- 📊 圖層摘要資料 -->\n      <div v-if=\"currentLayerSummary\">\n        <div class=\"row\">\n          <!-- 基本統計信息 -->\n          <div class=\"col-12 col-xl-6\">\n            <div class=\"rounded-4 my-bgcolor-gray-100 p-4 mb-3\">\n              <h6 class=\"mb-3\">基本統計</h6>\n              <div class=\"row\">\n                <div class=\"col-6\">\n                  <div class=\"text-center\">\n                    <div class=\"my-title-xl-black\">{{ currentLayerSummary.totalCount }}</div>\n                    <div class=\"my-title-sm-gray\">總數量</div>\n                  </div>\n                </div>\n                <div class=\"col-6\" v-if=\"currentLayerSummary.districtCount\">\n                  <div class=\"text-center\">\n                    <div class=\"my-title-xl-black\">{{ currentLayerSummary.districtCount.length }}</div>\n                    <div class=\"my-title-sm-gray\">行政區數量</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- 行政區分布圖表 -->\n          <div class=\"col-12 col-xl-6\" v-if=\"currentLayerSummary.districtCount && currentLayerSummary.districtCount.length > 0\">\n            <div class=\"rounded-4 my-bgcolor-gray-100 p-4 mb-3\">\n              <h6 class=\"mb-3\">行政區分布</h6>\n              <div ref=\"chartContainer\" class=\"w-100\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div v-else class=\"text-center py-5\">\n        <div class=\"my-title-md-gray\">此圖層沒有可用的摘要資訊</div>\n      </div>\n    </div>\n\n    <!-- 沒有開啟圖層時的空狀態 -->\n    <div v-else class=\"flex-grow-1 d-flex align-items-center justify-content-center\">\n      <div class=\"text-center\">\n        <div class=\"my-title-md-gray p-3\">沒有開啟的圖層</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","import script from \"./DashboardTab.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DashboardTab.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { render } from \"./UpperView.vue?vue&type=template&id=2b4e699e\"\nimport script from \"./UpperView.vue?vue&type=script&lang=js\"\nexport * from \"./UpperView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\n  import { ref, watch, nextTick } from 'vue';\n  import DataTableTab from '../tabs/DataTableTab.vue';\n\n  export default {\n    name: 'BottomView',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊底部面板內使用的子組件\n     */\n    components: {\n      DataTableTab, // 資料表格分頁組件\n    },\n\n    /**\n     * 🔧 組件屬性定義 (Component Props)\n     * 接收來自父組件的配置和狀態數據\n     */\n    props: {\n      activeBottomTab: { type: String, default: 'table' },\n      bottomViewHeight: { type: Number, default: 300 },\n      isPanelDragging: { type: Boolean, default: false },\n    },\n\n    /**\n     * 📡 組件事件定義 (Component Events)\n     * 定義向父組件發送的事件類型\n     */\n    emits: [\n      'update:activeBottomTab', // 更新作用中底部分頁\n      'highlight-on-map', // 在地圖上高亮顯示\n      'reset-view', // 重設視圖\n    ],\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯\n     */\n    setup(props) {\n      // 建立一個 ref 來引用模板中的底部分頁內容 DOM 元素\n      const bottomTabContentRef = ref(null);\n\n      /**\n       * 👀 監聽作用中底部分頁的變化\n       * 當分頁切換時，確保 DOM 更新完成\n       */\n      watch(\n        () => props.activeBottomTab,\n        () => {\n          // 使用 nextTick 確保 DOM 更新完成後再進行任何後續操作\n          nextTick(() => {\n            // 這裡可以添加分頁切換後的特殊處理邏輯\n            console.log(`✅ 底部分頁已切換至: ${props.activeBottomTab}`);\n          });\n        }\n      );\n\n      // 📤 將需要暴露給 <template> 使用的數據和方法返回\n      return {\n        bottomTabContentRef,\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 📋 底部面板組件 (Bottom Panel Component) -->\n  <!-- 提供資料表格顯示功能 -->\n  <div class=\"d-flex flex-column\" :style=\"{ height: bottomViewHeight + 'px' }\">\n    <!-- 📄 底部分頁內容區域 (Bottom Tab Content Area) -->\n    <!-- 顯示資料表格內容組件 -->\n    <div ref=\"bottomTabContentRef\" class=\"flex-grow-1 h-100 overflow-auto\">\n      <!-- 📊 資料表格分頁內容 (Data Table Tab Content) -->\n      <!-- 顯示載入的地理資料，支援搜尋、排序、高亮等功能 -->\n      <div class=\"h-100\">\n        <DataTableTab @highlight-on-map=\"$emit('highlight-on-map', $event)\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","<script setup>\n  import { ref, computed, defineEmits, onMounted, watch } from 'vue';\n  import { useDataStore } from '@/stores/dataStore.js';\n\n  const emit = defineEmits(['highlight-on-map']);\n\n  const dataStore = useDataStore();\n\n  const activeLayerTab = ref(null); /** 📑 當前作用中的圖層分頁 */\n  const layerSortStates = ref({}); /** 📊 每個圖層的排序狀態 */\n\n  // 獲取所有開啟且有資料的圖層\n  const visibleLayers = computed(() => {\n    const allLayers = dataStore.getAllLayers();\n    return allLayers.filter((layer) => layer.visible);\n  });\n\n  /**\n   * 📑 設定作用中圖層分頁 (Set Active Layer Tab)\n   * @param {string} layerId - 圖層 ID\n   */\n  const setActiveLayerTab = (layerId) => {\n    activeLayerTab.value = layerId;\n  };\n\n  /**\n   * 根據圖層的第一筆資料，動態獲取所有適合顯示在表格中的欄位名稱\n   * @param {object} layer - 圖層物件\n   * @returns {string[]} - 一個包含所有欄位名稱的字串陣列\n   */\n  const getLayerColumns = (layer) => {\n    // 獲取排序後的資料陣列\n    const data = getSortedData(layer);\n\n    // 如果沒有資料或資料為空，返回一個空陣列\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    // 取第一筆資料作為樣本\n    const sampleItem = data[0];\n\n    // 使用 Object.keys 獲取所有屬性名稱 (key)\n    // 並過濾掉不適合直接顯示在表格中的複雜物件 (例如 geometry)\n    return Object.keys(sampleItem).filter((key) => {\n      const value = sampleItem[key];\n      // 只保留值不是物件，或值雖是物件但為 null 的鍵\n      return typeof value !== 'object' || value === null;\n    });\n  };\n\n  /**\n   * 📊 取得圖層資料數量 (Get Layer Data Count)\n   * @param {Object} layer - 圖層物件\n   * @returns {number} 資料數量\n   */\n  const getLayerDataCount = (layer) => {\n    return layer.tableData?.length || 0;\n  };\n\n  /**\n   * 📊 取得排序後的資料 (Get Sorted Data)\n   * @param {Object} layer - 圖層物件\n   * @returns {Array} 排序後的資料陣列\n   */\n  const getSortedData = (layer) => {\n    if (!layer.tableData) return [];\n\n    const sortState = layerSortStates.value[layer.layerId];\n    if (!sortState || !sortState.key) {\n      return layer.tableData;\n    }\n\n    return [...layer.tableData].sort((a, b) => {\n      const aValue = a[sortState.key];\n      const bValue = b[sortState.key];\n\n      // 字串類型的比較\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortState.order === 'asc'\n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      // 數值類型的比較\n      return sortState.order === 'asc' ? aValue - bValue : bValue - aValue;\n    });\n  };\n\n  /**\n   * 📊 處理排序點擊 (Handle Sort Click)\n   * @param {string} layerId - 圖層 ID\n   * @param {string} key - 排序欄位\n   */\n  const handleSort = (layerId, key) => {\n    if (!layerSortStates.value[layerId]) {\n      layerSortStates.value[layerId] = { key: null, order: 'asc' };\n    }\n\n    const sortState = layerSortStates.value[layerId];\n\n    if (sortState.key === key) {\n      // 切換排序方向\n      sortState.order = sortState.order === 'asc' ? 'desc' : 'asc';\n    } else {\n      // 設定新的排序欄位\n      sortState.key = key;\n      sortState.order = 'asc';\n    }\n  };\n\n  /**\n   * 🎨 取得排序圖示 (Get Sort Icon)\n   * @param {string} layerId - 圖層 ID\n   * @param {string} key - 欄位名稱\n   * @returns {string} FontAwesome 圖示類別\n   */\n  const getSortIcon = (layerId, key) => {\n    const sortState = layerSortStates.value[layerId];\n    if (!sortState || sortState.key !== key) {\n      return 'fas fa-sort';\n    }\n    return sortState.order === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down';\n  };\n\n  /**\n   * 🎯 處理地圖高亮顯示 (Handle Map Highlighting)\n   * @param {Object} item - 要高亮的項目\n   * @param {Object} layer - 圖層物件\n   */\n  const handleHighlight = (item, layer) => {\n    console.log('準備高亮顯示:', { item, layer: layer.layerName });\n\n    // 傳遞包含圖層資訊和項目ID的物件\n    const highlightData = {\n      id: item.id || item['#'], // 🔥 優先使用 item.id，如果沒有則使用 item['#'] 作為後備\n      layerId: layer.layerId,\n      layerName: layer.layerName,\n      item: item,\n    };\n\n    console.log('發送高亮事件:', highlightData);\n\n    // 添加小延遲，確保地圖已準備就緒\n    setTimeout(() => {\n      emit('highlight-on-map', highlightData);\n    }, 50);\n  };\n\n  // 記錄上一次的圖層列表用於比較\n  const previousLayers = ref([]);\n\n  /**\n   * 👀 監聽可見圖層變化，自動切換到新開啟的圖層分頁\n   */\n  watch(\n    () => visibleLayers.value,\n    (newLayers) => {\n      // 如果沒有可見圖層，清除選中的分頁\n      if (newLayers.length === 0) {\n        activeLayerTab.value = null;\n        previousLayers.value = [];\n        return;\n      }\n\n      // 找出新增的圖層（比較新舊圖層列表）\n      const previousLayerIds = previousLayers.value.map((layer) => layer.layerId);\n      const newLayerIds = newLayers.map((layer) => layer.layerId);\n      const addedLayerIds = newLayerIds.filter((id) => !previousLayerIds.includes(id));\n\n      // 如果有新增的圖層，自動切換到最新新增的圖層\n      if (addedLayerIds.length > 0) {\n        const newestAddedLayerId = addedLayerIds[addedLayerIds.length - 1];\n        activeLayerTab.value = newestAddedLayerId;\n        console.log(\n          `🔄 自動切換到新開啟的圖層: ${newLayers.find((layer) => layer.layerId === newestAddedLayerId)?.layerName}`\n        );\n      }\n      // 如果當前沒有選中分頁，或選中的分頁不在可見列表中，選中第一個\n      else if (\n        !activeLayerTab.value ||\n        !newLayers.find((layer) => layer.layerId === activeLayerTab.value)\n      ) {\n        activeLayerTab.value = newLayers[0].layerId;\n      }\n\n      // 更新記錄的圖層列表\n      previousLayers.value = [...newLayers];\n    },\n    { deep: true, immediate: true }\n  );\n\n  /**\n   * 🚀 組件掛載事件 (Component Mounted Event)\n   */\n  onMounted(() => {\n    console.log('[MultiLayerDataTableTab] Component Mounted');\n\n    // 初始化第一個可見圖層為作用中分頁\n    if (visibleLayers.value.length > 0 && !activeLayerTab.value) {\n      activeLayerTab.value = visibleLayers.value[0].layerId;\n    }\n  });\n</script>\n\n<template>\n  <!-- 📊 多圖層資料表格分頁組件 -->\n  <div class=\"d-flex flex-column my-bgcolor-gray-200 h-100\">\n    <!-- 📑 圖層分頁導航 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"\">\n      <ul class=\"nav nav-tabs nav-fill\">\n        <li\n          v-for=\"layer in visibleLayers\"\n          :key=\"layer.layerId\"\n          class=\"nav-item d-flex flex-column align-items-center\"\n        >\n          <!-- tab按鈕 -->\n          <div\n            class=\"btn nav-link rounded-0 border-0 position-relative d-flex align-items-center justify-content-center my-bgcolor-gray-200\"\n            :class=\"{\n              active: activeLayerTab === layer.layerId,\n            }\"\n            @click=\"setActiveLayerTab(layer.layerId)\"\n          >\n            <span class=\"my-title-sm-black\"\n              >{{ layer.layerName }}\n              <span class=\"my-content-xs-gray ms-2\" v-if=\"getLayerDataCount(layer)\">\n                {{ getLayerDataCount(layer) }}\n              </span>\n            </span>\n          </div>\n          <div class=\"w-100\" :class=\"`my-bgcolor-${layer.colorName}`\" style=\"min-height: 4px\"></div>\n        </li>\n      </ul>\n    </div>\n\n    <!-- 📋 圖層表格內容區域 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"flex-grow-1 overflow-hidden\">\n      <div\n        v-for=\"layer in visibleLayers\"\n        :key=\"layer.layerId\"\n        v-show=\"activeLayerTab === layer.layerId\"\n        class=\"h-100\"\n      >\n        <div class=\"h-100 d-flex flex-column\">\n          <div class=\"flex-grow-1 overflow-auto\">\n            <table class=\"table w-100 mb-0\">\n              <thead class=\"sticky-top my-table-thead\">\n                <tr class=\"text-center text-nowrap\">\n                  <template v-for=\"column in getLayerColumns(layer)\" :key=\"column\">\n                    <th\n                      v-if=\"column !== 'color'\"\n                      @click=\"handleSort(layer.layerId, column)\"\n                      class=\"my-bgcolor-white-hover p-1 my-cursor-pointer\"\n                    >\n                      <span class=\"my-title-xs-gray text-nowrap\">\n                        {{ column }}\n                      </span>\n                      <span class=\"my-title-xs-gray text-nowrap ms-2\">\n                        <i :class=\"getSortIcon(layer.layerId, column)\"></i>\n                      </span>\n                    </th>\n                  </template>\n                </tr>\n              </thead>\n              <tbody>\n                <tr\n                  v-for=\"item in getSortedData(layer)\"\n                  :key=\"item.id\"\n                  class=\"my-table-tr-hover text-center text-nowrap border-bottom my-cursor-pointer\"\n                  @click=\"handleHighlight(item, layer)\"\n                >\n                  <template v-for=\"column in getLayerColumns(layer)\" :key=\"column\">\n                    <td\n                      v-if=\"column !== 'color'\"\n                      class=\"border-0 text-nowrap text-truncate p-0\"\n                      style=\"max-width: 80px\"\n                    >\n                      <div v-if=\"column === '#'\" class=\"d-flex p-0\">\n                        <div\n                          style=\"min-width: 6px\"\n                          :style=\"{\n                            backgroundColor: item['color'],\n                          }\"\n                        ></div>\n                        <div class=\"my-content-xs-black w-100 px-3 py-2\">\n                          {{ item[column] }}\n                        </div>\n                      </div>\n                      <div v-else class=\"my-content-xs-black px-3 py-2\">\n                        {{ item[column] }}\n                      </div>\n                    </td>\n                  </template>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 📭 無開啟圖層的空狀態 -->\n    <div v-else class=\"flex-grow-1 d-flex align-items-center justify-content-center\">\n      <div class=\"text-center\">\n        <div class=\"my-title-md-gray p-3\">沒有開啟的圖層</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n  .my-table-thead {\n    border-bottom: 2px solid var(--my-color-gray-300) !important;\n  }\n</style>\n","import script from \"./DataTableTab.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DataTableTab.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./DataTableTab.vue?vue&type=style&index=0&id=398b5856&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-398b5856\"]])\n\nexport default __exports__","import { render } from \"./BottomView.vue?vue&type=template&id=4404e996\"\nimport script from \"./BottomView.vue?vue&type=script&lang=js\"\nexport * from \"./BottomView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script setup>\n  import {\n    ref,\n    computed,\n    onMounted,\n    onUnmounted,\n    defineProps,\n    defineEmits,\n    defineExpose,\n    watch,\n  } from 'vue';\n\n  // 🧩 組件引入\n  import UpperView from './UpperView.vue';\n  import BottomView from './BottomView.vue';\n\n  // --- 📥 組件屬性定義 (Component Props) ---\n  /**\n   * 📋 接收來自父組件 (HomeView) 的所有必要數據和狀態\n   * 包含面板尺寸、分頁狀態、地圖設定、資料等\n   */\n  const props = defineProps({\n    // 🎛️ 分頁和面板設定 (Tab and Panel Settings)\n    activeUpperTab: { type: String, default: 'map' },\n    activeBottomTab: { type: String, default: 'table' },\n    mainPanelWidth: { type: Number, default: 60 },\n    dynamicMainAreaHeight: { type: Number, default: 500 },\n\n    // 🗺️ 圖層和地圖設定 (Layer and Map Settings)\n    showTainanLayer: { type: Boolean, default: false },\n    selectedFilter: { type: String, default: '' },\n\n    // 🔧 其他設定 (Other Settings)\n    zoomLevel: { type: Number, default: 11 },\n    currentCoords: { type: Object, default: () => ({ lat: 25.033, lng: 121.5654 }) },\n    activeMarkers: { type: Number, default: 0 },\n    isSidePanelDragging: { type: Boolean, default: false },\n  });\n\n  // --- 📤 組件事件定義 (Component Events) ---\n  /**\n   * 📡 定義向父組件 (HomeView) 發送的所有事件\n   * 採用事件轉發模式，確保資料流向清晰\n   */\n  defineEmits([\n    // 📊 分頁更新事件 (Tab Update Events)\n    'update:activeUpperTab', // 更新主要分頁\n    'update:activeBottomTab', // 更新底部分頁\n\n    // 🗺️ 地圖狀態更新事件 (Map State Update Events)\n    'update:zoomLevel', // 更新縮放等級\n    'update:currentCoords', // 更新目前座標\n    'update:activeMarkers', // 更新作用中標記數\n\n    // 📊 表格相關事件\n    'update:tableSearchQuery', // 更新搜尋查詢\n    'sort-table', // 表格排序\n    'highlight-on-map', // 在地圖上高亮顯示\n\n    // 🔄 操作相關事件\n    'reset-view', // 重設視圖\n  ]);\n\n  // --- 📚 內部組件引用 (Internal Component References) ---\n  /** 📊 主內容面板引用 (用於呼叫 UpperView 的方法如 highlightFeature) */\n  const mainContentRef = ref(null);\n\n  // --- 🔧 內部垂直拖曳調整邏輯 (Internal Vertical Resizing Logic) ---\n\n  /** 📏 底部面板高度百分比 (預設 30%，可透過拖曳調整) */\n  const bottomViewHeightPercent = ref(30);\n\n  /** 🖱️ 是否正在進行垂直拖曳 (追蹤垂直拖曳狀態) */\n  const isVerticalDragging = ref(false);\n\n  /**\n   * 🖱️ 計算是否有任何拖曳正在進行 (影響滑鼠指標事件)\n   * 結合側邊面板拖曳和垂直拖曳狀態，用於禁用指標事件\n   */\n  const isOverallDragging = computed(() => {\n    return props.isSidePanelDragging || isVerticalDragging.value;\n  });\n\n  /**\n   * 📏 中間區域總高度計算 (Computing Total Middle Section Height)\n   * 從父組件傳入的動態高度，確保不為負數\n   */\n  const middleSectionTotalHeight = computed(() => {\n    const totalHeight = props.dynamicMainAreaHeight;\n    console.log(`🔧 MiddleView: middleSectionTotalHeight (from prop): ${totalHeight}`);\n    return Math.max(totalHeight, 0); // 確保不為負數，避免佈局錯誤\n  });\n\n  /**\n   * 📏 底部面板實際像素高度計算 (Computing Actual Bottom View Pixel Height)\n   * 根據百分比和總高度計算實際像素值\n   */\n  const actualBottomViewPixelHeight = computed(() => {\n    const pixelHeight = (bottomViewHeightPercent.value / 100) * middleSectionTotalHeight.value;\n    console.log(\n      `🔧 MiddleView: actualBottomViewPixelHeight calculated: ${pixelHeight} (percent: ${bottomViewHeightPercent.value}%, totalMiddle: ${middleSectionTotalHeight.value})`\n    );\n    return pixelHeight;\n  });\n\n  /**\n   * 📏 主內容區域高度計算 (Computing Main Content Area Height)\n   * 總高度減去底部面板高度，得到上部區域可用高度\n   */\n  const contentHeight = computed(() => {\n    const mainContentH = middleSectionTotalHeight.value - actualBottomViewPixelHeight.value;\n    console.log(\n      `🔧 MiddleView: contentHeight (for MainContent) calculated: ${mainContentH}, totalMiddle: ${middleSectionTotalHeight.value}, bottomViewPx: ${actualBottomViewPixelHeight.value}`\n    );\n    return mainContentH;\n  });\n\n  /**\n   * 🖱️ 開始垂直拖曳調整 (Start Vertical Resize)\n   * 處理滑鼠按下事件，開始垂直面板大小調整\n   *\n   * @param {MouseEvent} event - 滑鼠按下事件\n   */\n  const startVerticalResize = (event) => {\n    // 阻止預設行為和事件冒泡，避免干擾其他元素\n    event.preventDefault();\n    event.stopPropagation();\n\n    // 設定拖曳狀態和視覺回饋\n    isVerticalDragging.value = true;\n    document.body.classList.add('my-no-select'); // 防止文字選取，提升拖曳體驗\n\n    // 記錄初始位置和狀態，用於計算拖曳變化量\n    const startY = event.clientY;\n    const startBottomPercent = bottomViewHeightPercent.value;\n    const currentMiddleSectionHeight = middleSectionTotalHeight.value;\n\n    /**\n     * 🖱️ 處理滑鼠移動事件 (Handle Mouse Move)\n     * 計算拖曳距離並更新面板高度比例\n     *\n     * @param {MouseEvent} moveEvent - 滑鼠移動事件\n     */\n    const handleMouseMove = (moveEvent) => {\n      moveEvent.preventDefault();\n      const deltaY = moveEvent.clientY - startY;\n\n      // 防止除零錯誤\n      if (currentMiddleSectionHeight === 0) return;\n\n      // 計算百分比變化 (Y座標變化轉換為高度百分比變化)\n      const deltaPercent = (deltaY / currentMiddleSectionHeight) * 100;\n\n      // 向上拖曳 (deltaY < 0) 增加底部面板高度百分比\n      // 向下拖曳 (deltaY > 0) 減少底部面板高度百分比\n      let newPercent = startBottomPercent - deltaPercent;\n\n      // 限制在合理範圍 (0-100%)，確保佈局穩定\n      newPercent = Math.max(0, Math.min(100, newPercent));\n\n      // 四捨五入到小數點後一位，避免精度問題\n      bottomViewHeightPercent.value = Math.round(newPercent * 10) / 10;\n    };\n\n    /**\n     * 🖱️ 處理滑鼠放開事件 (Handle Mouse Up)\n     * 清理拖曳狀態，移除事件監聽器\n     */\n    const handleMouseUp = () => {\n      // 清除拖曳狀態和視覺回饋\n      isVerticalDragging.value = false;\n      document.body.classList.remove('my-no-select');\n\n      // 移除臨時事件監聽器，避免記憶體洩漏\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n\n    // 註冊全域事件監聽器，確保拖曳行為在整個頁面範圍內有效\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  /**\n   * 👀 監聽 activeUpperTab 變化 (Watch activeUpperTab Changes)\n   * 當分頁切換時記錄日誌，用於除錯和狀態追蹤\n   */\n  watch(\n    () => props.activeUpperTab,\n    (newTab, oldTab) => {\n      console.log(\n        `🔧 MiddleView Watcher: activeUpperTab changed from \"${oldTab}\" to \"${newTab}\". Current bottomViewHeightPercent: ${bottomViewHeightPercent.value}%`\n      );\n    }\n  );\n\n  /**\n   * 🚀 組件掛載時初始化 (Component Mounted Initialization)\n   * 組件載入完成後的初始化工作\n   */\n  onMounted(() => {\n    // 初始計算將依賴從 HomeView 傳遞的正確 prop\n    console.log('🚀 MiddleView mounted');\n  });\n\n  /**\n   * 🗑️ 組件卸載時清理 (Component Unmounted Cleanup)\n   * 組件銷毀前的清理工作，確保沒有記憶體洩漏\n   */\n  onUnmounted(() => {\n    console.log('🗑️ MiddleView unmounted');\n  });\n\n  // --- 🔧 可從父組件呼叫的方法 (Methods Callable from Parent) ---\n\n  /**\n   * 🎯 高亮顯示特徵 (Highlight Feature)\n   * 透過 mainContentRef 呼叫主內容面板的高亮功能\n   * 用於從表格或其他來源觸發地圖上的要素高亮\n   *\n   * @param {Object} highlightData - 包含 layerId 和 id 的高亮數據物件\n   */\n  const highlightFeature = (highlightData) => {\n    if (!mainContentRef.value) {\n      console.warn('⚠️ 無法高亮顯示：mainContentRef 未定義');\n      return;\n    }\n    console.log('🎯 MiddleView: 呼叫 highlightFeature', highlightData);\n    mainContentRef.value.highlightFeature(highlightData);\n  };\n\n  /**\n   * 🗺️ 適應台南邊界 (Fit to Tainan Bounds)\n   * 透過 mainContentRef 呼叫地圖適應邊界功能\n   * 將地圖視圖調整到顯示完整的台南市範圍\n   */\n  const fitToTainanBounds = () => {\n    if (mainContentRef.value) {\n      console.log('🗺️ MiddleView: 呼叫 fitToTainanBounds');\n      mainContentRef.value.fitToTainanBounds();\n    }\n  };\n\n  /**\n   * 🔄 重設地圖視圖 (Reset Map View)\n   * 透過 mainContentRef 呼叫地圖重設功能\n   * 將地圖恢復到預設的縮放等級和中心位置\n   */\n  const resetMapTab = () => {\n    if (mainContentRef.value) {\n      console.log('🔄 MiddleView: 呼叫 resetMapTab');\n      mainContentRef.value.resetView(); // 假設 UpperView 有 resetView 方法\n    }\n  };\n\n  /**\n   * 📏 刷新地圖尺寸 (Invalidate Map Size)\n   * 透過 mainContentRef 呼叫地圖尺寸重新計算功能\n   * 當容器大小變化但自動偵測失效時使用\n   */\n  const invalidateMapSize = () => {\n    if (mainContentRef.value) {\n      console.log('📏 MiddleView: 呼叫地圖尺寸刷新');\n      mainContentRef.value.invalidateMapSize();\n    }\n  };\n\n  /**\n   * 🛑 停止地圖點擊模式 (Stop Map Click Mode)\n   * 透過 mainContentRef 呼叫停止地圖點擊功能\n   */\n  const stopMapClickMode = () => {\n    if (mainContentRef.value) {\n      console.log('🛑 MiddleView: 停止地圖點擊模式');\n      mainContentRef.value.stopMapClickMode();\n    }\n  };\n\n  /**\n   * 📤 暴露方法給父組件使用 (Expose Methods to Parent Component)\n   * 讓 HomeView 可以直接呼叫這些方法，實現組件間的方法調用\n   */\n  defineExpose({\n    highlightFeature, // 高亮顯示功能\n    fitToTainanBounds, // 地圖邊界適應\n    resetMapTab, // 地圖視圖重設\n    invalidateMapSize, // 地圖尺寸刷新\n    stopMapClickMode, // 停止地圖點擊模式\n    // 如果 HomeView 需要直接存取子組件，可以暴露 mainContentRef 和 bottomViewRef\n    // mainContentRef,    // 主內容組件引用\n    // bottomViewRef      // 底部視圖組件引用\n  });\n</script>\n\n<template>\n  <!-- 🎛️ 中間面板組件 (Middle Panel Component) -->\n  <!-- 負責管理上下兩個面板的佈局和垂直拖曳調整功能 -->\n  <!-- 這是一個佈局容器，使用 flexbox 垂直排列，填滿可用空間 -->\n  <div class=\"d-flex flex-column overflow-hidden h-100\">\n    <!-- 📊 上半部內容區域 (Upper Content Area) -->\n    <!-- 包含地圖、儀表板等主要顯示內容 -->\n    <!-- 動態高度根據 contentHeight 計算，拖曳時禁用指標事件避免干擾 -->\n    <div\n      :style=\"{\n        pointerEvents: isOverallDragging ? 'none' : 'auto',\n        height: contentHeight + 'px',\n        overflow: 'hidden',\n      }\"\n    >\n      <!-- 🗺️ 上層視圖組件 (Upper View Component) -->\n      <!-- 傳遞所有必要的 props 給 UpperView，包含地圖狀態、資料、樣式設定等 -->\n      <UpperView\n        ref=\"mainContentRef\"\n        :activeUpperTab=\"activeUpperTab\"\n        :mainPanelWidth=\"mainPanelWidth\"\n        :contentHeight=\"contentHeight\"\n        :showTainanLayer=\"showTainanLayer\"\n        :selectedFilter=\"selectedFilter\"\n        :zoomLevel=\"zoomLevel\"\n        :isPanelDragging=\"isOverallDragging\"\n        :activeMarkers=\"activeMarkers\"\n        @update:activeUpperTab=\"$emit('update:activeUpperTab', $event)\"\n        @update:zoomLevel=\"$emit('update:zoomLevel', $event)\"\n        @update:currentCoords=\"$emit('update:currentCoords', $event)\"\n        @update:activeMarkers=\"$emit('update:activeMarkers', $event)\"\n        @feature-selected=\"$emit('feature-selected', $event)\"\n        @open-distance-modal=\"(lat, lng) => $emit('open-distance-modal', lat, lng)\"\n        @open-isochrone-modal=\"(lat, lng) => $emit('open-isochrone-modal', lat, lng)\"\n      />\n    </div>\n\n    <!-- 🔧 水平拖曳調整器 (Horizontal Resizer) -->\n    <!-- 用於調整上下面板的高度比例 -->\n    <!-- 監聽 mousedown 事件開始拖曳，動態顯示拖曳狀態的樣式 -->\n    <div\n      class=\"my-resizer my-resizer-horizontal my-resizer-middle\"\n      :class=\"{ 'my-dragging': isVerticalDragging }\"\n      @mousedown=\"startVerticalResize\"\n      title=\"拖曳調整底部面板高度\"\n    ></div>\n\n    <!-- 📋 下半部內容區域 (Bottom Content Area) -->\n    <!-- 包含資料表格、控制項等輔助顯示內容 -->\n    <!-- 動態高度根據 actualBottomViewPixelHeight 計算 -->\n    <div\n      class=\"overflow-hidden\"\n      :style=\"{\n        pointerEvents: isOverallDragging ? 'none' : 'auto',\n        height: actualBottomViewPixelHeight + 'px',\n      }\"\n    >\n      <!-- 📊 底部視圖組件 (Bottom View Component) -->\n      <!-- 傳遞表格資料、樣式設定、面板狀態等 props -->\n      <BottomView\n        :activeBottomTab=\"activeBottomTab\"\n        :bottomViewHeight=\"actualBottomViewPixelHeight\"\n        :isPanelDragging=\"isOverallDragging\"\n        @update:activeBottomTab=\"$emit('update:activeBottomTab', $event)\"\n        @highlight-on-map=\"$emit('highlight-on-map', $event)\"\n        @reset-view=\"$emit('reset-view')\"\n      />\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","import script from \"./MiddleView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MiddleView.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script>\n  import { computed, ref, onMounted, onUnmounted } from 'vue';\n  import LayersTab from '../tabs/LayersTab.vue';\n  import DataTableTab from '../tabs/DataTableTab.vue';\n  import PropertiesTab from '../tabs/PropertiesTab.vue';\n\n  export default {\n    name: 'ResponsiveLowerView',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊響應式下半部面板內使用的子組件\n     */\n    components: {\n      LayersTab, // 圖層列表分頁組件\n      DataTableTab, // 資料表格分頁組件\n      PropertiesTab, // 物件屬性分頁組件\n    },\n\n    /**\n     * 🔧 組件屬性定義 (Component Props)\n     * 接收來自父組件的配置和狀態數據\n     */\n    props: {\n      activeTab: { type: String, default: 'layers' },\n      activeRightTab: { type: String, default: 'properties' },\n      activeBottomTab: { type: String, default: 'table' },\n    },\n\n    /**\n     * 📡 組件事件定義 (Component Events)\n     * 定義向父組件發送的事件類型\n     */\n    emits: [\n      'update:activeTab', // 更新作用中分頁\n      'update:activeRightTab', // 更新右側分頁\n      'update:activeBottomTab', // 更新底部分頁\n      'highlight-on-map', // 在地圖上高亮顯示\n      'highlight-feature', // 高亮顯示特徵\n    ],\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯\n     */\n    setup(props, { emit }) {\n      // 📱 動態視窗高度偵測 (Dynamic Viewport Height Detection)\n      const bottomSafeArea = ref(0);\n\n      /**\n       * 📊 計算可用的分頁列表 (Compute Available Tabs)\n       * 根據需求顯示不同的分頁選項\n       */\n      const availableTabs = computed(() => [\n        { id: 'layers', name: '圖層', icon: 'fas fa-layer-group' },\n        { id: 'table', name: '資料表', icon: 'fas fa-table' },\n        { id: 'properties', name: '屬性', icon: 'fa-solid fa-location-dot' },\n      ]);\n\n      /**\n       * 📱 計算底部安全區域 (Calculate Bottom Safe Area)\n       * 動態計算瀏覽器界面佔用的空間\n       */\n      const calculateBottomSafeArea = () => {\n        const windowHeight = window.innerHeight;\n        const visualHeight = window.visualViewport?.height || windowHeight;\n        const heightDiff = windowHeight - visualHeight;\n\n        // 如果可視高度小於視窗高度，說明有瀏覽器界面佔用空間\n        bottomSafeArea.value = heightDiff > 0 ? heightDiff : 0;\n      };\n\n      /**\n       * 🎨 動態底部導航樣式 (Dynamic Bottom Navigation Style)\n       * 根據瀏覽器界面動態調整高度和位置\n       */\n      const getBottomNavStyle = computed(() => {\n        const baseHeight = 60;\n        const extraPadding = bottomSafeArea.value > 0 ? bottomSafeArea.value + 10 : 10;\n\n        return {\n          'min-height': `${baseHeight}px`,\n          'height': `${baseHeight + extraPadding}px`,\n          'padding': `8px 4px ${extraPadding}px 4px`,\n        };\n      });\n\n      /**\n       * 🔘 切換分頁 (Switch Tab)\n       * @param {string} tabId - 分頁 ID\n       */\n      const switchTab = (tabId) => {\n        emit('update:activeTab', tabId);\n      };\n\n      /**\n       * 🚀 組件掛載時初始化 (Component Mounted Initialization)\n       */\n      onMounted(() => {\n        // 初始計算\n        calculateBottomSafeArea();\n\n        // 監聽視窗大小變化\n        window.addEventListener('resize', calculateBottomSafeArea);\n\n        // 監聽 Visual Viewport API（支援的瀏覽器）\n        if (window.visualViewport) {\n          window.visualViewport.addEventListener('resize', calculateBottomSafeArea);\n          window.visualViewport.addEventListener('scroll', calculateBottomSafeArea);\n        }\n\n        // 監聽方向變化\n        window.addEventListener('orientationchange', () => {\n          // 延遲執行，等待瀏覽器完成方向變化\n          setTimeout(calculateBottomSafeArea, 300);\n        });\n      });\n\n      /**\n       * 🗑️ 組件卸載時清理 (Component Unmounted Cleanup)\n       */\n      onUnmounted(() => {\n        window.removeEventListener('resize', calculateBottomSafeArea);\n\n        if (window.visualViewport) {\n          window.visualViewport.removeEventListener('resize', calculateBottomSafeArea);\n          window.visualViewport.removeEventListener('scroll', calculateBottomSafeArea);\n        }\n\n        window.removeEventListener('orientationchange', calculateBottomSafeArea);\n      });\n\n      // 📤 返回響應式數據和函數給模板使用\n      return {\n        availableTabs,\n        switchTab,\n        getBottomNavStyle,\n        bottomSafeArea,\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 📱 響應式下半部面板組件 (Responsive Lower Panel Component) -->\n  <div class=\"d-flex flex-column h-100 my-bgcolor-gray-200\">\n    <!-- 📄 分頁內容區域 (Tab Content Area) -->\n    <div\n      class=\"flex-grow-1 overflow-hidden\"\n      :style=\"{\n        'padding-bottom': `70px`,\n      }\"\n    >\n      <!-- 📋 圖層分頁內容 -->\n      <div v-show=\"activeTab === 'layers'\" class=\"h-100\">\n        <LayersTab />\n      </div>\n\n      <!-- 📊 資料表格分頁內容 -->\n      <div v-show=\"activeTab === 'table'\" class=\"h-100\">\n        <DataTableTab @highlight-on-map=\"$emit('highlight-on-map', $event)\" />\n      </div>\n\n      <!-- 📈 物件屬性分頁內容 -->\n      <div v-show=\"activeTab === 'properties'\" class=\"h-100\">\n        <PropertiesTab @highlight-feature=\"$emit('highlight-feature', $event)\" />\n      </div>\n    </div>\n\n    <!-- 📑 分頁導航 (Tab Navigation) - 固定在底部，動態適應瀏覽器界面 -->\n    <div\n      class=\"position-fixed bottom-0 start-0 end-0 d-flex align-items-center justify-content-between my-bgcolor-gray-200 border-top z-100 w-100\"\n      :style=\"getBottomNavStyle\"\n    >\n      <button\n        v-for=\"tab in availableTabs\"\n        :key=\"tab.id\"\n        class=\"d-flex rounded-3 border-0 flex-grow-1 py-2 mx-1\"\n        :class=\"{\n          'my-btn-transparent': activeTab !== tab.id,\n          'my-btn-blue': activeTab === tab.id,\n        }\"\n        :style=\"{\n          'min-height': '44px',\n          'touch-action': 'manipulation',\n          '-webkit-appearance': 'none !important',\n        }\"\n        @click=\"switchTab(tab.id)\"\n      >\n        <div class=\"d-flex flex-column align-items-center justify-content-center w-100\">\n          <span class=\"my-font-size-sm\"><i :class=\"tab.icon\" class=\"mb-1\"></i></span>\n          <span class=\"my-font-size-xs\">{{ tab.name }}</span>\n        </div>\n      </button>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","import { render } from \"./ResponsiveLowerView.vue?vue&type=template&id=2aa29ae4\"\nimport script from \"./ResponsiveLowerView.vue?vue&type=script&lang=js\"\nexport * from \"./ResponsiveLowerView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./HomeView.vue?vue&type=template&id=032d4f1a\"\nimport script from \"./HomeView.vue?vue&type=script&lang=js\"\nexport * from \"./HomeView.vue?vue&type=script&lang=js\"\n\nimport \"./HomeView.vue?vue&type=style&index=0&id=032d4f1a&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * 🚀 Vue Router 路由配置\n *\n * 長照空間分析系統的路由管理\n * 使用 Vue Router 4 進行單頁應用程式路由控制\n *\n * @author 長照空間分析團隊\n * @version 1.0.0\n */\n\nimport { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\n\n/**\n * 📍 路由配置陣列\n * 定義應用程式的所有路由規則\n */\nconst routes = [\n  {\n    path: '/', // 🏠 根路徑\n    name: 'Home', // 路由名稱\n    component: HomeView, // 對應的 Vue 組件\n  },\n];\n\n/**\n * 🛣️ 路由器實例創建\n *\n * 配置說明：\n * - history: 使用 HTML5 History API 模式\n * - base: 設定應用程式的基礎路徑為 '/long-term-care-web/'\n * - routes: 路由配置陣列\n */\nconst router = createRouter({\n  history: createWebHistory('/long-term-care-web/'),\n  routes,\n});\n\nexport default router;\n","/**\n * 🚀 應用程式主入口文件 (Main Application Entry Point)\n *\n * 功能說明：\n * 1. 🎨 引入 Bootstrap 和自定義主題樣式系統\n * 2. 🧩 初始化 Vue 3 應用程式和全域組件\n * 3. 🗺️ 設定 Vue Router 路由導航系統\n * 4. 📦 配置 Pinia 狀態管理系統\n * 5. 🌍 掛載應用程式到 DOM 容器中\n * 6. 🔧 整合第三方庫（Leaflet、Font Awesome、Bootstrap）\n *\n * 技術棧：\n * - Vue 3 (Composition API)\n * - Vue Router 4\n * - Pinia (狀態管理)\n * - Bootstrap 5 (UI 框架)\n * - Leaflet (地圖庫)\n * - Font Awesome (圖示庫)\n */\n\n// 🔧 Vue 核心模組引入 (Vue Core Module Imports)\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\n\n// 🧩 應用程式組件引入 (Application Component Imports)\nimport App from './App.vue';\nimport router from './router';\n\n// 🎨 引入第三方樣式文件 (Import Third-Party Style Files)\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap 5 CSS 框架\nimport 'leaflet/dist/leaflet.css'; // Leaflet 地圖核心樣式\nimport '@fortawesome/fontawesome-free/css/all.min.css'; // Font Awesome 圖示庫\n\n// 🎨 引入自定義樣式文件 (Import Custom Style Files)\nimport './assets/css/common.css'; // 共用樣式（已包含變數和主題配置）\n\n// ⚙️ 引入第三方 JavaScript 文件 (Import Third-Party JavaScript Files)\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js'; // Bootstrap JS（含 Popper.js）\n// 提供下拉選單、模態框、工具提示等互動功能\n\n// 🐛 調試資訊輸出 (Debug Information Output)\nconsole.log('🎨 樣式文件載入完成');\n\n// 🚀 創建並配置 Vue 應用程式實例 (Create and Configure Vue Application Instance)\nconst app = createApp(App);\n\n// 📦 創建 Pinia 狀態管理實例 (Create Pinia State Management Instance)\nconst pinia = createPinia();\n\n// 🗺️ 註冊 Vue Router 路由系統 (Register Vue Router Navigation System)\napp.use(router);\n\n// 📦 註冊 Pinia 狀態管理系統 (Register Pinia State Management System)\napp.use(pinia);\n\n// 🌍 掛載應用程式到 DOM 元素 (Mount Application to DOM Element)\n// 將 Vue 應用程式掛載到 index.html 中 id=\"app\" 的元素上\napp.mount('#app');\n\n// 🐛 應用程式啟動完成的調試資訊 (Application Startup Debug Information)\nconsole.log('🚀 空間分析視覺化平台已啟動');\nconsole.log('📦 Pinia 狀態管理已初始化');\nconsole.log('🗺️ Vue Router 路由系統已就緒');\nconsole.log('🎨 Bootstrap 5 UI 框架已載入');\nconsole.log('🗺️ Leaflet 地圖庫已準備就緒');\nconsole.log('🔤 Font Awesome 圖示庫已載入');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunklong_term_care_web\"] = self[\"webpackChunklong_term_care_web\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(1407); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["id","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_router_view","name","components","setup","isLoading","ref","loadingText","loadingProgress","showLoadingProgress","loadingSubText","__exports__","render","style","_component_LoadingOverlay","isVisible","$setup","isAnyLayerLoading","progress","showProgress","subText","showDistanceModal","_hoisted_3","_hoisted_4","type","onClick","_cache","args","handleDistanceCancel","_hoisted_5","distanceInput","$event","placeholder","min","step","onKeyup","_withKeys","handleDistanceConfirm","_hoisted_6","disabled","title","length","parseFloat","showIsochroneModal","_hoisted_8","_hoisted_9","_hoisted_10","handleIsochroneCancel","_hoisted_11","isochroneInput","handleIsochroneConfirm","_hoisted_12","_hoisted_14","_ctx","$route","path","_hoisted_15","_hoisted_16","_hoisted_17","leftViewWidth","_normalizeStyle","width","leftViewWidthPx","_component_LeftView","_normalizeClass","isSidePanelDragging","onMousedown","startResize","_component_MiddleView","mainPanelWidthPx","dynamicMainAreaHeight","calculatedMiddleViewHeight","activeUpperTab","activeBottomTab","mainPanelWidth","showTainanLayer","selectedFilter","zoomLevel","currentCoords","activeMarkers","isLoadingData","onResetView","resetView","onHighlightOnMap","handleHighlight","onHighlightFeature","onFeatureSelected","handleFeatureSelected","onOpenDistanceModal","openDistanceModal","onOpenIsochroneModal","openIsochroneModal","rightViewWidth","rightViewWidthPx","_component_RightView","activeRightTab","_hoisted_18","mobileBottomViewHeight","height","_createBlock","_component_UpperView","key","mobileMapKey","contentHeight","windowHeight","isPanelDragging","isVerticalDragging","startVerticalResize","onTouchstart","_component_ResponsiveLowerView","activeTab","activeLowerTab","_hoisted_19","getColorForZone","zone","zoneLower","toLowerCase","includes","async","loadCommunityCareCenterData","layer","layerId","colorName","filePath","fileName","response","fetch","ok","console","error","status","statusText","url","Error","csvText","text","rows","split","map","row","headers","h","trim","headerIndices","序號","indexOf","行政區","里別","據點名稱","據點類型","據點地址","聯絡電話","lat","lon","geoJsonData","features","slice","index","isNaN","warn","address","propertyData","popupData","機構名稱","tableData","color","getComputedStyle","document","documentElement","getPropertyValue","geometry","coordinates","properties","layerName","fillColor","filter","feature","districtCounts","forEach","districtMatch","match","district","districtCount","Object","entries","count","sort","a","b","summaryData","totalCount","loadCLevelUnitData","編號","電話","loadRespiteCareCPlusUnitData","loadElderlyWelfareInstitutionData","屬性","區域別","地址","收容對象","核定床數_核定總床位數","核定床數_長照床數","核定床數_養護床數","核定床數_失智床數","核定床數_安養床數","loadCommunityIntegrationServiceCenterData","單位名稱","服務區域","服務地址_聯絡電話","loadGeneralNursingHomeData","開放床數","loadResidentialLongTermCareData","立案日期","評鑑資訊","load66Data","服務區別","郵遞區號","機構服務地址","聯絡窗口","住宿式短照服務","load142Data","load25Data","巷弄長照站短照服務","load41Data","GA03","GA04","GA06","SC03","SC04","SC06","loadHospitalClinicData","醫療院所","縣市","鄉鎮市區","loadHealthcareFacilityPharmacyData","醫事機構代碼","醫事機構名稱","醫事機構種類","分區業務組","特約類別","服務項目","診療科別","終止合約或歇業日期","固定看診時段","備註","縣市別代碼","合約起日","loadPopulation3LevelsGeoJson","fieldName","json","earthRadiusKm","areaInSqKm","d3","Math","pow","area","population","density","value","minValue","maxValue","densityValues","f","v","isFinite","numColors","colors","i","thresholds","round","colorScale","domain","range","COUNTY","TOWN","VILLAGE","里名","人口密度","toFixed","legendData","label","extent","format","d","toLocaleString","upperBound","lowerBound","loadIncomeGeoJson","log","values","interpolator","FULL","numLegendSteps","t","loadConvenienceStoreData","公司統一編號","公司名稱","分公司統一編號","分公司名稱","分公司地址","分公司狀態","分公司核准設立日期","分公司最後核准變更日期","loadMRTStationGeoJson","NAME","站名","loadBusStopGeoJson","BSM_CHINES","loadLanduseGeoJson","sortedUniqueValues","Array","from","Set","NEWLAYER","Number","ZONE","layerToZoneMap","zoneName","loadTaipeiDistrictGeoJson","PTNAME","區名","useDataStore","defineStore","layers","groupName","groupLayers","visible","isLoaded","shape","loader","description","lastUpdated","Date","toISOString","coverage","isAnalysisLayer","isIsochroneAnalysisLayer","isRoutePlanningLayer","isRouteOptimizationLayer","findLayerById","group","getAllLayers","allLayers","push","toggleLayerVisibility","result","selectedFeature","setSelectedFeature","clearSelectedFeature","calculateDistance","lat1","lng1","lat2","lng2","R","dLat","PI","dLng","sin","cos","c","atan2","sqrt","calculatePointsInRange","centerLat","centerLng","radiusMeters","pointsInRange","visiblePointLayers","l","lng","distance","enhancedFeature","calculatePolygonInRange","polygonInRange","visiblePolygonLayers","hasOverlap","checkPolygonCircleOverlap","overlapType","polygon","ring","updateAnalysisLayerData","analysisLayer","analysisCircles","名稱","範圍內點位數","範圍內面域數","updateIsochroneAnalysisLayerData","isochroneLayer","isochroneFeatures","類型","車程時間","travelTime","addAnalysisPoint","radius","pointId","layerStats","polygonStats","featureName","circleFeature","範圍內多邊形數","分析範圍半徑","pointFeature","parentId","fetchIsochroneData","travelTimeMinutes","apiKey","startPoint","method","Authorization","body","JSON","stringify","locations","range_type","data","calculatePointsInIsochronePolygon","isochroneData","isochronePolygon","allPointLayers","join","isPointInPolygon","calculatePolygonInIsochronePolygon","checkPolygonIsochroneOverlap","point","x","y","inside","j","xi","yi","xj","yj","autoLoadImportantLayersForAnalysis","importantLayerIds","layersToLoad","loadPromises","Promise","all","addIsochroneAnalysisPoint","isochronePolygonFeature","addSimpleIsochroneAnalysisPoint","FALLBACK_RADIUS","clearAnalysisLayer","clearIsochroneAnalysisLayer","deleteAnalysisPoint","isTargetCircle","isTargetPoint","deleteIsochroneAnalysisPoint","isTargetPolygon","updateRoutePlanningLayerData","routePlanningLayer","completedRoutes","currentRoutePoints","totalDistance","reduce","sum","route","totalDuration","duration","起點","startPointName","終點","endPointName","路徑點數","waypoints","總距離","預估時間","建立時間","createdAt","狀態","firstPoint","lastPoint","addRoutePlanningPoint","currentPoints","nextOrder","now","random","toString","substr","pointName","routePlanningPointFeature","order","latitude","longitude","clearRoutePlanningLayer","clearAll","deleteRoutePlanningPoint","originalCount","newCount","remainingPoints","newOrder","getRoutePlanningCoordinates","routePoints","fetchRouteDirections","profile","apiUrl","Accept","errorMessage","errorData","message","parseError","summary","calculateAndDrawRoute","routeData","distanceKm","durationMin","existingRoutes","routeNumber","routeId","routeFeature","addRouteOptimizationPoint","routeOptimizationLayer","routeOptimizationPointFeature","updateRouteOptimizationLayerData","clearRouteOptimizationLayer","getRouteOptimizationCoordinates","optimizationPoints","currentOptimizationPoints","calculateAndDrawOptimizedRoute","optimizationData","fetchRouteOptimization","routeFeatures","totalDistanceKm","totalDurationMin","routes","steps","optimizedCoordinates","optimizedPointInfo","processedPointIds","stepIndex","location","job","originalPoint","find","tolerance","lonDiff","abs","latDiff","has","add","stepType","visitOrder","allUserPoints","p","coords","userPoint","isAlreadyMatched","some","info","routeGeometry","routeDistance","routeDuration","directionsData","vehicleId","vehicle","optimizedOrder","routeCount","requestBody","jobs","coord","vehicles","start","end","code","cost","unassigned","visibleLayers","computed","loadingLayers","persist","$props","role","_toDisplayString","_hoisted_7","props","Boolean","default","required","String","validator","_component_LayersTab","_Fragment","_renderList","toggleLayer","checked","onChange","for","ICONS","zh","en","icon","edit","delete","save","cancel","confirm","search","refresh","upload","download","import","export","home","back","forward","up","down","success","warning","loading","view","hide","expand","collapse","hidden","table","zoom_in","zoom_out","center","chart","statistics","dashboard","analysis","hospital","clinic","pharmacy","elderly_care","medical","demographics","community","income","tax","drag","move_up","move_down","settings","sort_up","sort_down","folder","folder_open","file","information","alert","failure","complete","reset","menu","close","getIcon","iconKey","lang","iconInfo","dataStore","layerListRef","LayersTab","_component_PropertiesTab","$emit","selectedLayer","minHeight","_component_DetailItem","hasProperties","$options","formatLabel","formatValue","isAnalysisObject","isIsochroneAnalysisObject","isRoutePlanningLine","routePlanningDetails","routeInfo","formatDateTime","isRoutePlanningPoint","isRouteOptimizationLine","routeOptimizationDetails","_hoisted_13","isRouteOptimizationPoint","DetailItem","keys","isRoutePlanningObject","isRouteOptimizationObject","relatedPoints","allObjectsInRange","points","obj","objectType","polygons","combinedStats","combined","isoString","methods","labelMap","PTVNAME","中位數","分析點名稱","分析範圍名稱","緯度","經度","中心緯度","中心經度","分析半徑","關聯分析點","PropertiesTab","analysisList","selectedAnalysisId","emits","getActiveAnalysisCount","watch","newFeature","store","immediate","selectedFeatureComputed","_component_MapTab","maxCount","_component_DashboardTab","containerHeight","isClickMode","isIsochroneClickMode","isRoutePlanningClickMode","isRouteOptimizationClickMode","mapContainerId","showContextMenu","contextMenuPosition","_withModifiers","hideContextMenu","getBasemapLabel","selectedBasemap","basemaps","basemap","href","changeBasemap","showAllFeatures","isAnyLayerVisible","showFullCity","stopClickMode","startClickMode","stopIsochroneClickMode","startIsochroneClickMode","finishRoutePlanningClickMode","startRoutePlanningClickMode","finishRouteOptimizationClickMode","startRouteOptimizationClickMode","useDefineStore","state","mapView","zoom","actions","setSelectedBasemap","this","setMapView","L","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconRetina","iconUrl","shadowUrl","iconShadow","emit","mapContainer","mapInstance","currentTileLayer","layerGroups","contextMenu","selectedAnalysisFeature","isMapReady","createMap","rect","getBoundingClientRect","zoomControl","attributionControl","on","handleZoomEnd","handleMoveEnd","e","originalEvent","stopPropagation","latlng","target","closest","resetAllLayerStyles","getPane","zIndex","getContainer","cursor","classList","getZoom","getCenter","setBasemap","removeLayer","config","attribution","addTo","mapContainerElement","backgroundColor","createFeatureLayer","geoJsonLayer","pointToLayer","html","className","iconSize","iconAnchor","popupAnchor","marker","circle","weight","opacity","fillOpacity","isCompleted","borderColor","textColor","lineCap","lineJoin","dashArray","onEachFeature","bindPopup","offset","closeButton","autoClose","closeOnClick","popupContent","mouseover","_originalStyle","options","setStyle","bringToFront","element","getElement","innerIconDiv","querySelector","transition","transform","mouseout","isSelected","resetStyle","click","contextmenu","showAnalysisContextMenu","showIsochroneAnalysisContextMenu","layerGroup","eachLayer","layerData","syncLayers","storeLayers","currentLayerIds","visibleLayerIds","newLayerIds","layersToRemove","hasAnalysisLayerUpdate","newAddedLayers","reverse","shouldCreateLayer","newLayer","bounds","hasValidBounds","getBounds","layerBounds","isValid","extend","setTimeout","fitBounds","padding","totalMarkers","acc","getLayers","defaultCenter","defaultZoom","setView","highlightFeature","highlightData","targetLayerId","targetFeatureId","performHighlight","targetLayer","targetFeature","specificLayerGroup","featureId","getLatLng","maxZoom","openPopup","retrySuccess","invalidateSize","nextTick","newRect","initMap","remove","routeResult","optimizationResult","event","preventDefault","pageX","clientX","pageY","clientY","resizeObserver","resizeTimeout","setupResizeObserver","window","ResizeObserver","entry","contentRect","clearTimeout","observe","basemapType","attempts","maxAttempts","tryInit","onMounted","addEventListener","onUnmounted","disconnect","off","removeEventListener","deep","activeLayerTab","chartContainer","setActiveLayerTab","currentLayerSummary","currentLayerName","drawHorizontalBarChart","selectAll","margin","top","right","bottom","left","containerWidth","clientWidth","barHeight","barSpacing","svg","append","attr","g","xScale","calculateTickSystem","dataMaxValue","interval","maxTicks","minInterval","ceil","chartMaxValue","ticks","tickSystem","tickValues","enter","previousLayers","newLayers","previousLayerIds","addedLayerIds","newestAddedLayerId","newSummary","handleResize","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","MapTab","DashboardTab","dashboardContainerRef","dragging","tab","pointerEvents","newTab","oldTab","fitToTainanBounds","invalidateMapSize","bottomViewHeight","_component_DataTableTab","__emit","layerSortStates","getLayerColumns","getSortedData","sampleItem","getLayerDataCount","sortState","aValue","bValue","localeCompare","handleSort","getSortIcon","item","column","DataTableTab","bottomTabContentRef","__props","mainContentRef","bottomViewHeightPercent","isOverallDragging","middleSectionTotalHeight","totalHeight","max","actualBottomViewPixelHeight","pixelHeight","mainContentH","startY","startBottomPercent","currentMiddleSectionHeight","handleMouseMove","moveEvent","deltaY","deltaPercent","newPercent","handleMouseUp","resetMapTab","stopMapClickMode","__expose","UpperView","BottomView","getBottomNavStyle","availableTabs","switchTab","bottomSafeArea","calculateBottomSafeArea","innerHeight","visualHeight","visualViewport","heightDiff","baseHeight","extraPadding","tabId","LoadingOverlay","LeftView","RightView","MiddleView","ResponsiveLowerView","middlePanelRef","mobileUpperViewRef","appFooterRef","MIN_LEFT_PANEL_WIDTH_PERCENT","windowWidth","innerWidth","footerHeight","loadingLayer","distanceModalPosition","isochroneModalPosition","direction","startX","startLeftWidth","startRightWidth","currentWindowWidth","leftWidth","rightWidth","deltaX","deltaXPercent","newWidth","validatePanelSizes","mainWidth","radiusInMeters","timeMinutes","prevWidth","prevIsDesktop","currentIsDesktop","handleScreenSizeChange","offsetHeight","calculateMinBottomHeight","screenSizeObserver","isXlAndAbove","wasXlAndAbove","contains","toggle","updateActiveMarkers","storeSelectedFeature","isDesktop","minNavigationHeight","currentWindowHeight","isTouch","startsWith","touches","startBottomHeight","handleMove","currentY","newHeight","minHeightPercent","handleEnd","finalHeight","passive","Event","dispatchEvent","component","HomeView","router","createRouter","history","createWebHistory","app","createApp","App","pinia","createPinia","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","every","splice","r","n","getter","__esModule","definition","o","defineProperty","enumerable","get","globalThis","Function","prop","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}